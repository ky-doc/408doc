import{_ as l,X as n,Y as e,a3 as t,a0 as s,a2 as a}from"./framework-cd5fce69.js";const i="/408doc/408noteImg/images/image-20211011211555459.png",r="/408doc/408noteImg/images/image-20211012140827410.png",m="/408doc/408noteImg/images/image-20211012141124311.png",p="/408doc/408noteImg/images/image-20211012155645393.png",o="/408doc/408noteImg/images/image-20211012194326895.png",c="/408doc/408noteImg/images/image-20211012183220060.png",h="/408doc/408noteImg/images/image-20211012184948291.png",g="/408doc/408noteImg/images/image-20211012185553260.png",d="/408doc/408noteImg/images/image-20211012191446231.png",u="/408doc/408noteImg/images/image-20211013161147965.png",y="/408doc/408noteImg/images/image-20211013161957442.png",x="/408doc/408noteImg/images/image-20211013170422782.png",v="/408doc/408noteImg/images/image-20211013202206363.png",b="/408doc/408noteImg/images/image-20211014161711704.png",w="/408doc/408noteImg/images/image-20211014164922733.png",M="/408doc/408noteImg/images/image-20211014165910493.png",C="/408doc/408noteImg/images/image-20211014182950556.png",f="/408doc/408noteImg/images/image-20211015163626715.png",_="/408doc/408noteImg/images/image-20211015165305573.png",k="/408doc/408noteImg/images/image-20211015190532819.png",z="/408doc/408noteImg/images/image-20211015192026769.png",R="/408doc/408noteImg/images/image-20211015193552644.png",P="/408doc/408noteImg/images/image-20211015205045837.png",U="/408doc/408noteImg/images/image-20211015212043863.png",L="/408doc/408noteImg/images/image-20211016191644899.png",T="/408doc/408noteImg/images/image-20211016200155455.png",A="/408doc/408noteImg/images/image-20211016201215954.png",B="/408doc/408noteImg/images/image-20211016203535295.png",S="/408doc/408noteImg/images/image-20211016204929942.png",O="/408doc/408noteImg/images/image-20211016210034587.png",I="/408doc/408noteImg/images/image-20211016211845324.png",E={},D=t('<h2 id="存储器概述" tabindex="-1"><a class="header-anchor" href="#存储器概述" aria-hidden="true">#</a> 存储器概述</h2><h3 id="存储器的分类" tabindex="-1"><a class="header-anchor" href="#存储器的分类" aria-hidden="true">#</a> 存储器的分类</h3><h4 id="按作用分类" tabindex="-1"><a class="header-anchor" href="#按作用分类" aria-hidden="true">#</a> 按作用分类</h4><ol><li><p>主存储器，简称主存，又称内存储器（<strong>内存</strong>）：</p><p>存放计算机运行期间所需的大量程序和数据，CPU 可以<strong>直接随机地对其进行访问</strong></p><p>也可以<strong>和高速缓冲存储器及辅助存储器交换数据</strong>，其特点是<strong>容量较小</strong>、<strong>存取速度较快</strong>、每位<strong>价格较高</strong></p></li><li><p>辅助存储器，简称辅存，又称外存储器（外存）：</p><p>是主存储器的后援存储器，用来存放当前暂时不用的程序和数据，以及一些需要永久性保存的信息</p><p>它<strong>不能与 CPU 直接交换信息</strong>，其特点是<strong>容量极大</strong>、<strong>存取速度较慢</strong>、单位<strong>成本低</strong></p></li><li><p>高速缓冲存储器，简称 Cache：</p><p>位于<strong>主存和 CPU 之间</strong>，用来存放正在执行的程序段和数据，以便 CPU 能高速地使用它们</p><p>Cache 的<strong>存取速度可与 CPU 的速度相匹配</strong>，但<strong>存储容量小</strong>、<strong>价格高</strong>，现代计算机通常将它们<strong>制作在 CPU 中</strong></p></li></ol><h4 id="按存储介质分类" tabindex="-1"><a class="header-anchor" href="#按存储介质分类" aria-hidden="true">#</a> 按存储介质分类</h4><p>按存储介质，存储器可分为：</p><ul><li>磁表面存储器（磁盘、磁带）</li><li>磁心存储器半导体存储器（MOS 型存储器、双极型存储器）</li><li>光存储器（光盘）</li></ul><h4 id="按存取方式分类" tabindex="-1"><a class="header-anchor" href="#按存取方式分类" aria-hidden="true">#</a> 按存取方式分类</h4><ol><li><p>随机存储器 RAM：</p><p>存储器的<strong>每个存储单元的内容都可以随机存取</strong>，而且存取时间与存储单元的物理位置无关</p><p>其优点是<strong>读写方便、使用灵活</strong>，主要用作<strong>主存或高速缓冲</strong>存储器，RAM 又分为静态 RAM 和动态 RAM</p></li><li><p>只读存储器 ROM：</p><p>存储器的内容<strong>只能随机读出而不能写入</strong>，信息一旦写入存储器就固定不变，即使断电，<strong>内容也不会丢失</strong></p><p>通常用它<strong>存放固定不变的数据</strong>；它<strong>与随机存储器可共同作为主存的一部分</strong>，统一构成主存的地址域</p><p>注意：现在已可通过电擦除等方式进行写入，但仍保留了断电内容保留、随机读取特性，但其写入速度比读取速度慢得多</p></li><li><p>串行访问存储器：</p><p>对存储单元进行读/写操作时，需<strong>按其物理位置的先后顺序寻址</strong></p><p>包括<strong>顺序存取存储器</strong>（如磁带）与<strong>直接存取存储器</strong>（如磁盘、光盘）</p></li></ol><p>顺序存取存储器的内容只能按某种顺序存取，存取时间的长短<strong>与信息在存储体上的物理位置有关</strong>，其特点是<strong>存取速度慢</strong></p><p>直接存取存储器存取信息时通常<strong>先寻找整个存储器中的某个小区域</strong>（如磁盘上的磁道，随机访问），再在<strong>小区域内顺序查找</strong></p><h4 id="按信息的可保存性分类" tabindex="-1"><a class="header-anchor" href="#按信息的可保存性分类" aria-hidden="true">#</a> 按信息的可保存性分类</h4><p>断电后，存储信息即消失的存储器，称为<strong>易失性存储器</strong>，如 RAM</p><p>断电后，信息仍然保持的存储器，称为<strong>非易失性存储器</strong>，如 ROM、磁表面存储器和光存储器</p><p>若某个存储单元所存储的信息被读出时，原存储信息被破坏，则称为<strong>破坏性读出</strong></p><p>若读出时，被读单元原存储信息不被破坏，则称为<strong>非破坏性读出</strong></p><p>具有破坏性读出性能的存储器，每次<strong>读出操作后</strong>，必须<strong>恢复被破坏的信息</strong></p><h3 id="存储器的性能指标" tabindex="-1"><a class="header-anchor" href="#存储器的性能指标" aria-hidden="true">#</a> 存储器的性能指标</h3><p>存储器有 3 个主要性能指标，即存储容量、单位成本和存储速度，这 3 个指标相互制约</p>',19),H=s("ol",null,[s("li",null,[s("p",null,[a("存储容量："),s("strong",null,"存储字数 × 字长"),a("（如 "),s("code",null,"1M × 8"),a(" 位）")]),s("p",null,[a("单位换算："),s("code",null,"1B"),a("（Byte 字节）= "),s("code",null,"8b"),a("（bit 位）")]),s("p",null,"存储字数表示存储器的地址空间大小，字长表示一次存取操作的数据量")]),s("li",null,[s("p",null,"单位成本：每位价格 = 总成本 / 总容量")]),s("li",null,[s("p",null,"存储速度：数据传输率 = 数据的宽度 / 存储周期"),s("ol",null,[s("li",null,[s("p",null,[a("存取时间 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("：指一次存储器操作"),s("strong",null,"从开始到完成所经历的时间"),a("，分为读出时间和写入时间")])]),s("li",null,[s("p",null,[a("存取周期 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("：存取周期又称读写周期或访问周期")]),s("p",null,[a("指存储器进行一次"),s("strong",null,"完整的读或写操作所需的全部时间"),a("（存储时间 + 恢复时间）")]),s("p",null,[a("即连续两次独立访问存储器操作（读或写操作）"),s("strong",null,"之间"),a("所需的最小时间"),s("strong",null,"间隔")])]),s("li",null,[s("p",null,[a("主存带宽 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"B"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"B_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0502em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("：主存带宽又称"),s("strong",null,"数据传输率"),a("，表示"),s("strong",null,"每秒从主存进出信息的最大数量"),a("，单位为字/秒、字节/秒、位/秒")])])])])],-1),N=s("figure",null,[s("img",{src:i,alt:"image-20211011211555459",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20211011211555459")],-1),F=s("p",null,[a("存取时间不等于存储周期，"),s("strong",null,"通常存储周期大于存取时间")],-1),W=s("p",null,[a("对"),s("strong",null,"任何一种存储器"),a("，在读写操作之后，总要有一段"),s("strong",null,"恢复内部状态"),a("的复原时间（电路状态恢复吧）")],-1),Q=s("p",null,[a("对于破坏性读出的存储器，"),s("strong",null,"存取周期往往比存取时间大得多"),a("，甚至可达 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")]),s("mo",null,"="),s("mn",null,"2"),s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_m = 2T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("，因为存储器中的信息读出后需要"),s("strong",null,"马上进行再生")],-1),j=s("p",null,[a("选择题：若某存储器存储周期为 "),s("code",null,"250ns"),a("，每次读出 16 位，该存储器的数据传输率是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"2"),s("mi",null,"B"),s("mi",{mathvariant:"normal"},"/"),s("mo",{stretchy:"false"},"("),s("mn",null,"250"),s("mo",null,"×"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mrow",null,[s("mo",null,"−"),s("mn",null,"9")])]),s("mi",null,"s"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"8"),s("mo",null,"×"),s("mn",null,"1"),s("msup",null,[s("mn",null,"0"),s("mn",null,"6")]),s("mi",null,"B"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"s")]),s("annotation",{encoding:"application/x-tex"},"2B/(250\\times 10^{-9}s)=8\\times10^6B/s")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mord"},"/"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"250"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"−"),s("span",{class:"mord mtight"},"9")])])])])])])])]),s("span",{class:"mord mathnormal"},"s"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mord"},[s("span",{class:"mord"},"0"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"6")])])])])])])]),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05017em"}},"B"),s("span",{class:"mord"},"/"),s("span",{class:"mord mathnormal"},"s")])])])],-1),V=t('<h2 id="存储器的层次化结构" tabindex="-1"><a class="header-anchor" href="#存储器的层次化结构" aria-hidden="true">#</a> 存储器的层次化结构</h2><h3 id="存储器的性能指标-1" tabindex="-1"><a class="header-anchor" href="#存储器的性能指标-1" aria-hidden="true">#</a> 存储器的性能指标</h3><p>为了解决存储系统大容量、高速度和低成本 3 个相互制约的矛盾，在计算机系统中，通常采用多级存储器结构</p><figure><img src="'+r+'" alt="image-20211012140827410" tabindex="0" loading="lazy"><figcaption>image-20211012140827410</figcaption></figure><p>存储系统层次结构主要体现在 <strong>Cache - 主存</strong>层次和<strong>主存 - 辅存</strong>层次</p><p>前者主要解决 <strong>CPU 和主存速度不匹配</strong>的问题，后者主要解决<strong>存储系统的容量</strong>问题</p><p>在存储体系中，<strong>Cache、主存能与 CPU 直接交换信息</strong>，辅存则要通过主存与 CPU 交换信息；主存与 CPU、Cache、辅存都能交换信息</p><figure><img src="'+m+'" alt="image-20211012141124311" tabindex="0" loading="lazy"><figcaption>image-20211012141124311</figcaption></figure><p>存储器层次结构的主要思想是<strong>上一层的存储器作为低一层存储器的高速缓存</strong></p><p>Cache - 主存层次速度接近于 Cache，容量和位价却接近于主存；主存 - 辅存层次速度接近于主存，容量和位价却接近于辅存</p><p>这就解决了速度、容量、成本这三者之间的矛盾，现代计算机系统几乎都采用这种三级存储系统</p><p><strong>主存和 Cache 之间的数据调动</strong>是由硬件自动完成的，对所有程序员均<strong>是透明的</strong>；而<strong>主存和辅存之间的数据调动</strong>则是由硬件和操作系统共同完成的，对<strong>应用程序员是透明的</strong></p><p>在主存 - 辅存这一层次的不断发展中，逐渐形成了虚拟存储系统，在这个系统中程序员编程的地址范围与虚拟存储器的地址空间相对应</p><p>注意：在 Cache - 主存和主存 - 辅存层次中，<strong>上一层中的内容都只是下一层中的内容的副本</strong></p><h3 id="cache-主存效率计算" tabindex="-1"><a class="header-anchor" href="#cache-主存效率计算" aria-hidden="true">#</a> Cache - 主存效率计算</h3><ol><li>求 Cache 的命中率：Cache 命中次数 / 主存命中次数</li><li>求平均访问时间：Cache 命中率 × Cache 访问时间 + 主存命中率 × 主存访问时间</li><li>求 Cache - 主存储系统效率：访问 Cache 时间 / 平均访问时间</li></ol><p>题目：Cache 的存储时间是 <code>100ns</code>，主存的存储时间是 <code>1000ns</code>，若希望平均存储时间不超过 Cache 存储时间的 115%，则 Cache 的命中率至少为多少？</p><p>平均存储时间为 <code>100ns</code> × 115% = <code>115ns</code></p><p>设命中率为 x，得 <code>100x + 1000(1 - x) ≤ 115</code> 得 x = 98.33%，因此命中率至少为 99%</p><h2 id="半导体随机存储器" tabindex="-1"><a class="header-anchor" href="#半导体随机存储器" aria-hidden="true">#</a> 半导体随机存储器</h2><h3 id="sram-和-dram" tabindex="-1"><a class="header-anchor" href="#sram-和-dram" aria-hidden="true">#</a> SRAM 和 DRAM</h3><h4 id="sram-的工作原理" tabindex="-1"><a class="header-anchor" href="#sram-的工作原理" aria-hidden="true">#</a> SRAM 的工作原理</h4><p>通常把<strong>存放一个二进制</strong>位的物理器件称为<strong>存储元</strong>，它是存储器的最基本的构件</p><p>地址码相同的<strong>多个存储元构成一个存储单元</strong>，若干<strong>存储单元的集合构成存储体</strong></p><p>静态随机存储器（SRAM）的存储元是用<strong>双稳态触发器</strong>（六晶体管 MOS）来记忆信息的，因此即使信息被读出后，它仍保持其原状态而不需要再生（<strong>非破坏性读出</strong>）</p><p>SRAM 的存取速度快，但集成度低，功耗较大，所以一般用来组成<strong>高速缓冲存储器</strong></p><h4 id="dram-的工作原理" tabindex="-1"><a class="header-anchor" href="#dram-的工作原理" aria-hidden="true">#</a> DRAM 的工作原理</h4><h5 id="dram-的定义" tabindex="-1"><a class="header-anchor" href="#dram-的定义" aria-hidden="true">#</a> DRAM 的定义</h5><p>动态随机存储器（DRAM）是利用存储元电路中<strong>栅极电容</strong>上的电荷来存储信息的，DRAM 通常<strong>只使用一个晶体管</strong>，所以它比SRAM 的密度要高很多，由于 DRAM 使用电容存储信息，所以它是<strong>破坏性读出</strong>，每次<strong>读取后要恢复</strong></p><p>DRAM 采用<strong>地址复用技术</strong>，地址线是原来的 1 / 2，地址信号<strong>分行、列两次传送</strong>；SRAM 行和列不一定一样不能使用</p><p>相对于 SRAM 来说，DRAM 具有<strong>容易集成、位价低、容量大和功耗低</strong>等优点，但 DRAM 的存取速度比 SRAM 的慢，一般用来组成<strong>大容量主存系统</strong></p><p>DRAM 电容上的电荷一般<strong>只能维持 <code>1~2ms</code></strong>，信息会自动消失，<strong>每隔一定时间必须刷新</strong>，通常取 <code>2ms</code>，称为刷新周期</p><h5 id="dram-的刷新" tabindex="-1"><a class="header-anchor" href="#dram-的刷新" aria-hidden="true">#</a> DRAM 的刷新</h5><ol><li><p>集中刷新：在一个刷新周期内使用一段固定的时间，对存储器的行<strong>逐一刷新</strong>，期间<strong>停止对存储器的读写操作</strong>，称为<strong>死时间</strong>，或访存<strong>死区</strong></p><p>优点：读写操作时不受刷新工作的影响；缺点：在集中刷新期间不能访问存储器</p></li><li><p>分散刷新：把对<strong>每行的刷新分散到各个工作周期中</strong></p><p>一个存储器的<strong>系统工作周期分为两部分</strong>：前半部分用于正常读、写或保持，后半部分用于刷新</p><p>优点：<strong>没有死区</strong>；缺点：<strong>加长了系统的存取周期</strong>，降低了整机的速度</p><p>注意：<u>刷新的行与读的行不是同一行，而且即使没有前半部分也要进行后半部分</u></p></li><li><p>异步刷新：是<strong>前两种方法的结合</strong>，它既可<strong>缩短死时间</strong>，又能充分利用最大刷新间隔为 <code>2ms</code> 的特点</p><p>具体做法是将刷新周期除以行数，得到两次刷新操作之间的间间隔 t，利用逻辑电路<strong>每隔时间 t 产生一次刷新请求</strong></p><p>这样可以避免使 CPU 连续等待过长的时间，而且<strong>减少了刷新次数</strong>，从根本上提高了整机的工作效率</p></li></ol><p>DRAM 的刷新需注意以下问题：</p><ol><li>刷新对 CPU 是透明的，即<strong>刷新不依赖于外部的访问</strong></li><li><strong>动态 RAM 的刷新单位是行</strong>，由芯片内部自行生成行地址</li><li>刷新操作是把信息读出，通过刷新放大器存回存储单元，即读取恢复，所以仅<strong>占用一个存储周期</strong></li><li>刷新时不需要选片，即整个存储器中的<strong>所有芯片同时被刷新</strong></li></ol><h4 id="存储器芯片的内部结构" tabindex="-1"><a class="header-anchor" href="#存储器芯片的内部结构" aria-hidden="true">#</a> 存储器芯片的内部结构</h4><p>存储器芯片由存储体、IO 读写电路、地址译码和控制电路等部分组成</p><figure><img src="'+p+'" alt="image-20211012155645393" tabindex="0" loading="lazy"><figcaption>image-20211012155645393</figcaption></figure><ol><li><p>存储体（存储矩阵）<strong>存储体是存储单元的集合</strong>，它由行选择线 X 和列选择线 Y 来选择所访问单元，存储体的相同行、列上的位同时被读出或写入</p></li><li><p>地址译码器：用来<strong>将地址转换相应的行或列的位置</strong>，如 101 转化为第 5 条线输出高电平，其他线均为低电平</p></li><li><p>I/O 控制电路：用以<strong>控制被选中的单元的读出或写入</strong>，具有放大信息的作用</p></li><li><p>片选控制信号：用于<strong>选择使用哪一个芯片</strong>，因为单个芯片容量太少</p><p>如果为高电平时对该存储芯片的操作是有效的，否则操作是无效的，多个存储芯片中只会有一个是高电平</p></li><li><p>读/写控制信号：根据 CPU 给出的是读命令还是写命令，控制被选中单元进行读或写</p></li></ol><p>外面可视的针脚是：</p><figure><img src="'+o+'" alt="image-20211012194326895" tabindex="0" loading="lazy"><figcaption>image-20211012194326895</figcaption></figure><ol><li>地址：针脚和 log(地址) 一样多</li><li>输出：阵脚和其位数一样多</li><li>片选：一般是 1 根，但在 DRAM 中片选会变成<strong>行通选和列通选</strong>各占 1 根</li><li>读写：读写控制可能共用一根，也可能分开使用</li></ol><h4 id="存储器的读、写周期" tabindex="-1"><a class="header-anchor" href="#存储器的读、写周期" aria-hidden="true">#</a> 存储器的读、写周期</h4><h5 id="ram-的读周期" tabindex="-1"><a class="header-anchor" href="#ram-的读周期" aria-hidden="true">#</a> RAM 的读周期</h5><figure><img src="'+c+'" alt="image-20211012183220060" tabindex="0" loading="lazy"><figcaption>image-20211012183220060</figcaption></figure>',46),K=s("p",null,[s("u",null,"高电平优先是指在高电平时才是有效的；低电平优先是在低电平才是有效的"),a("；"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 是"),s("strong",null,"低电平优先")],-1),Y=s("ol",null,[s("li",null,[a("地址有效是指给出了地址，但地址并不是真正的稳定，因为需要"),s("strong",null,"等待电流流动")]),s("li",null,[a("地址稳定后 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 输出片选信号，和地址一起就可以找到要读取的单元")]),s("li",null,"确定要读取的单元后，需要等待数据的电流流出，即数据稳定"),s("li",null,[a("数据稳定后 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 就完成工作了，输出完毕")]),s("li",null,"读取完成，输出都取消，但需要等待电流流完，这等待的时间就是恢复")],-1),X=s("p",null,[a("其中 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mrow",null,[s("mi",null,"R"),s("mi",null,"C")])])]),s("annotation",{encoding:"application/x-tex"},"t_{RC}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.07153em"}},"RC")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是存储周期，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mi",null,"A")])]),s("annotation",{encoding:"application/x-tex"},"t_A")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"A")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是地址有效到数据稳定的时间（读出时间），"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mrow",null,[s("mi",null,"C"),s("mi",null,"O")])])]),s("annotation",{encoding:"application/x-tex"},"t_{CO}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3283em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"CO")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是片选保持时间")],-1),G=t('<p>里面很多地方需要等电流移动，即电流流到合适位置，如片选输出后要等他和地址汇合后才能得到数据位置</p><h5 id="ram-的写周期" tabindex="-1"><a class="header-anchor" href="#ram-的写周期" aria-hidden="true">#</a> RAM 的写周期</h5><figure><img src="'+h+'" alt="image-20211012184948291" tabindex="0" loading="lazy"><figcaption>image-20211012184948291</figcaption></figure><p>读和写一样，是计算电流等待的过程，确定各自输出的时间</p><ol><li>地址有效等到地址稳定</li><li>发生片选信号和写命令信号，等片选信号和地址汇合就数据有效</li><li>等数据稳定就开始写入数据</li><li>写入完就把输出收起，等待电流结束（恢复）</li></ol><h4 id="sram-和-dram-的比较" tabindex="-1"><a class="header-anchor" href="#sram-和-dram-的比较" aria-hidden="true">#</a> SRAM 和 DRAM 的比较</h4><figure><img src="'+g+'" alt="image-20211012185553260" tabindex="0" loading="lazy"><figcaption>image-20211012185553260</figcaption></figure><h3 id="只读存储器" tabindex="-1"><a class="header-anchor" href="#只读存储器" aria-hidden="true">#</a> 只读存储器</h3><h4 id="只读存储器的特点" tabindex="-1"><a class="header-anchor" href="#只读存储器的特点" aria-hidden="true">#</a> 只读存储器的特点</h4><p>ROM 和 RAM 都是支持随机存取的存储器，其中 SRAM 和 DRAM 均为<strong>易失性半导体存储器</strong></p><p>而 ROM 中有了信息，就不能轻易改变，即使<strong>掉电也不会丢失</strong>，它在计算机系统中是只供读出的存储器</p><p>ROM 器件有两个显著的优点：</p><ol><li>结构简单，所以位密度比可读写存储器的高</li><li>具有非易失性，所以可靠性高</li></ol><h4 id="rom-的类型" tabindex="-1"><a class="header-anchor" href="#rom-的类型" aria-hidden="true">#</a> ROM 的类型</h4><ol><li><p>掩模式只读存储器（MROM）</p><p>MROM 的内容由半导体制造厂按用户提出的要求在芯片的生产过程中直接写入，<strong>写入以后任何人都无法改变其内容</strong></p><p>优点是<strong>可靠性高，集成度高，价格便宜</strong>；缺点是<strong>灵活性差</strong></p></li><li><p>一次可编程只读存储器（PROM）</p><p>PROM 允许用户利用专门的设备（编程器）写入自己的程序，<strong>一旦写入，内容就无法改变</strong></p></li><li><p>可擦除可编程只读存储器（EPROM）</p><p>EPROM 不仅可以由用户利用编程器写入信息，而且可以对其内容进行多次改写</p><p>修改 EPROM 的内容时，先将其全部内容擦除，然后编程，紫外线擦除（<code>UVEPROM</code>）和电擦除（EEPROM​）</p><p>EPROM 虽然既可读又可写，但它的<strong>编程次数有限，且写入时间过长</strong></p></li><li><p>闪速存储器（Flash Memory）</p><p>Flash Memory 是在 EPROM 与 EEPROM​ 的基础上发展起来的，其主要特点是既可在不加电的情况下<strong>长期保存信息</strong>，又能在线进行<strong>快速擦除与重写</strong></p><p>闪速存储器既有 EPROM 的价格便宜、集成度高的优点，又有 EEPROM​ 电可擦除重写的特点，且擦除重写的速度快</p></li><li><p>固态硬盘（Solid State Drives，SSD）</p><p><strong>基于闪存</strong>的固态硬盘是用固态电子存储芯片阵列制成的硬盘，由控制单元和存储单元（FLASH芯片）组成</p><p>保留了 Flash Memory 长期保存信息、快速擦除与重写的特性</p><p>对比传统硬盘也具有读写速度快、低功耗的特性，缺点是价格较高</p></li></ol><p>选择题：U 盘属于只读存储器，采用 EEPROM 技术，注意：ROM 虽然是随机存储但不是随机存储器</p><p>选择题：闪存用 MOS 管，写入前必须先擦出数据，因此写速度比读速度慢，SSD 就是由 Flash 芯片组成</p><h3 id="主存储器的基本组成" tabindex="-1"><a class="header-anchor" href="#主存储器的基本组成" aria-hidden="true">#</a> 主存储器的基本组成</h3><figure><img src="'+d+'" alt="image-20211012191446231" tabindex="0" loading="lazy"><figcaption>image-20211012191446231</figcaption></figure><p>由一个个存储 0 或 1 的记忆单元（也称存储元件）构成的存储矩阵（也称存储体）是存储器的核心部分</p><p>为了存取存储体中的信息，必须对存储单元编号（也称编址）</p><p>编址单位是指把多少个位编成一个单位，可以按字节编址，也可以按字编址，<strong>现代计算机通常采用字节编址方式</strong></p><p>访问主存的步骤：</p><ol><li>CPU 把被访问单元的地址送到 MAR 中</li><li>通过地址线将主存地址送到主存中的地址寄存器</li><li>地址译码器进行译码选中相应单元，同时 CPU 将读写信号通过控制线送到主存的读写控制电路</li><li>如果是写操作：CPU 同时将要写的信息送到 MDR 中，在读写控制电路的控制下，经数据线将信号写入选中的单元</li><li>如果是读操作，那么主存读出选中单元的内容送到数据线，然后送到 MDR 中</li></ol><p><strong>数据线的宽度与 MDR 的宽度相同</strong>，<strong>地址线的宽度与 MAR 的宽度相同</strong>，数据线数和地址线数<strong>共同反映存储体容量的大小</strong></p>',25),q=s("p",null,[a("如上图，64 位数据线，每次可取 8 个单元的内容，36 位地址寻址范围 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"0"),s("mo",null,"∼"),s("msup",null,[s("mn",null,"2"),s("mn",null,"36")]),s("mo",null,"−"),s("mn",null,"1")]),s("annotation",{encoding:"application/x-tex"},"0\\sim2^{36}-1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"0"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"∼"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"36")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"1")])])]),a("，按字编址芯片容量 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mn",null,"36")]),s("mo",null,"×"),s("mn",null,"64")]),s("annotation",{encoding:"application/x-tex"},"2^{36}\\times 64")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"36")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"64")])])]),a(" 位")],-1),J=t('<h2 id="主存储器与-cpu-的连接" tabindex="-1"><a class="header-anchor" href="#主存储器与-cpu-的连接" aria-hidden="true">#</a> 主存储器与 CPU 的连接</h2><h3 id="连接原理" tabindex="-1"><a class="header-anchor" href="#连接原理" aria-hidden="true">#</a> 连接原理</h3><ol><li>主存储器通过<strong>数据总线、地址总线、控制总线</strong>与 CPU 连接</li><li>数据总线的位数与工作频率的乘积正比于数据传输率</li><li>地址总线的<strong>位数</strong>决定了<strong>可寻址的最大内存空间</strong></li><li>控制总线（<strong>读/写</strong>）指出总线周期的类型和本次输入/输出操作完成的时刻</li></ol><h3 id="主存容量的扩展" tabindex="-1"><a class="header-anchor" href="#主存容量的扩展" aria-hidden="true">#</a> 主存容量的扩展</h3><p>单个存储芯片的容量是有限的，在字数或字长方面与实际要求都有差距，因此要扩展以满足要求</p><h4 id="位扩展法" tabindex="-1"><a class="header-anchor" href="#位扩展法" aria-hidden="true">#</a> 位扩展法</h4><p>在 CPU 的<strong>数据线数与存储芯片的数据位数不相等</strong>时，<strong>必须对存储芯片扩位</strong>，使其数据位数<strong>与 CPU 的数据线数相等</strong></p><p>位扩展的连接方式是<strong>将多个存储芯片</strong>的地址端、<strong>片选</strong>端和读写控制端<strong>相应并联</strong>，<strong>数据端分别引出</strong></p><img src="'+u+'" alt="image-20211013161147965" style="zoom:150%;">',9),Z=s("p",null,[a("注意：连接地址线的方式相同，连接数据线的方式不同；会选中所有的芯片，片选信号 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline {CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 要连接到所有芯片")],-1),$=s("h4",{id:"字扩展法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字扩展法","aria-hidden":"true"},"#"),a(" 字扩展法")],-1),ss=s("p",null,[a("字扩展（增加存储器中"),s("strong",null,"字的数量"),a("）将芯片的地址线、"),s("strong",null,"数据线"),a("、读写控制线"),s("strong",null,"相应并联"),a("，由"),s("strong",null,"片选信号来区分各芯片的地址范围")],-1),as=s("img",{src:y,alt:"image-20211013161957442",style:{zoom:"150%"}},null,-1),ts=s("p",null,[a("使用地址高 2 位选择使用的芯片，低 14 位选择芯片的地址，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"W"),s("mi",null,"E")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{WE}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 选择读写操作，都使用同一条数据线")],-1),ls=s("p",null,[a("注意：仅采用字扩展时，各芯片连接地址线、连接数据线的方式也相同，但要通过 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 选择芯片")],-1),ns=s("h4",{id:"字位同时扩展法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#字位同时扩展法","aria-hidden":"true"},"#"),a(" 字位同时扩展法")],-1),es=s("img",{src:x,alt:"image-20211013170422782",style:{zoom:"150%"}},null,-1),is=s("p",null,[a("就是"),s("strong",null,"字面意思"),a("，使用两个芯片位扩展到 8 位一组，然后增加 3 组扩展到 "),s("code",null,"64K"),a(" 字")],-1),rs=s("p",null,"扩展位就使用位扩展的连接，扩展字就使用字扩展的连接",-1),ms=s("p",null,[a("注意：采用字位同时扩展时，各芯片连接地址线的方式相同，但连接数据线的方式不同，片选信号 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 也不同")],-1),ps=s("h3",{id:"存储芯片的地址分配和片选",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#存储芯片的地址分配和片选","aria-hidden":"true"},"#"),a(" 存储芯片的地址分配和片选")],-1),os=s("p",null,"CPU 要实现对存储单元的访问，首先进行片选；然后进行字选，片内的字选通常是由 CPU 送出的 N 条低位地址线完成的",-1),cs=s("h4",{id:"线选法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#线选法","aria-hidden":"true"},"#"),a(" 线选法")],-1),hs=s("p",null,[a("选择芯片时，使用"),s("strong",null,"一个地址针脚直接连接一个芯片"),a("的 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a("，地址低位用于片内寻址")],-1),gs=s("p",null,[a("优点："),s("strong",null,"不需要地址译码器"),a("，线路简单；缺点：地址空间不连续，选片的地址线必须分时为低电平（否则不能工作），不能充分利用系统的存储器空间，"),s("strong",null,"造成地址资源的浪费")],-1),ds=s("h4",{id:"译码片选法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#译码片选法","aria-hidden":"true"},"#"),a(" 译码片选法")],-1),us=s("p",null,[a("译码器可以"),s("strong",null,[a("让 n 根地址针脚选择从 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"2^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),a(" 个芯片中选择一个")]),a("，如 000 选第 1 个芯片；010 选第 2 个芯片")],-1),ys=s("p",null,[a("8 个芯片如果采用线性法需要 8 位地址，而使用译码片选法仅需要 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mrow",null,[s("mi",null,"log"),s("mo",null,"⁡")]),s("mn",null,"2")]),s("mn",null,"8"),s("mo",null,"="),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"\\log_28=3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9386em","vertical-align":"-0.2441em"}}),s("span",{class:"mop"},[s("span",{class:"mop"},[a("lo"),s("span",{style:{"margin-right":"0.01389em"}},"g")]),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.207em"}},[s("span",{style:{top:"-2.4559em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2441em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),a(" 位地址")],-1),xs=t('<h3 id="存储器与-cpu-的连接" tabindex="-1"><a class="header-anchor" href="#存储器与-cpu-的连接" aria-hidden="true">#</a> 存储器与 CPU 的连接</h3><h4 id="合理选择存储芯片" tabindex="-1"><a class="header-anchor" href="#合理选择存储芯片" aria-hidden="true">#</a> 合理选择存储芯片</h4><p>要组成一个主存系统，主要指存储芯片的类型（RAM 或 ROM）和数量的选择，考虑芯片数量时，要尽量使连线简单、方便</p><p>通常选用 <strong>ROM 存放系统程序、标准子程序和各类常数</strong>，RAM 则是为<strong>用户编程</strong>而设置的</p><h4 id="地址线的连接" tabindex="-1"><a class="header-anchor" href="#地址线的连接" aria-hidden="true">#</a> 地址线的连接</h4><p>存储芯片的容量不同，其地址线数也不同，而 <strong>CPU 的地址线数往往比存储芯片的地址线数要多</strong></p><p>通常将 <strong>CPU 地址线的低位</strong>与存储芯片的地址线相连，以<strong>选择芯片中的某一单元</strong>，译码由芯片的片内逻辑完成的</p><p>而 <strong>CPU 地址线的高位</strong>则在扩充存储芯片时使用，用来<strong>选择存储芯片</strong>，译码由<strong>外接译码器</strong>逻辑完成</p><p>选择题：实际的主存容量不能代表 MAR 的位数，因为有扩展的需求，<strong>MAR 的位数和主存地址空间大小有关</strong></p><h4 id="数据线的连接" tabindex="-1"><a class="header-anchor" href="#数据线的连接" aria-hidden="true">#</a> 数据线的连接</h4><p>CPU 的数据线数与存储芯片的数据线数<strong>不一定相等</strong>，在相等时可直接相连</p><p>在不等时<strong>必须对存储芯片扩位</strong>，使其数据位数<strong>与 CPU 的数据线数相等</strong></p><h4 id="读-写命令线的连接" tabindex="-1"><a class="header-anchor" href="#读-写命令线的连接" aria-hidden="true">#</a> 读/写命令线的连接</h4><p>CPU 读/写命令线一般可直接与存储芯片的读/写控制端相连，<strong>通常高电平为读，低电平为写</strong></p>',14),vs=s("p",null,[a("有些 CPU 的"),s("strong",null,"读/写命令线是分开的"),a("（读为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"R"),s("mi",null,"D")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{RD}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a("，写为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"W"),s("mi",null,"E")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{WE}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"E")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a("，均为低电平有效），此时 CPU 的"),s("strong",null,"读命令线"),a("应"),s("strong",null,"与存储芯片的允许读控制端相连"),a("，而 CPU 的"),s("strong",null,"写命令线"),a("则应"),s("strong",null,"与存储芯片的允许写控制端相连")],-1),bs=s("h4",{id:"片选线的连接",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#片选线的连接","aria-hidden":"true"},"#"),a(" 片选线的连接")],-1),ws=s("p",null,[a("片选线的连接是 CPU 与存储芯片连接的关键，存储器由许多存储芯片叠加而成，"),s("strong",null,[a("CPU 会给选择的芯片发 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"C"),s("mi",null,"S")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{CS}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.05764em"}},"CS")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 信号")])],-1),Ms=s("p",null,[a("片选有效信号与 CPU 的访存控制信号 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"M"),s("mi",null,"R"),s("mi",null,"E"),s("mi",null,"O")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{MREO}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"MREO")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 有关，因为"),s("strong",null,"只有当 CPU 要求访存时，才要求选中存储芯片")],-1),Cs=s("p",null,[a("若 CPU 访问 IO，则 "),s("code",null,"MREQ"),a(" 为高（低电平有效的），表示不要求存储器工作")],-1),fs=s("h3",{id:"逻辑图绘制",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#逻辑图绘制","aria-hidden":"true"},"#"),a(" 逻辑图绘制")],-1),_s=s("p",null,[a("题目：设 CPU 有 16 根地址线，8 根数据线，并用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"M"),s("mi",null,"R"),s("mi",null,"E"),s("mi",null,"Q")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{MREQ}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"MREQ")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1944em"}},[s("span")])])])])])])]),a(" 作为访存控制信号（低电平有效），用 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"W"),s("mi",null,"R")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{WR}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8833em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"W"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.00773em"}},"R")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])])])])])])])]),a(" 作为读/写控制信号（高电平为读，低电平为写）。使用 1 片 "),s("code",null,"2K×8"),a(" 位的 ROM 芯片地址 "),s("code",null,"6000H ~67FFH"),a(" 为系统程序区；使用 2 片 "),s("code",null,"1K×4"),a(" 位的 RAM 芯片地址 "),s("code",null,"6800H ~6BFFH"),a(" 为用户程序区，请详细画出存储芯片的片选逻辑图")],-1),ks=s("img",{src:v,alt:"image-20211013202206363",style:{zoom:"150%"}},null,-1),zs=s("p",null,[a("首先把地址转成二进制："),s("code",null,"6000H = 0b0110 0000 0000 0000"),a("，"),s("code",null,"6800H = 0b0110 1000 0000 0000")],-1),Rs=s("p",null,"那么可以注意到只需要在高位 01 100 时选择 ROM，在 01 101 0 时选择 RAM",-1),Ps=s("p",null,[a("两个共同的高位是 5 位，所以译码器是五位，然后 CPU 的 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mover",{accent:"true"},[s("mrow",null,[s("mi",null,"M"),s("mi",null,"R"),s("mi",null,"E"),s("mi",null,"Q")]),s("mo",{stretchy:"true"},"‾")])]),s("annotation",{encoding:"application/x-tex"},"\\overline{MREQ}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.0778em","vertical-align":"-0.1944em"}}),s("span",{class:"mord overline"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8833em"}},[s("span",{style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"MREQ")])]),s("span",{style:{top:"-3.8033em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"overline-line",style:{"border-bottom-width":"0.04em"}})])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1944em"}},[s("span")])])])])])])]),a(" 和最高两位为 01 是输入有效判断；低三位为 100 = 4 时选择 ROM，为 101 = 5 时选择 RAM")],-1),Us=s("p",null,[a("对 RAM 来说高位比译码器多一位，所以除了移码其挑选外还要判断 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"A"),s("mn",null,"10")])]),s("annotation",{encoding:"application/x-tex"},"A_{10}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"A"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"10")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是 0，所以加多了个与非电路")],-1),Ls=t('<h2 id="双端口-ram-和多模块存储器" tabindex="-1"><a class="header-anchor" href="#双端口-ram-和多模块存储器" aria-hidden="true">#</a> 双端口 RAM 和多模块存储器</h2><h3 id="双端口-ram" tabindex="-1"><a class="header-anchor" href="#双端口-ram" aria-hidden="true">#</a> 双端口 RAM</h3><p>双端口 RAM 是指同一个存储器有左、右<strong>两个独立的端口</strong>，分别具有两组相互独立的地址线、数据线和读写控制线</p><figure><img src="'+b+'" alt="image-20211014161711704" tabindex="0" loading="lazy"><figcaption>image-20211014161711704</figcaption></figure><p>允许<strong>两个独立的控制器同时异步地访问存储单元</strong>，当两个端口的<strong>地址不相同</strong>时，<strong>不会发生冲突</strong></p><p>两个端口<strong>同时存取存储器的同一地址单元</strong>时，会因数据冲突造成数据存储或读取错误，有以下 4 种情况：</p><ol><li>两个端口不同时对同一地址单元存取数据</li><li>两个端口同时对同一地址单元读出数据</li><li>两个端口<strong>同时对同一地址单元写入数据</strong>（写错误）</li><li>两个端口<strong>同时对同一地址单元操作</strong>，一个写入数据，另一个读出数据（读错误）</li></ol><p>解决方法：置忙信号 BUSY 为 0，由判断逻辑决定暂时关闭一个端口，未被关闭的端口正常访问，被关闭的端口延长一个很短的时间段后再访问</p><h3 id="多模块存储器" tabindex="-1"><a class="header-anchor" href="#多模块存储器" aria-hidden="true">#</a> 多模块存储器</h3><h4 id="单体多字存储器" tabindex="-1"><a class="header-anchor" href="#单体多字存储器" aria-hidden="true">#</a> 单体多字存储器</h4><p>单体多字系统的特点是存储器中<strong>只有一个存储体</strong>，每个存储单元<strong>存储 m 个字</strong>，总线宽度也为 m个字</p><p>CPU 访问主存储器时，主存储器一次读出 m 个字，并根据地址返回一个给 CPU，下次地址在上次取出的 m 个字里面直接返回，如果不在就重新取一次</p><p>显然，这增大了存储器的带宽，提高了单体存储器的工作速度</p><p>缺点：<strong>指令和数据在主存内必须是连续存放的</strong>，一旦遇到转移指令，或操作数不能连续存放，这种方法的效果就不明显</p><h4 id="多体并行存储器" tabindex="-1"><a class="header-anchor" href="#多体并行存储器" aria-hidden="true">#</a> 多体并行存储器</h4><p>多体并行存储器由多体模块组成，<strong>每个模块都有相同的容量和存取速度</strong>，各模块都有独立的读写控制电路、地址寄存器和数据寄存器，它们<strong>既能并行工作，又能交叉工作</strong></p><h5 id="高位交叉编址" tabindex="-1"><a class="header-anchor" href="#高位交叉编址" aria-hidden="true">#</a> 高位交叉编址</h5><p>高位地址表示体号，低位地址为体内地址</p><img src="'+w+'" alt="image-20211014164922733" style="zoom:150%;"><p>高位交叉编址方式下，总是把低位的体内地址送到由高位体号确定的模块内进行译码</p><p>访问一个<strong>连续主存</strong>块时，总是<strong>访问同一个模块</strong>，存储模块不能被并行访问，因而<strong>不能提高存储器的吞吐率</strong></p><p>注意：模块内的地址是连续的，存取方式仍是串行存取，因此这种存储器仍是<strong>顺序存储器</strong>（顺序方式）</p><p>选择题：虽然连续时像顺序存储，但隔 n 个地址来寻址也是可以让模块并行工作的，但可能性比较小</p><h5 id="低位交叉编址" tabindex="-1"><a class="header-anchor" href="#低位交叉编址" aria-hidden="true">#</a> 低位交叉编址</h5><p>低位地址为体号，高位地址为体内地址</p><figure><img src="'+M+'" alt="image-20211014165910493" tabindex="0" loading="lazy"><figcaption>image-20211014165910493</figcaption></figure><p>低位交叉编址方式下，总是把高位的体内地址送到由低位体号确定的模块内进行译码</p><p><strong>连续地址数据存放在相邻模块中</strong>，因此称采用此编址方式的存储器为<strong>交叉存储器</strong>（交叉方式）</p><p>采用低位交叉编址后，可在不改变每个模块存取周期的前提下，<strong>采用流水线的方式并行存取</strong>，提高存储器的带宽</p><figure><img src="'+C+'" alt="image-20211014182950556" tabindex="0" loading="lazy"><figcaption>image-20211014182950556</figcaption></figure><p>设模块字长等于数据总线宽度，模块存取一个字的<strong>存取周期为 T</strong>，总线<strong>传送周期为 r</strong></p>',31),Ts=s("p",null,[a("为实现流水线方式存取，存储器交叉模块数必须"),s("strong",null,"大于等于"),a(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"m"),s("mo",null,"="),s("mi",null,"T"),s("mi",{mathvariant:"normal"},"/"),s("mi",null,"r")]),s("annotation",{encoding:"application/x-tex"},"m= T/r")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mord"},"/"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])])]),a(" 式中，m 称为交叉存取度")],-1),As=s("p",null,[s("strong",null,"连续存取 m 个字"),a("所需的时间为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mn",null,"1")]),s("mo",null,"="),s("mi",null,"T"),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mi",null,"m"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",null,"r")]),s("annotation",{encoding:"application/x-tex"},"t_1=T+(m-1)r")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r")])])]),a(" 而"),s("strong",null,"顺序方式连续读取 m 个字"),a("所需的时间为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mn",null,"2")]),s("mo",null,"="),s("mi",null,"m"),s("mi",null,"T")]),s("annotation",{encoding:"application/x-tex"},"t_2 = mT")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T")])])])],-1),Bs=s("p",null,"思考：跳转地址后，加载的地址可能依然是流水线的地址，如 4 个模块加载地址为 0123 8567 依然是流水线，因为 8 地址也是在第一模块的，所以这里虽然连续地址没有单体快，但适合于跳转",-1),Ss=s("p",null,"思考：双端口是多核 CPU 使用，而多模块是流水线增加带宽，那么我们的 CPU 是不是两个都使用？",-1),Os=s("p",null,[a("选择题：4 个 8 位存储器采用交叉方式，与 32 位的存储器总线相连，主存每次最多读写 32 位数据，则读 double 型变量需要 3 个存储周期，因为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"+"),s("mo",{stretchy:"false"},"⌈"),s("mo",{stretchy:"false"},"("),s("mn",null,"8"),s("mo",null,"−"),s("mn",null,"1"),s("mo",{stretchy:"false"},")"),s("mi",{mathvariant:"normal"},"/"),s("mn",null,"4"),s("mo",{stretchy:"false"},"⌉"),s("mo",null,"="),s("mn",null,"3")]),s("annotation",{encoding:"application/x-tex"},"1 + \\lceil(8-1) / 4\\rceil=3")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"⌈("),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},"/4"),s("span",{class:"mclose"},"⌉"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"3")])])]),a("，注意 double 要读两次")],-1),Is=t('<h2 id="高速缓冲存储器" tabindex="-1"><a class="header-anchor" href="#高速缓冲存储器" aria-hidden="true">#</a> 高速缓冲存储器</h2><h3 id="程序访问的局部性原理" tabindex="-1"><a class="header-anchor" href="#程序访问的局部性原理" aria-hidden="true">#</a> 程序访问的局部性原理</h3><p>程序访问的局部性原理包括<strong>时间局部性</strong>和<strong>空间局部性</strong></p><ol><li>时间局部性：未来可能会<strong>再次使用现在使用的信息</strong>，因为程序中存在循环</li><li>空间局部性：未来可能会<strong>使用现在信息附近的信息</strong>，因为指令通常是顺序存放执行，数据一般也是群聚地存储</li></ol><p>高速缓冲技术就是利用局部性原理，把<strong>正在使用的部分</strong>存放在快且小的 Cache 中，使 CPU 的访存操作<strong>大多数针对 Cache 进行</strong>，从而大大提高程序的执行速度</p><figure><img src="'+f+'" alt="image-20211015163626715" tabindex="0" loading="lazy"><figcaption>image-20211015163626715</figcaption></figure>',6),Es=s("ul",null,[s("li",null,[a("对于数组 a，程序 A 的访问是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",{separator:"true"},","),s("mi",null,"a"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",null,"⋯")]),s("annotation",{encoding:"application/x-tex"},"a[0][0],a[0][1]\\cdots")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯")])])]),a(" 空间局部性好，而对于程序 B 的访问是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"a"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",{separator:"true"},","),s("mi",null,"a"),s("mo",{stretchy:"false"},"["),s("mn",null,"1"),s("mo",{stretchy:"false"},"]"),s("mo",{stretchy:"false"},"["),s("mn",null,"0"),s("mo",{stretchy:"false"},"]"),s("mo",null,"⋯")]),s("annotation",{encoding:"application/x-tex"},"a[0][0],a[1][0]\\cdots")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mpunct"},","),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord mathnormal"},"a"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"1"),s("span",{class:"mclose"},"]"),s("span",{class:"mopen"},"["),s("span",{class:"mord"},"0"),s("span",{class:"mclose"},"]"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},"⋯")])])]),a(" 空间局部性差")]),s("li",null,"对于数据 a，程序 A 和程序 B 里面数组的每一个元素都只访问一次，时间局部性差"),s("li",null,"对于指令的 for 循环体，本身及周围指令一直被访问，因此时间和空间局部性好")],-1),Ds=t('<p>选择题：程序访问的局部性原理，是指在程序执行过程中，<strong>程序对主存的访问是不均匀的</strong>，有些会访问比较多</p><h3 id="cache-的基本工作原理" tabindex="-1"><a class="header-anchor" href="#cache-的基本工作原理" aria-hidden="true">#</a> Cache 的基本工作原理</h3><p>Cache 位于存储器层次结构的顶层，通常<strong>由 SRAM 构成</strong>，且位于 CPU 内部</p><figure><img src="'+_+'" alt="image-20211015165305573" tabindex="0" loading="lazy"><figcaption>image-20211015165305573</figcaption></figure><p>Cache 的分块：</p><ul><li>Cache 和主存都被划<strong>分为相等的块</strong> Cache 块又称 Cache 行，每块<strong>由若干字节组成</strong>，块的长度称为块长（Cache 行长）</li><li>Cache 中的块数要远少于主存中的块数，它仅<strong>保存主存中最活跃的若干块的副本</strong></li><li>Cache 按照某种策略，预测 CPU 在<strong>未来一段时间内欲访存的数据</strong>，将其装入 Cache</li></ul><p>CPU 的访存过程：</p><ol><li>当 CPU 发出读请求时，若命中 Cache，<strong>只对 Cache 进行读操作</strong>，与主存无关</li><li>若 Cache 不命中，则仍需访问主存，并<strong>把此字所在的块一次性地从主存调入 Cache</strong></li><li>若此时 Cache 已满，则需根据某种替换算法，用这个块<strong>替换 Cache中原来的某块信息</strong></li><li>值得注意的是，CPU 与 Cache 之间的数据交换<strong>以字为单位</strong>，而 Cache 与主存之间的数据交换则<strong>以 Cache 块为单位</strong></li></ol><p>注意：某些计算机中也<strong>采用同时访问 Cache 和主存的方式</strong>，若 Cache 命中，则主存访问终止；否则访问主存并替换 Cache</p>',9),Hs=s("p",null,[a("设一个程序执行期间，Cache 的总命中次数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"N"),s("mi",null,"c")])]),s("annotation",{encoding:"application/x-tex"},"N_c")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("，访问主存的总次数为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"N"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"N_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a("，则"),s("strong",null,"命中率"),a(" H 为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"H"),s("mo",null,"="),s("msub",null,[s("mi",null,"N"),s("mi",null,"c")]),s("mi",{mathvariant:"normal"},"/"),s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"N"),s("mi",null,"c")]),s("mo",null,"+"),s("msub",null,[s("mi",null,"N"),s("mi",null,"m")]),s("mo",{stretchy:"false"},")")]),s("annotation",{encoding:"application/x-tex"},"H = N_c/(N_c+ N_m)")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mord"},"/"),s("span",{class:"mopen"},"("),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.109em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose"},")")])])])],-1),Ns=s("p",null,[a("设 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mi",null,"c")])]),s("annotation",{encoding:"application/x-tex"},"t_c")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 为命中时的 Cache 访问时间，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"t"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"t_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7651em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 为未命中时的访问时间，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"H")]),s("annotation",{encoding:"application/x-tex"},"1-H")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H")])])]),a(" 表示未命中率，则 Cache - 主存系统的"),s("strong",null,"平均访问时间"),a(),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"T"),s("mo",null,"+"),s("mi",null,"a")]),s("annotation",{encoding:"application/x-tex"},"T+a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7667em","vertical-align":"-0.0833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4306em"}}),s("span",{class:"mord mathnormal"},"a")])])]),a(" 为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")]),s("mo",null,"="),s("mi",null,"H"),s("msub",null,[s("mi",null,"t"),s("mi",null,"c")]),s("mo",null,"+"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"−"),s("mi",null,"H"),s("mo",{stretchy:"false"},")"),s("msub",null,[s("mi",null,"t"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_a=Ht_c+(1-H)t_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.08125em"}},"H"),s("span",{class:"mclose"},")"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"t"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])],-1),Fs=t('<h3 id="cache-和主存的映射关系" tabindex="-1"><a class="header-anchor" href="#cache-和主存的映射关系" aria-hidden="true">#</a> Cache 和主存的映射关系</h3><p>Cache 行中的信息是主存中某个块的副本，地址映射是指把存放在主存中的信息按照某种规则装入 Cache</p><p>主存中只有一部分块的信息可放在 Cache 中，因此在 Cache 中要为每块加一个<strong>标记</strong>，指明<strong>它是主存中哪一块的副本</strong></p><p>该标记的内容相当于主存中块的编号，为了说明 Cache 行中的信息是否有效，<strong>每个 Cache 行需要一个有效位</strong></p><h4 id="直接映射" tabindex="-1"><a class="header-anchor" href="#直接映射" aria-hidden="true">#</a> 直接映射</h4><p>主存中的<strong>每一块只能装入 Cache 中的唯一位置</strong>，若这个位置已有内容则产生块冲突，<strong>原来的块将<u>无条件</u>地被替换出去</strong></p><p>直接映射<strong>实现简单</strong>，但 Cache 的其他许多地址空着也不能占用，这使得直接映射的<strong>块冲突概率最高，空间利用率最低</strong></p>',7),Ws=s("p",null,[a("直接映射的关系可定义为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"j"),s("mo",null,"="),s("mi",null,"i"),s("mtext",null,"  "),s("mi",null,"m"),s("mi",null,"o"),s("mi",null,"d"),s("mtext",null,"  "),s("msup",null,[s("mn",null,"2"),s("mi",null,"c")])]),s("annotation",{encoding:"application/x-tex"},"j = i\\ \\ mod\\ \\ 2^c")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.854em","vertical-align":"-0.1944em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.05724em"}},"j"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6944em"}}),s("span",{class:"mord mathnormal"},"i"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord mathnormal"},"m"),s("span",{class:"mord mathnormal"},"o"),s("span",{class:"mord mathnormal"},"d"),s("span",{class:"mspace"}," "),s("span",{class:"mspace"}," "),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])])]),a(" 式中，j 是 Cache 的块号，i 是主存的块号，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"c")])]),s("annotation",{encoding:"application/x-tex"},"2^c")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"c")])])])])])])])])])]),a(" 是 Cache 中的总块数")],-1),Qs=t('<figure><img src="'+k+'" alt="image-20211015190532819" tabindex="0" loading="lazy"><figcaption>image-20211015190532819</figcaption></figure><p>主存地址分成：<strong>标记 tag、Cache 行号、块内地址</strong>，其中标记需要 Cache 额外使用空间来存储</p><p>CPU 访存过程：</p><ol><li>首先根据访存地址中间的 c 位，<strong>找到对应的 Cache 行</strong></li><li>将对应 Cache 行中的标记和主存地址的高 t 位标记进行比较</li><li>若相等且有效位为 1，则访问 Cache 命中，此时<strong>根据</strong>主存地址中<strong>低位的块内地址</strong>，在对应的 Cache 行中<strong>存取信息</strong></li><li>若不相等或有效位为 0，则不命中，CPU 从主存中读出该地址所在的一块信息送到对应的 Cache 行中，将有效位置 1，并<strong>将标记设置为地址中的高 t 位</strong>，<strong>同时</strong>将该地址中的内容送 CPU</li></ol><p>注意：很多时候在 Cache 缺失时是<strong>先把内存加载到 Cache</strong>，然后 CPU <strong>再从 Cache 里面拿数据</strong></p><h4 id="全相联映射" tabindex="-1"><a class="header-anchor" href="#全相联映射" aria-hidden="true">#</a> 全相联映射</h4><p>主存中的每一块可以装入 Cache 中的<strong>任何位置</strong>，每行的标记用于指出该行取自主存的哪一块，所以 CPU <strong>访存时需要与所有Cache 行的标记进行比较</strong></p><p>优点：比较灵活，Cache 块的冲突概率低，<strong>空间利用率高，命中率也高</strong></p><p>缺点：<strong>标记的比较速度较慢</strong>，实现成本较高，通常需采用昂贵的按内容寻址的相联存储器进行地址映射</p><figure><img src="'+z+'" alt="image-20211015192026769" tabindex="0" loading="lazy"><figcaption>image-20211015192026769</figcaption></figure><p>主存地址分成：<strong>标记 tag、块内地址</strong>，由于少了行号，需要更多的空间来存放标记</p><h4 id="组相联映射" tabindex="-1"><a class="header-anchor" href="#组相联映射" aria-hidden="true">#</a> 组相联映射</h4><p>将 Cache 空间分成大小相同的组，主存的数据块可以装入组内的任何位置，即<strong>组间采取直接映射，组内采取全相联映射</strong></p><p>它是对<strong>直接映射和全相联映射的一种折中</strong>，假设每组有 r 个 Cache 行，则称之为 <strong>r 路组相联</strong></p><p>组相联映射的关系可以定义为 <strong><code>j = i mod Q</code></strong> 式中，j 是 Cache 行的组号，i 是主存的块号，Q 是 Cache 的组数</p><p><strong>路数越大</strong>，即每组 Cache 行的数量越大，<strong>发生块冲突的概率越低</strong>，但相联<strong>比较电路也越复杂</strong></p><p>选定适当的数量，可使组相联映射的成本接近直接映射，而性能上仍接近全相联映射</p><figure><img src="'+R+'" alt="image-20211015193552644" tabindex="0" loading="lazy"><figcaption>image-20211015193552644</figcaption></figure><p>主存地址分成：<strong>标记 tag、组号、块内地址</strong>，这里的标记占用空间比直接映射多，但比全相联映射少</p><p>CPU 访存过程如下：</p><ol><li>先根据访存地址中间的组号<strong>找到对应的 Cache 组</strong></li><li>将对应 Cache 组中每个行的标记<strong>与主存地址的高位标记进行比较</strong></li><li>若有一个相等且有效位为 1，则访问 Cache 命中，此时根据主存地址中的块内地址，<strong>在对应 Cache 行中存取信息</strong></li><li>若都不相等或虽相等但有效位为 0，则不命中，CPU 从主存中读出该地址所在的一块信息送到对应 Cache 组的任意一个空闲行中，将<strong>有效位置 1</strong>，并<strong>设置标记</strong>，<strong>同时</strong>将该地址中的内容送 CPU</li></ol><p>额外：现在的 Cache 的组不是随便取的，它是和 CPU 的多线路并发查找数量一样，即可以同时检查多少个 Cache 行数</p><p>选择题：还有一种组映射的方式，假设一组 2 行，一共 4 行，那么 0<sub>1、4</sub>5、8~9 映射到第 0 组，2<sub>3，6</sub>7 映射到第 1 组</p><h4 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h4><p>直接映射的只能映射到 Cache 中的<strong>某一固定行</strong>；全相联映射可以映射到<strong>所有 Cache 行</strong>；N 路组相联映射可以映射到 <strong>N 行</strong></p><p>当 Cache 大小、主存块大小一定时：</p><ol><li>直接映射的<strong>命中率最低</strong>，全相联映射的<strong>命中率最高</strong></li><li>直接映射的<strong>判断开销最小</strong>、所需时间最短，全相联映射的<strong>判断开销最大</strong>、所需时间最长</li><li>直接映射标记所占的<strong>额外空间开销最少</strong>，全相联映射标记所占的<strong>额外空间开销最大</strong></li></ol><h4 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h4><p>假设某个计算机的主存地址空间大小为 <code>256MB</code>，按字节编址，其数据 Cache 有 8 个 Cache 行，行长为 <code>64B</code></p><ol><li>若<strong>不考虑</strong>用于 Cache 的<strong>一致维护性和替换算法控制位</strong>，并且采用直接映射方式，则该数据 Cache 的总容量为多少？</li><li>若该 Cache 采用直接映射方式，则主存地址为 3200（十进制）的主存块对应的 Cache 行号是多少？采用二路组相联映射时又是多少？</li></ol><p>解答：</p>',31),js=s("ol",null,[s("li",null,[s("p",null,[a("Cache 的总容量是"),s("strong",null,"存储容量 + 标记矩阵容量"),a("，其中**标记矩阵（地址映射表）**包含存储器地址进行跟踪的信息")]),s("p",null,[s("code",null,"256MB"),a(" 有 28 位主存地址，"),s("code",null,"64B"),a(" 是 6 位块内地址，8 是 3 位行号，所以标记长度是 28 - 6 - 3 = 19 位")]),s("p",null,[s("strong",null,"有效位为 1 位"),a("，行长 "),s("code",null,"64B"),a(" 是 512 位，则总容量是 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mn",null,"8"),s("mo",null,"×"),s("mo",{stretchy:"false"},"("),s("mn",null,"1"),s("mo",null,"+"),s("mn",null,"19"),s("mo",null,"+"),s("mn",null,"512"),s("mo",{stretchy:"false"},")"),s("mo",null,"="),s("mn",null,"4256")]),s("annotation",{encoding:"application/x-tex"},"8\\times(1+19+512)=4256")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"8"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"×"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mopen"},"("),s("span",{class:"mord"},"1"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},"19"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"+"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),s("span",{class:"mord"},"512"),s("span",{class:"mclose"},")"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"4256")])])]),a(" 位")]),s("p",null,[a("注意：每个 Cache 行对应一个标记项，包含"),s("strong",null,"有效位、标记位、一致性维护位、替换算法控制位")])]),s("li",null,[s("p",null,[a("主存的字块号是 "),s("code",null,"3200B / 64B = 50"),a("，直接映射的行号为 50 mod 8 = 2；二路组相联映射的组号为 "),s("code",null,"50 mod 4 = 2"),a("，行号为 4 或 5")])])],-1),Vs=t('<h3 id="cache-中主存储块的替换算法" tabindex="-1"><a class="header-anchor" href="#cache-中主存储块的替换算法" aria-hidden="true">#</a> Cache 中主存储块的替换算法</h3><p>主存向 Cache 传送一个新块，但没地方放这个新块时：</p><ol><li>全相联映射、组相联映射：<strong>需要使用替换算法置换 Cache 行</strong></li><li>直接映射：只对应一个块位置，莫得选择，直接替换，<strong>不需要替换算法</strong></li></ol><p>常用的替换算法有（近期最少用 LRU 算法最常考）：</p><ol><li><p>随机算法 RANG：<strong>随机地确定替换的 Cache 块</strong>，实现比较简单，但未依据程序访问的局部性原理，可能<strong>命中率较低</strong></p></li><li><p>先进先出算法 FIFO：<strong>选择最早调入的行进行替换</strong>，比较容易实现，但未依据程序访问的局部性原理，可能<strong>命中率较低</strong></p></li><li><p>近期最少使用算法 LRU：依据程序访问的局部性原理，<strong>选择近期内长久未访问过的 Cache 行作为替换的行</strong>，平均命中率要比 FIFO 的高，是堆栈类算法</p><p>计数值的位数与 Cache 组大小有关，2 路时有一位 LRU 位，4 路时有两位 LRU 位（log）</p><p>图中左边阴影的数字是对应 Cache 行的计数值，右边的数字是存放在该行中的主存块号</p><figure><img src="'+P+'" alt="image-20211015205045837" tabindex="0" loading="lazy"><figcaption>image-20211015205045837</figcaption></figure><p>计数器的变化规则：</p><ol><li>命中时，所<strong>命中的行的计数器清零</strong>，比最大值低的计数器加 1，其余不变</li><li>未命中且还有空闲行时，<strong>新装入的行的计数器置 0</strong>，其余全加 1</li><li>未命中且无空闲行时，<strong>计数值为最大值的行的信息块被淘汰</strong>，新装行的块的计数器置 0，其余全加 1</li></ol><p>当<strong>集中访问的存储区超过 Cache 组的大小时，命中率可能变得很低</strong>，如上例的访问序列变为 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, …，而 Cache每组只有 4 行，那么命中率为 0，这种现象称为抖动</p></li><li><p>最不经常使用算法 <code>LFU</code>：将一段时间内被访问次数最少的存储行换出</p><p>每行也设置一个计数器，新行建立后从 0 开始计数，每访问一次，被访问的行计数器加 1，需要<strong>替换时比较各特定行的计数值，将计数值最小的行换出</strong></p></li></ol><p>提示：手算时可以把每个组作为一个队列，优先级高（要换）的元素放在队头，优先级低的在队尾，换块时取出队头元素，把新块按它的优先级插入队列</p><h3 id="cache-写策略" tabindex="-1"><a class="header-anchor" href="#cache-写策略" aria-hidden="true">#</a> Cache 写策略</h3><p>因为 Cache 中的内容是主存块副本，当对 Cache 中的内容进行更新时就需选用写操作策略使 Cache 内容和主存内容保持一致</p><p>现代计算机的 Cache 通常设立多级 Cache（通常为 3 级），假定设 3 级 Cache</p><p>按离 CPU 的远近可各自命名为 L1 Cache、L2 Cache、L3 Cache，<strong>离 CPU 越远，访问速度越慢，容量越大</strong></p><p>指令 Cache 与数据 Cache 分离一般在 L1 级，此时通常为写分配法与写回法合用</p><p>选择题：采用指令 Cache 与数据 Cache 分离的主要目的是减少指令流水线资源冲突，取指和取数在不同 Cache 中寻找，不会发生冲突</p><h4 id="写命中时" tabindex="-1"><a class="header-anchor" href="#写命中时" aria-hidden="true">#</a> 写命中时</h4><ol><li><p>全写法（写直通法、write-through）：</p><p>当 CPU 对 Cache 写命中时，必须<strong>把数据同时写入 Cache 和主存</strong>，<strong>替换时不需要写回内存</strong></p><p>优点：这种方法实现简单，能随时保持主存数据的正确性；缺点：是增加了访存次数，降低了Cache 的效率</p><p>写缓冲：为减少全写法直接写入主存的时间损耗，在 Cache 和主存之间加一个写缓冲（Write Buffer）</p><figure><img src="'+U+'" alt="image-20211015212043863" tabindex="0" loading="lazy"><figcaption>image-20211015212043863</figcaption></figure><p>CPU <strong>同时写数据到 Cache 和写缓冲中</strong>，写缓冲再控制将内容写入主存</p><p>写缓冲是一个 FIFO 队列，写缓冲可以解决速度不匹配的问题；但若出现<strong>频繁写时，会使写缓冲饱和溢出</strong></p><p>为了防止写缓存溢出，还可以在 Cache 和 DRAM 中再加一个更大的 L2 Cache，L2 与内存使用写回法</p></li><li><p>写回法 write-back：</p><p>当 CPU 对 Cache 写命中时，只修改 Cache 的内容，而<strong>不立即写入主存</strong>，只有<strong>当此块被换出时才写回主存</strong></p><p>这种方法减少了访存次数，但存在不一致的隐患，采用这种策略时，每个 Cache 行<strong>必须设置一个标志位（脏位）</strong>，以反映此块<strong>是否被 CPU 修改过</strong></p></li></ol><h4 id="写不命中" tabindex="-1"><a class="header-anchor" href="#写不命中" aria-hidden="true">#</a> 写不命中</h4><ol><li><p>写分配法 write-allocate：</p><p>先<strong>加载主存中的块到 Cache 中</strong>，然后更新这个 Cache 块</p><p>它试图<strong>利用程序的空间局部性</strong>，但缺点是每次不命中都需要从主存中读取一块</p></li><li><p>非写分配法 not-write-allocate：<strong>只写入主存，不进行调块</strong></p></li></ol><p><strong>非写分配法通常与全写法</strong>合用，<strong>写分配法通常和写回法</strong>合用</p><h3 id="综合应用题" tabindex="-1"><a class="header-anchor" href="#综合应用题" aria-hidden="true">#</a> 综合应用题</h3><p>某32位计算机，CPU主频为 <code>800MHz</code>，Cache 命中时的 CPI 为 4，Cache 块大小为 <code>32B</code>；主存采用 <strong>8 体交叉存储</strong>方式，每个体的存储字长为 32 位、存储周期为 <code>40ns</code>；存储器总线宽度为 32 位，总线时钟频率为 <code>200MHz</code>，支持突发传送总线事务。<strong>每次读突发传送总线事务的过程包括：送首地址和命令、存储器准备数据、传送数据</strong>。每次突发传送 <code>32B</code>，传送地址或 32 位数据均需要一个总线时钟周期。请回答下列问题，要求给出理由或计算过程。</p><ol><li>CPU 和总线的时钟周期各为多少？总线的带宽（即最大数据传输率）为多少？</li><li>Cache 缺失时，需要用几个读突发传送总线事务来完成一个主存块的读取？</li><li>存储器总线完成一次读突发传送总线事务所需的时间是多少？</li><li>若程序 <code>BP</code> 执行过程中共执行了 100 条指令，平均每条指令需进行 1.2 次访存，Cache 缺失率为 5%，不考虑替换等开销，则 <code>BP</code> 的 CPU 执行时间是多少？</li></ol><p>解答：</p><ol><li><p>CPU 的时间周期是 <code>1s / 800MHz = 1.25ns</code>，总线的时间周期是 <code>1s / 200MHz = 5ns</code>；总线带宽为 <code>4B × 1s / 0.5ns = 800MB/s</code></p></li><li><p>Cache 一块是 <code>32B</code> 而一次读突发传送总线事务也是 <code>32B</code>，所以仅需要一次</p></li><li><p>题目仅给出存储周期，没有给存储时间，所以存储器<strong>经过存储时间后才把数据发给总线</strong></p><p>题目给的过程：送首地址和命令 <code>5ns</code> + 存储器准备数据 <code>40ns + (8 - 1)5ns</code> + 传送数据（最后一次非重叠 <code>5ns</code>）= <code>85ns</code></p><p>注意：要看题目给的信息，存储周期分为存储时间和恢复时间，其实在存储时间就可以拿到数据</p></li><li><p>因为题目没有给出详细的执行时间信息，所以 Cache 不命中时是<strong>先从内存放入 Cache 再访问 Cache 的模式</strong></p><p>时间是：基本执行时间（<code>4 × 1.25ns × 100 = 500ns</code>）+ 内存入 Cache 时间（<code>100 × 120% × 5% × 85ns = 505ns</code>）= <code>1010ns</code></p></li></ol><h2 id="虚拟存储器" tabindex="-1"><a class="header-anchor" href="#虚拟存储器" aria-hidden="true">#</a> 虚拟存储器</h2><p><strong>主存</strong>和联机工作的<strong>辅存</strong>共同<strong>构成了虚拟存储器</strong>，二者在<strong>硬件和系统软件</strong>的共同管理下工作</p><p>对于<strong>应用程序员</strong>而言，虚拟存储器是透明的，虚拟存储器具有主存的速度和辅存的容量，提高了存储系统的性价比</p><h3 id="虚拟存储器的基本概念" tabindex="-1"><a class="header-anchor" href="#虚拟存储器的基本概念" aria-hidden="true">#</a> 虚拟存储器的基本概念</h3><p>虚拟存储器将<strong>主存和辅存的地址空间统一编址</strong>，构造出庞大的地址空间，用户可以自由编程，不必关心实际容量和位置</p><p>用户编程允许涉及的地址称为<strong>虚地址或逻辑地址</strong>，虚地址对应的存储空间称为虚拟空间或程序空间</p><p>实际的主存单元地址称为<strong>实地址或物理地址</strong>，实地址对应的是主存地址空间，也称实地址空间，<strong>虚地址比实地址要大很多</strong></p><figure><img src="'+L+'" alt="image-20211016191644899" tabindex="0" loading="lazy"><figcaption>image-20211016191644899</figcaption></figure><p>CPU 使用虚地址：</p><ol><li>由辅助硬件找出虚地址和实地址之间的对应关系，并判断这个虚地址对应的存储单元内容是否已装入主存</li><li>若已在主存中，则通过地址变换，CPU 可直接访问主存指示的实际单元</li><li>若不在主存中，则把包含这个字的一页或一段调入主存后再由 CPU 访问</li><li>若主存已满，则采用替换算法置换主存中的一页或一段</li></ol><p>思考：当运行一个很大的程序时，加载需要的部分，其他部分等使用时再加载进内存</p><h3 id="页式虚拟存储器" tabindex="-1"><a class="header-anchor" href="#页式虚拟存储器" aria-hidden="true">#</a> 页式虚拟存储器</h3><h4 id="页表" tabindex="-1"><a class="header-anchor" href="#页表" aria-hidden="true">#</a> 页表</h4><p><strong>以页为基本单位</strong>的虚拟存储器称为<strong>页式虚拟存储器</strong>，虚拟空间与主存空间都被划分成同样大小的页，主存的页称为实页，虚存的页称为虚页</p><p>虚拟地址分为两个字段：<strong>虚页号和页内地址</strong>，虚拟地址到物理地址的转换是由页表实现的</p><p>页表是<strong>虚页号和实页号的对照表</strong>，它长久地存放在主存中，记录程序的<strong>虚页调入主存时被安排在主存中的位置</strong></p><figure><img src="'+T+'" alt="image-20211016200155455" tabindex="0" loading="lazy"><figcaption>image-20211016200155455</figcaption></figure><ul><li><p><strong>有效位</strong>也称装入位，用来表示<strong>对应页面是否在主存</strong></p><p>若为 1，表示该虚拟页已调入主存，<strong>存放该页的物理页号（页框号）</strong></p><p>若为 0，表示没有调入主存，可能<strong>存放该页的磁盘地址</strong></p></li><li><p><strong>脏位</strong>也称修改位，用来表示<strong>页面是否被修改</strong>过，虚存机制中采用回写策略</p></li><li><p><strong>引用位</strong>也称使用位，用来<strong>配合替换策略进行设置</strong></p></li></ul><figure><img src="'+A+'" alt="image-20211016201215954" tabindex="0" loading="lazy"><figcaption>image-20211016201215954</figcaption></figure><p>CPU 执行指令时，需要先<strong>将虚拟地址转换为主存物理地址</strong>：</p><ul><li>每个进程都有一个<strong>页表基址寄存器</strong>，存放该进程的<strong>页表首地址</strong></li><li>根据虚拟地址高位部分（虚拟页号）找到对应的页表项</li><li>若装入位为 1，则取出物理页号，和虚拟地址低位部分的页内地址拼接，形成实际物理地址</li><li>若装入位为 0，则说明缺页，需要操作系统进行缺页处理</li></ul><p>优点：页面的长度固定，页表简单，调入方便；缺点：由于程序不可能正好是页面的整数倍，<strong>最后一页的零头将无法利用而造成浪费</strong>，并且页不是逻辑上独立的实体，所以处理、保护和共享都不及段式虚拟存储器方便</p><p>选择题：把虚拟地址转换为物理地址给 CPU 寻址，找不到对应的内存会发出错误，就知道是缺页了</p><h4 id="快表-tlb" tabindex="-1"><a class="header-anchor" href="#快表-tlb" aria-hidden="true">#</a> 快表（TLB）</h4><p>依据程序执行的局部性原理，把常用页对应的<strong>页表项</strong>存放在<strong>高速缓冲器</strong>组成的<strong>快表</strong>（TLB）中，则可以<strong>明显提高效率</strong>；相应地把放在<strong>主存中的页表称为慢表</strong>（Page）</p><p>在地址转换时，首先查找快表，若命中，则无须访问主存中的页表，快表通常采用<strong>全相联或组相联方式</strong></p><p>每个 TLB 项由<strong>页表表项内容</strong>加上一个 <strong>TLB 标记字段</strong>组成，TLB 标记用来表示<strong>该表项取自页表中哪个虚页号对应的页表项</strong></p><p>TLB 标记的内容：</p><ul><li>在全相联方式下就是该<strong>页表项对应的虚页号</strong></li><li>组相联方式下则是<strong>对应虚页号的高位部分</strong>，而虚页号的低位部分用于选择 TLB 组的组索引</li></ul><h4 id="tlb-cache-的多级存储系统" tabindex="-1"><a class="header-anchor" href="#tlb-cache-的多级存储系统" aria-hidden="true">#</a> TLB + Cache 的多级存储系统</h4><figure><img src="'+B+'" alt="image-20211016203535295" tabindex="0" loading="lazy"><figcaption>image-20211016203535295</figcaption></figure><p>这是两级页表方式，虚页号被分成页目录索引和页表索引两部分，由这两部分得到对应的页表项</p><p>Cache 采用二路组相联方式，TLB 采用全相联方式，每一项都有一个比较器，下面是地址转换过程：</p><ol><li>首先根据虚页号<strong>与每个 TLB 标记字段比较</strong>，若某项相等且有效位为 1，则直接转换成物理地址</li><li>若未命中，首先根据高 10 位在页目录<strong>找到页表的地址</strong>，然后根据中 10 位在页表<strong>拿到对应的物理地址</strong></li><li>把虚拟号和物理地址<strong>加入 TLB 表</strong>，如果表满就使用某个替换算法进行替换</li><li>拿到物理地址后，要使用之前的 Cache 映射的方法进行获取数据</li></ol><figure><img src="'+S+'" alt="image-20211016204929942" tabindex="0" loading="lazy"><figcaption>image-20211016204929942</figcaption></figure><p><strong>快表和慢表也可以同步进行</strong>，若快表中有此虚页号，使慢表的查找作废；可以做到<strong>访问主存速度几乎没有下降</strong></p><p>在一个具有 Cache 和 TLB 的虚拟存储系统中，CPU 一次访存操作可能涉及 TLB、页表、Cache、主存和磁盘的访问</p><p>CPU 访存过程中存在三种缺失情况：</p><ol><li>TLB 缺失：要访问的页面对应的<strong>页表项不在 TLB 中</strong></li><li>Cache 缺失：要访问的<strong>主存块不在 Cache 中</strong></li><li>缺页 Page：要访问的<strong>页面不在主存中</strong></li></ol><figure><img src="'+O+'" alt="image-20211016210034587" tabindex="0" loading="lazy"><figcaption>image-20211016210034587</figcaption></figure><ul><li>最好的情况是第 1 种组合，此时无须访问主存</li><li>第 2 种和第 3 种组合都需要访问一次主存</li><li>第 4 种组合需要访问两次主存</li><li>第 5 种组合发生缺页异常，需要访问磁盘，并且至少访问两次主存</li></ul><p><strong>Cache 缺失处理由硬件完成</strong>；<strong>缺页处理由软件完成</strong>，操作系统通过<strong>缺页异常处理程序</strong>来实现；而 <strong>TLB 缺失可用硬件或软件处理</strong>，比如操作系统有 TLB 缺失异常处理程序</p><h3 id="段式虚拟存储器" tabindex="-1"><a class="header-anchor" href="#段式虚拟存储器" aria-hidden="true">#</a> 段式虚拟存储器</h3><p>段式虚拟存储器中的段是<strong>按程序的逻辑结构划分</strong>的，各个段的长度因程序而异；<strong>把虚拟地址分为段号和段内地址</strong></p><p>虚拟地址到实地址之间的变换是由段表来实现的，段表是程序的逻辑段和在主存中存放位置的对照表</p><figure><img src="'+I+'" alt="image-20211016211845324" tabindex="0" loading="lazy"><figcaption>image-20211016211845324</figcaption></figure><p>段表的每行记录包含<strong>段号、装入位、段起点、段长</strong>等信息；<strong>段的长度可变</strong>，要给出各段的起始地址与段的长度</p><p>CPU 根据虚拟地址访存：</p><ol><li>首先根据段号与段表基地址拼接成对应的段表行</li><li>根据该段表行的装入位判断该段是否已调入主存（1 在，0 不在）</li><li>已调入主存时，从段表读出该段在主存中的起始地址，与段内地址（偏移量）相加，得到对应的主存实地址</li></ol><p>优点：段的分界与程序的自然分界相对应，<strong>具有逻辑独立性，易于编译、管理、修改和保护，也便于多道程序的共享</strong></p><p>缺点：因为段长度可变，分配空间不便，<strong>容易在段间留下碎片</strong>，不好利用，造成浪费</p><h3 id="段页式虚拟存储器" tabindex="-1"><a class="header-anchor" href="#段页式虚拟存储器" aria-hidden="true">#</a> 段页式虚拟存储器</h3><p>段页式虚拟存储器：把程序按逻辑结构分段，每段再划分为固定大小的页，对主存的调入、调出<strong>仍以页为基本传送单位</strong></p><p>每个程序对应一个段表，每段对应一个页表，<strong>段的长度必须是页长的整数倍</strong>，段的<strong>起点必须是某一页的起点</strong></p><p><strong>虚地址分为段号、段内页号、页内地址三部分</strong></p><p>CPU 根据虚地址访存：</p><ol><li>首先根据段号得到段表地址</li><li>从段表中取出该段的页表起始地址，与虚地址段内页号合成，得到页表地址</li><li>从页表中取出实页号，与页内地址拼接形成主存实地址</li></ol><p>优点：<strong>兼具页式和段式虚拟存储器的优点</strong>，可以按段实现共享和保护</p><p>缺点：在地址变换过程中需要两次查表，<strong>系统开销较大</strong></p><h3 id="虚拟存储器与-cache-的比较" tabindex="-1"><a class="header-anchor" href="#虚拟存储器与-cache-的比较" aria-hidden="true">#</a> 虚拟存储器与 Cache 的比较</h3><h4 id="相同之处" tabindex="-1"><a class="header-anchor" href="#相同之处" aria-hidden="true">#</a> 相同之处</h4><ol><li>最终目标<strong>都是为了提高系统性能</strong>，两者都有容量、速度、价格的梯度</li><li><strong>都把数据划分为小信息块</strong>，并作为基本的传递单位，虚存系统的信息块更大</li><li><u>都有地址的映射、替换算法、更新策略等问题</u></li><li>依据程序的局部性原理应用<strong>快速缓存的思想</strong>，将活跃的数据放在相对高速的部件中</li></ol><h4 id="不同之处" tabindex="-1"><a class="header-anchor" href="#不同之处" aria-hidden="true">#</a> 不同之处</h4><ol><li>Cache 主要解决<strong>系统速度</strong>，而虚拟存储器却是为了解决<strong>主存容量</strong></li><li>Cache 全由硬件实现，是<strong>硬件存储器</strong>；而虚拟存储器由 OS 和硬件共同实现，是<strong>逻辑上的存储器</strong>（OS 程序员可见）</li><li>对于不命中性能影响，<strong>虚拟存储器系统不命中时对系统性能影响更大</strong>（Cache/主存 &lt; 主存/硬盘）</li><li>CPU 与 Cache 和主存都建立了直接访问的通路，而<strong>辅存与 CPU 没有直接通路</strong>（必须先装入主存）</li></ol><h2 id="易混知识点" tabindex="-1"><a class="header-anchor" href="#易混知识点" aria-hidden="true">#</a> 易混知识点</h2>',87),Ks=s("ol",null,[s("li",null,[s("p",null,"在虚拟存储器中，页面是设置得大一些好还是设置得小一些好？"),s("p",null,[a("页面"),s("strong",null,"不能设置得过大，也不能设置得过小")]),s("p",null,[a("页面太小时，平均页内剩余空间较少，但"),s("strong",null,"页表会增大"),a("，且不能"),s("strong",null,"充分利用访存的空间局部性"),a("来提高命中率")]),s("p",null,[a("页面太大时，可减少页表空间，但平均"),s("strong",null,"页内剩余空间较大"),a("，页面太大还会使"),s("strong",null,"页面调入/调出的时间较长")])]),s("li",null,[s("p",null,[a("存取时间 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 就是存储周期 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 吗？")]),s("p",null,[a("存取时间 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是执行一次读操作或写操作的时间，分为读出时间和写入时间")]),s("ol",null,[s("li",null,"读出时间是从主存接收到有效地址开始到数据稳定为止的时间"),s("li",null,"写入时间是从主存接收到有效地址开始到数据写入被写单元为止的时间")]),s("p",null,[a("存储周期 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 是指存储器进行连续两次独立地读或写操作所需的最小时间间隔")]),s("p",null,[a("所以"),s("strong",null,[a("存取时间 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 不等于存储周期 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])]),a("，通常"),s("strong",null,[a("存储周期 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"T_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),a(" 大于存取时间 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"T"),s("mi",null,"a")])]),s("annotation",{encoding:"application/x-tex"},"T_a")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"T"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.1389em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"a")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])])])])]),s("li",null,[s("p",null,"发生取指令 Cache 缺失的处理过程是什么？"),s("ol",null,[s("li",null,"程序计数器恢复当前指令的值"),s("li",null,"对主存进行读的操作"),s("li",null,"将读入的指令写入 Cache 中，更改有效位和标记位"),s("li",null,"重新执行当前指令")])])],-1),Ys=[D,H,N,F,W,Q,j,V,K,Y,X,G,q,J,Z,$,ss,as,ts,ls,ns,es,is,rs,ms,ps,os,cs,hs,gs,ds,us,ys,xs,vs,bs,ws,Ms,Cs,fs,_s,ks,zs,Rs,Ps,Us,Ls,Ts,As,Bs,Ss,Os,Is,Es,Ds,Hs,Ns,Fs,Ws,Qs,js,Vs,Ks];function Xs(Gs,qs){return n(),e("div",null,Ys)}const Zs=l(E,[["render",Xs],["__file","第三章 存储系统.html.vue"]]);export{Zs as default};
