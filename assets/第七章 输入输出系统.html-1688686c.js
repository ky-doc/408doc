import{_ as a,X as r,Y as l,a3 as t,a0 as s,a2 as n}from"./framework-cd5fce69.js";const i="/408doc/408noteImg/images/2843224-46fb935cd31addbd.png",o="/408doc/408noteImg/images/image-20211028155328795.png",e="/408doc/408noteImg/images/image-20211028190040751.png",g="/408doc/408noteImg/images/image-20211029145846405.png",p="/408doc/408noteImg/images/image-20211029165250647.png",h="/408doc/408noteImg/images/image-20211029201233691.png",d="/408doc/408noteImg/images/image-20211029201911505.png",c="/408doc/408noteImg/images/image-20211029202453160.png",m="/408doc/408noteImg/images/image-20211029202647551.png",u="/408doc/408noteImg/images/image-20211029205148881.png",C="/408doc/408noteImg/images/image-20211029212623495.png",I={},P=t('<h2 id="i-o-系统基本概念" tabindex="-1"><a class="header-anchor" href="#i-o-系统基本概念" aria-hidden="true">#</a> I/O 系统基本概念</h2><h3 id="输入-输出系统" tabindex="-1"><a class="header-anchor" href="#输入-输出系统" aria-hidden="true">#</a> 输入/输出系统</h3><p>输入/输出是以主机为中心而言的，将信息从外部设备传送到主机称为输入，反之称为输出</p><p>输入/输出系统解决的主要问题是<strong>对各种形式的信息进行输入和输出的控制</strong></p><p>I/O 系统中的几个基本概念如下：</p><ul><li>外部设备：包括<u>输入/输出设备</u>及<u>通过输入/输出接口才能访问的外存储设备</u></li><li>接口：在各个外设与主机之间传输数据时进行各种<u>协调工作的逻辑部件</u>，包括传输过程中速度的匹配、电平和格式转换等</li><li>输入设备：用于向计算机系统输入命令和文本、数据等信息的部件</li><li>输出设备：用于将计算机系统中的信息输出到计算机外部进行显示、交换等的部件</li><li>外存设备：指<u>除计算机内存及 CPU 缓存等外的存储器</u></li></ul><h3 id="i-o-系统的构成" tabindex="-1"><a class="header-anchor" href="#i-o-系统的构成" aria-hidden="true">#</a> I/O 系统的构成</h3><p>一般来说，I/O 系统由 I/O 软件和 I/O 硬件两部分构成：</p><ul><li><p>I/O 软件：包括驱动程序、用户程序、管理程序、升级补丁等</p><p>通常采用 I/O 指令和通道指令实现 CPU 与 I/O 设备的信息交换</p><ul><li><p>I/O 指令：一条指令包括<strong>操作码、命令码、设备码</strong>，是 <strong>CPU 的指令</strong>，但<strong>和通用指令格式不一样</strong></p><p>操作码：说明要进行 I/O 操作；命令码：做什么操作；设备码：对谁操作</p></li><li><p>通道指令：指出数据的首地址、传送字数、操作命令；<strong>通道指令放在内存中</strong>，由通道取出执行</p><p><strong>CPU 执行启动 I/O 设备指令</strong>，启动<strong>通道代替 CPU 对 I/O 设备进行管理</strong></p><p>注意：<strong>在具有通道结构的机器中</strong>，I/O 指令<strong>不实现 I/O 数据传送</strong>，主要完成 I/O 设备的和通道的查询与控制</p></li></ul></li><li><p>I/O 硬件：包括外部设备、设备控制器和接口、I/O 总线等</p><p>外部设备<u>通过设备控制器来控制 I/O 设备的具体动作</u>；<u>通过 I/O 接口与主机（总线）相连</u></p><p>在操作系统中，通常把 I/O 设备和设备控制器合在一起叫做设备控制器</p></li></ul><h3 id="i-o-控制方式" tabindex="-1"><a class="header-anchor" href="#i-o-控制方式" aria-hidden="true">#</a> I/O 控制方式</h3><p>在输入/输出系统中，经常需要进行大量的数据传输，而传输过程中有各种不同的 I/O 控制方式：</p><ol><li>程序查询方式：CPU 启动 I/O 工作后<strong>查询等待并传输 I/O 数据</strong></li><li>程序中断方式：启动 I/O 工作后，<strong>数据就绪时向 CPU 发出中断请求</strong>，CPU 保存状态后传输 I/O 数据</li><li>DMA 方式：启动 I/O 工作后，<strong>数据就绪时向 CPU 发出 DMA 请求</strong>，数据由 DMA 传输，但<strong>传输时 CPU 不能访存</strong></li><li>通道方式：CPU 要进行 I/O 操作时，只需启动有关通道，通道将执行通道程序，从而完成 I/O 操作</li></ol><p>方式 1 和方式 2 主要用于<strong>数据传输率较低的外部设备</strong>（会影响 CPU 执行）；方式 3 和方式 4 主要用于<strong>数据传输率较高的设备</strong></p><h2 id="外部设备" tabindex="-1"><a class="header-anchor" href="#外部设备" aria-hidden="true">#</a> 外部设备</h2><h3 id="输入设备" tabindex="-1"><a class="header-anchor" href="#输入设备" aria-hidden="true">#</a> *输入设备</h3><h4 id="键盘" tabindex="-1"><a class="header-anchor" href="#键盘" aria-hidden="true">#</a> 键盘</h4><p>键盘是最常用的输入设备，通过它可发出命令或输入数据</p><p>键盘通常以矩阵的形式排列按键，每个键用符号标明其含义和作用</p><p>每个键相当于一个开关，<u>按下键时，电信号连通；松开键时，弹簧弹起键，电信号断开</u></p><p>键盘输入信息可分为 3 个步骤：</p><ol><li>查出按下的是哪个键</li><li>将该键翻译成能被主机接收的编码，如 ASCII 码</li><li>将编码传送给主机</li></ol><h4 id="鼠标" tabindex="-1"><a class="header-anchor" href="#鼠标" aria-hidden="true">#</a> 鼠标</h4><p>鼠标是常用的定位输入设备，它<u>把用户的操作与计算机屏幕上的位置信息相联系</u>，常用的鼠标有机械式和光电式两种</p><p>工作原理：鼠标在平面上移动时，其底部传感器把运动的方向和距离检测出来，从而控制光标做相应的运动</p><h3 id="输出设备" tabindex="-1"><a class="header-anchor" href="#输出设备" aria-hidden="true">#</a> 输出设备</h3><h4 id="显示器" tabindex="-1"><a class="header-anchor" href="#显示器" aria-hidden="true">#</a> 显示器</h4><p>按显示设备所用的显示器件分类，有阴极射线管显示器、液晶显示器、发光二极管显示器等</p><p>按显示信息内容不同，分为字符显示器、图形显示器和图像显示器；按扫描方式不同，分为光栅扫描和随机扫描两种显示器</p><h5 id="常用参数" tabindex="-1"><a class="header-anchor" href="#常用参数" aria-hidden="true">#</a> 常用参数</h5><p>屏幕大小：以<strong>对角线长度</strong>表示，常用的有 12～29 英寸等</p><p>分辨率：所能表示的<strong>像素个数</strong>，屏幕上的每个光点就是一个像素，以宽和高的像素数的乘积表示</p>',31),U=s("p",null,[n("灰度级：指显示器颜色的个数，"),s("strong",null,[n("n 位可以表示 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"n")])]),s("annotation",{encoding:"application/x-tex"},"2^n")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6644em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.6644em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])])])])])])])]),n(" 种不同的亮度或颜色")]),n("，如黑白图是 8 位表示 256 种颜色")],-1),f=t('<p>刷新：光点在保持极短的时间后消失，必须<strong>在光点消失前再重新扫描显示一遍</strong>，这个过程称为刷新</p><p>刷新频率：指<strong>单位时间内扫描整个屏幕内容的次数</strong>；通常刷新频率为 <code>60～120Hz</code>，大于 <code>30Hz</code> 时才不会感到闪烁</p><p>显示存储器 <code>VRAM</code>：也称刷新存储器，为了不断提高刷新图像的信号，必须<strong>把一帧图像信息存储在刷新存储器中</strong></p><p>存储容量<strong>由图像分辨率和灰度级决定</strong>，<strong><code>VRAM 容量 = 分辨率 × 灰度级位数</code></strong>；<strong><code>VRAM 带宽 = 分辨率 × 灰度级位数 × 帧频</code></strong></p><h5 id="阴极射线管-crt-显示器" tabindex="-1"><a class="header-anchor" href="#阴极射线管-crt-显示器" aria-hidden="true">#</a> 阴极射线管 CRT 显示器</h5><p>CRT 显示器主要由电子枪、偏转线圈、荫罩、高压石墨电极、荧光粉涂层和玻璃外壳 5 部分组成</p><p>具有可视角度大、无坏点、色彩还原度高、色度均匀、可调节的多分辨率模式、响应时间极短等目前 LCD 难以超过的优点</p><ul><li><p>字符显示器：显示字符的方法以点阵为基础，<strong>点阵是指由 m × n 个点组成的阵列</strong></p><p>将<strong>点阵存入由 ROM 构成的字符发生器中</strong>，在 CRT 进行光栅扫描的过程中，从字符发生器中依次读出某个字符的点阵，按照点阵中 0 和 1 代码的不同控制扫描电子束的开或关，从而在屏幕上显示字符</p><p>对应于每个字符窗口，<strong>所需显示字符的 ASCII 代码被存放在视频存储器 <code>VRAM</code> 中</strong>，以备刷新</p><p>注意：<strong>字符显示器的 <code>VRAM</code> 是屏幕可显示字符的个数 × 用于表示字符的位数</strong></p></li><li><p>图形显示器：将所<u>显示图形的一组坐标点和绘图命令组成显示文件</u>存放在缓冲存储器中</p><p>缓存中的显示文件传送给矢量（线段）产生器，产生相应的模拟电压，直接<u>控制电子束在屏幕上的移动</u></p><p>目前高质量的图形显示器采用<u>随机扫描方式</u>，优点是分辨率高且显示的曲线平滑；缺点是当显示复杂图形时，会有闪烁感</p></li><li><p>图像显示器：用于显示图像，比上面两个复杂很多</p></li></ul><p><u>光栅扫描：指一行一行的刷新；随机扫描：只对要显示的区域扫描</u></p><h5 id="液晶显示器-lcd" tabindex="-1"><a class="header-anchor" href="#液晶显示器-lcd" aria-hidden="true">#</a> 液晶显示器 LCD</h5><p>原理：利用液晶的电光效应，由图像信号电压直接控制薄膜晶体管，再间接控制液晶分子的光学特性来实现图像的显示</p><p>特点：体积小、重量轻、省电、无辐射、绿色环保、画面柔和、不伤眼等</p><h5 id="led-发光二极管显示器" tabindex="-1"><a class="header-anchor" href="#led-发光二极管显示器" aria-hidden="true">#</a> LED 发光二极管显示器</h5><p>原理：通过控制半导体发光二极管来显示文字、图形、图像等各种信息</p><p>LCD 是由液态晶体组成的显示屏，而 LED 则是由发光二极管组成的显示屏</p><p>与 LCD 相比，LED 显示器在亮度、功耗、可视角度和刷新速率等方面都更具优势</p><h4 id="打印机" tabindex="-1"><a class="header-anchor" href="#打印机" aria-hidden="true">#</a> *打印机</h4><p>打印机是计算机的输出设备之一，<u>用于将计算机的处理结果打印在相关介质上</u></p><p>按工作原理，分为击打式和非击打式；按工作方式，分为点阵打印机、针式打印机、喷墨式打印机、激光打印机等</p><h5 id="针式打印机" tabindex="-1"><a class="header-anchor" href="#针式打印机" aria-hidden="true">#</a> 针式打印机</h5><p>原理：在联机状态下，主机发出打印命令，经接口、检测和控制电路，间歇驱动纵向送纸和打印头横向移动，同时驱动打印机间歇冲击色带，在纸上打印出所需的内容</p><p>特点：针式打印机擅长多层复写打印，<u>实现各种票据或蜡纸等的打印</u>，其工作原理简单，造价低廉，耗材（色带）便宜，但打印分辨率和打印速度不够高</p><h5 id="喷墨式打印机" tabindex="-1"><a class="header-anchor" href="#喷墨式打印机" aria-hidden="true">#</a> 喷墨式打印机</h5><p>原理：带电的喷墨雾点经过电极偏转后，直接在纸上形成所需字形，彩色喷墨打印机基于三基色原理，即分别喷射 3 种颜色的墨滴，按一定的比例混合出所要求的颜色</p><p>特点：<u>打印噪声小，可实现高质量彩色打印，通常打印速度比针式打印机快</u>；但防水性差，高质量打印需要专用打印纸</p><h5 id="激光打印机" tabindex="-1"><a class="header-anchor" href="#激光打印机" aria-hidden="true">#</a> 激光打印机</h5><p>原理：计算机输出的二进制信息，经过调制后的激光束扫描，在感光鼓上形成潜像，再经过显影、转印和定影，在纸上得到所需的字符或图像</p><p>特点：<u>打印质量高、速度快、噪声小、处理能力强</u>；但耗材多、价格较贵、不能复写打印多份，且对纸张的要求高</p><p>激光打印机是将激光技术和电子显像技术相结合的产物，感光鼓（也称硒鼓）是激光打印机的核心部件</p><h3 id="外存储器" tabindex="-1"><a class="header-anchor" href="#外存储器" aria-hidden="true">#</a> 外存储器</h3><h4 id="磁盘存储器" tabindex="-1"><a class="header-anchor" href="#磁盘存储器" aria-hidden="true">#</a> 磁盘存储器</h4><p>所谓磁表面存储，是指把某些磁性材料薄薄地涂在金属铝或塑料表面上作为载磁体来存储信息</p><p>磁盘存储器、磁带存储器和磁鼓存储器均属于磁表面存储器</p><h5 id="磁表面存储器的优缺点" tabindex="-1"><a class="header-anchor" href="#磁表面存储器的优缺点" aria-hidden="true">#</a> 磁表面存储器的优缺点</h5><p>优点：</p><ol><li>存储容量大，位价格低</li><li>记录介质可重复使用</li><li>记录信息可长期保存而不丢失，甚至可脱机存档</li><li>非破坏性读出，读出时不需要再生</li></ol><p>缺点：存取速度慢，机械结构复杂，对工作环境要求较高</p><h5 id="磁盘设备的组成" tabindex="-1"><a class="header-anchor" href="#磁盘设备的组成" aria-hidden="true">#</a> 磁盘设备的组成</h5><ol><li><p>存储区域：<strong>一块硬盘含有若干记录面，每个记录面划分为若干磁道，而每条磁道又划分为若干扇区，扇区（也称块）是磁盘读写的最小单位，即磁盘按块存取</strong></p><ul><li>磁头数 Heads：即<strong>记录面数</strong>，<strong>一个记录面对应一个磁头</strong>，磁头用于读取/写入盘片上记录面的信息</li><li>柱面数 Cylinders：<strong>硬盘每面盘片上有多少条磁道</strong>，不同面有相同的磁道，磁道是一个圆环</li><li>扇区数 Sectors：表示<strong>每条磁道上有多少个扇区</strong></li></ul><figure><img src="'+i+'" alt="2843224-46fb935cd31addbd" tabindex="0" loading="lazy"><figcaption>2843224-46fb935cd31addbd</figcaption></figure></li><li><p>硬盘存储器的组成：硬盘存储器由磁盘驱动器、磁盘控制器和盘片组成</p><ul><li>磁盘驱动器：核心部件是<strong>磁头组件和盘片组件</strong>，温彻斯特盘是一种可移动磁头固定盘片的硬盘存储器</li><li>磁盘控制器：<strong>硬盘存储器和主机的接口</strong>，即电路，主流的标准有 <code>IDE、SCSI、SATA</code> 等</li></ul></li></ol><h5 id="磁记录原理" tabindex="-1"><a class="header-anchor" href="#磁记录原理" aria-hidden="true">#</a> 磁记录原理</h5><p>原理：磁头和磁性记录介质相对运动时，通过电磁转换完成读/写操作</p><p>编码方法：按某种方案，把一连串的二进制信息变换成存储介质磁层中一个磁化翻转状态的序列，并使读/写控制电路容易、可靠地实现转换</p><p>磁记录方式：通常采用调频制 FM 和改进型调频制 <code>MFM</code> 的记录方式</p><h5 id="磁盘的性能指标" tabindex="-1"><a class="header-anchor" href="#磁盘的性能指标" aria-hidden="true">#</a> 磁盘的性能指标</h5>',44),x=s("ul",null,[s("li",null,[s("p",null,"磁盘的容量：磁盘容量有非格式化容量和格式化容量之分"),s("p",null,[n("非格式化容量是指"),s("u",null,"磁记录表面可利用的磁化单元总数"),n("，它由道密度和位密度计算而来")]),s("p",null,[n("格式化容量是指"),s("u",null,"按照某种特定的记录格式所能存储信息的总量"),n("，可能容量没使用充分")]),s("p",null,[s("strong",null,"格式化后的容量比非格式化容量要小")])]),s("li",null,[s("p",null,"记录密度：记录密度是指盘片单位面积上记录的二进制信息量，通常以道密度、位密度和面密度表示"),s("ol",null,[s("li",null,[n("道密度：沿磁盘半径方向"),s("strong",null,"单位长度上的磁道数")]),s("li",null,[n("位密度：磁道"),s("strong",null,"单位长度上能记录的二进制代码位数"),n("，外圈密度小，内圈密度大")]),s("li",null,[n("面密度："),s("strong",null,"位密度和道密度的乘积"),n("，一个磁道的数据乘以磁道数")])])]),s("li",null,[s("p",null,[n("平均存取时间：平均存取时间由三部分构成，"),s("strong",null,"加起来就是了"),n("：")]),s("ol",null,[s("li",null,"寻道时间：磁头移动到目的磁道的时间"),s("li",null,[n("旋转延迟时间：磁头定位到要读写扇区的时间，"),s("strong",null,"取旋转一周时间的一半")]),s("li",null,"传输时间：传输数据所花费的时间")]),s("p",null,[n("由于寻道和找扇区的距离远近不一，因此"),s("strong",null,"前两部分通常取平均值")])]),s("li",null,[s("p",null,[n("数据传输率：磁盘存储器在"),s("strong",null,"单位时间内向主机传送数据的字节数"),n("，称为数据传输率")]),s("p",null,[n("假设磁盘转数为 r 转/秒，每条磁道容量为 N 字节，则"),s("strong",null,[n("数据传输率为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"D"),s("mi",null,"r")]),s("mo",null,"="),s("mi",null,"r"),s("mi",null,"N")]),s("annotation",{encoding:"application/x-tex"},"D_r=rN")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"D"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.02778em"}},"r")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N")])])])])])])],-1),b=t('<h5 id="磁盘地址" tabindex="-1"><a class="header-anchor" href="#磁盘地址" aria-hidden="true">#</a> 磁盘地址</h5><p>若系统中有 4 个驱动器，每个驱动器带一个磁盘，每个磁盘 256 个磁道、16 个盘面，每个盘面划分为 16 个扇区</p><p>则<strong>每个扇区地址要 18 位二进制代码</strong></p><figure><img src="'+o+'" alt="image-20211028155328795" tabindex="0" loading="lazy"><figcaption>image-20211028155328795</figcaption></figure><h5 id="硬盘的工作过程" tabindex="-1"><a class="header-anchor" href="#硬盘的工作过程" aria-hidden="true">#</a> 硬盘的工作过程</h5><p>硬盘的主要操作是<strong>寻址、读盘、写盘</strong>；每个操作都对应一个控制字，硬盘工作时，第一步是取控制字，第二步是执行控制字</p><p>硬盘属于机械式部件，其<strong>读写操作是串行的</strong>，不能在同一时刻既读又写，也<strong>不能在同一时刻读两组数据</strong>或写两组数据</p><h4 id="磁盘阵列" tabindex="-1"><a class="header-anchor" href="#磁盘阵列" aria-hidden="true">#</a> 磁盘阵列</h4><p>RAID（廉价冗余磁盘阵列）是指将<strong>多个独立的物理磁盘组成一个独立的逻辑盘</strong>，数据在多个物理盘上分割交叉存储、并行访问，<strong>具有更好的存储性能、可靠性和安全性</strong></p><ul><li>RAID 0：无冗余和无校验的磁盘阵列，类似于<strong>多模块低位交叉</strong>，提高存储容量和读取速度</li><li>RAID 1：镜像磁盘阵列，如使用<strong>两个磁盘进行读写，互为备份</strong></li><li>RAID 2：采用纠错的海明码的磁盘阵列，这里及下面，<strong>使用校验码，当数据出错时进行纠正</strong></li><li>RAID 3：位交叉奇偶校验的磁盘阵列</li><li>RAID 4：块交叉奇偶校验的磁盘阵列</li><li>RAID 5：无独立校验的奇偶校验磁盘阵列</li></ul><p>在 <code>RAID1 ~ RAID5</code> 几种方案中，数据损坏都可以恢复，提高了系统的可靠性</p><p>RAID 通过同时使用多个磁盘，提高了传输率；通过在多个磁盘上并行存取来大幅提高存储系统的数据吞吐量；通过镜像功能，提高安全可靠性；通过数据校验，提供容错能力</p><h4 id="光盘存储器" tabindex="-1"><a class="header-anchor" href="#光盘存储器" aria-hidden="true">#</a> *光盘存储器</h4><p>光盘存储器是利用光学原理读/写信息的存储装置，它采用聚焦激光束对盘式介质以非接触方式记录信息</p><p>完整的光盘存储系统由光盘片、光盘驱动器、光盘控制器和光盘驱动软件组成</p><p>光盘片由透明的聚合物基片、铝合金反射层、漆膜保护层的固盘构成</p><p>特点：具有存储密度高、携带方便、成本低、容量大、存储期限长和容易保存等优点</p><p><strong>光盘的类型</strong>如下：</p><ul><li>CD-ROM：只读型光盘，只能读出其中的内容，不能写入或修改</li><li>CD-R：只可写入一次信息，之后不可修改</li><li>CD-<code>RW</code>：可读可写光盘，可以重复读写</li><li><code>DVD-ROM</code>：高容量的 CD-ROM，<code>DVD</code> 表示通用数字化多功能光盘</li></ul><h4 id="固态硬盘" tabindex="-1"><a class="header-anchor" href="#固态硬盘" aria-hidden="true">#</a> 固态硬盘</h4><p>微小型高档笔记本计算机<strong>采用高性能 Flash Memory 作为硬盘来记录数据</strong>，这种硬盘称固态硬盘</p><p>固态硬盘除需要 Flash Memory 外，还需要其他硬件和软件的支持，是<strong>只读存储器</strong></p><h3 id="综合应用题" tabindex="-1"><a class="header-anchor" href="#综合应用题" aria-hidden="true">#</a> 综合应用题</h3><p>题目：硬磁盘共有 4 个记录面，存储区域内半径为 <code>10cm</code>，外半径为 <code>15.5cm</code>，道密度为 60 道/cm，外层位密度为 <code>600bit/cm</code>，转速为 6000 转/分</p><ol><li>硬磁盘的磁道总数是多少？</li><li>硬磁盘的容量是多少？</li><li>将长度超过一个磁道容量的文件记录在同一个柱面上是否合理？</li><li>假定每个扇区的容量为 <code>512B</code>，每个磁道有 12 个扇区，寻道的平均等待时间为 <code>10.5ms</code>，试计算磁盘平均存取时间</li></ol><p>解答：</p><ol><li><p>磁道总数：<code>60 × (15.5cm - 15cm) × 4 = 1320</code></p></li><li><p>外磁道长度：<code>3.14 × 15.5cm × 2 = 97.34cm</code></p><p>到磁道信息量：<code>600bit/cm × 97.34cm = 7300.5B = 7300B</code>，磁道不能放 <code>0.5B</code></p><p>总量为：<code>7300B × 1320 = 963600B</code></p></li><li><p>合理，一位不需要重新寻找磁道，读写速度变快了</p></li><li><p>找磁道时间：<code>60s / 6000转 = 10ms</code>，取平均得 <code>5ms</code></p><p>扫过一个扇区时间：<code>10ms / 12 = 0.83ms</code></p><p>磁盘平均存取时间：<code>10.5ms + 5ms + 0.83ms = 16.33ms</code></p></li></ol><h2 id="i-o-接口" tabindex="-1"><a class="header-anchor" href="#i-o-接口" aria-hidden="true">#</a> I/O 接口</h2><p>I/O 接口（I/O 控制器）是<strong>主机和外设之间的交接界面</strong>，通过接口可以实现<strong>主机和外设之间的信息交换</strong></p><p>主机和外设具有各自的工作特点，它们在信息形式和工作速度上具有很大的差异，接口正是为了解决这些差异而设置的</p><h3 id="i-o-接口的功能" tabindex="-1"><a class="header-anchor" href="#i-o-接口的功能" aria-hidden="true">#</a> I/O 接口的功能</h3><p>I/O 接口的主要功能如下：</p><ol><li><p>实现主机和外设的通信联络控制：<strong>解决主机与外设时序配合问题</strong>，协调不同工作速度的外设和主机之间交换信息</p></li><li><p>进行地址译码和设备选择：CPU 送来选择外设的地址码后，接口<strong>告诉主机自己是否被选中</strong></p></li><li><p>实现数据缓冲：<strong>解决 CPU 与外设之间的速度不匹配问题</strong>，以避免因速度不一致而丢失数据</p></li><li><p>信号格式的转换：外设与主机两者的电平、数据格式都会有差异，接口应提供<strong>计算机与外设的信号格式的转换功能</strong></p></li><li><p>传送控制命令和状态信息：</p><p>CPU 要启动某一外设时：</p><ul><li><p>通过接口中的命令寄存器向外设<strong>发出启动命令</strong></p></li><li><p>外设准备就绪时，则将**“准备好”状态信息送回接口中的状态寄存器**，并反馈给 CPU</p></li></ul><p>外设向 CPU 提出<strong>中断请求</strong>时，CPU 也应有相应的<strong>响应信号</strong>反馈给外设</p></li></ol><p>思考：I/O 设备执行完命令（准备就绪）后<strong>向 I/O 数据线上发送中断信息</strong>，CPU 执行完一条指令后检查 I/O 数据线信号，如果发生中断就进入中断周期，然后根据中断码执行相应的程序把 I/O 设备的数据进行处理</p><h3 id="i-o-接口的基本结构" tabindex="-1"><a class="header-anchor" href="#i-o-接口的基本结构" aria-hidden="true">#</a> I/O 接口的基本结构</h3><p>I/O 接口在主机侧通过 I/O 总线与内存、CPU 相连</p><p>通过<strong>数据总线</strong>，在<strong>数据缓冲寄存器</strong>与<strong>内存或 CPU 的寄存器</strong>之间进行<strong>数据传送</strong></p><p>同时<strong>接口和设备的状态信息</strong>被记录在状态寄存器中，通过<strong>数据线将状态信息送到 CPU</strong></p><p>CPU 对外设的<strong>控制命令也通过数据线传送</strong>，一般将其送到 <strong>I\\O 接口的控制寄存器</strong></p><p>状态寄存器和控制寄存器在传送方向上是相反的，它们<strong>可以是两个寄存器，也可以是一个寄存器</strong></p><figure><img src="'+e+'" alt="image-20211028190040751" tabindex="0" loading="lazy"><figcaption>image-20211028190040751</figcaption></figure><p>地址线和控制线的作用：</p><ul><li><p>接口中的地址线用于给出<strong>要访问的 I/O 接口中的寄存器的地址</strong>，用以选择和主机交换信息的寄存器</p></li><li><p>同时控制线传送来读/写信号<strong>确认是读还是写寄存器</strong>，此外控制线还会传送一些<strong>仲裁信号和握手信号</strong></p></li></ul><p>接口对命令的处理：</p><ul><li>将命令写入控制寄存器后，接口中的 I/O 控制逻辑会<strong>对其内的命令字进行译码</strong></li><li><strong>将译码得到的控制信号</strong>通过外设界面控制逻辑<strong>送到外设</strong></li><li>同时<strong>将数据缓冲寄存器的数据发送到外设</strong>，或<strong>从外设接收数据到数据缓冲寄存器</strong></li><li>另外，它还会<strong>收集外设状态到状态寄存器</strong></li></ul><p>对数据缓冲寄存器、状态/控制寄存器的访问操作是通过相应的指令来完成的，通常称这类指令为 <strong>I/O 指令</strong></p><p>I/O 指令只能在操作系统内核的底层 I/O 软件中使用，它们是一种<strong>特权指令</strong></p><p>思考：CPU 根据端口对接口的寄存器进行读写，然后接口根据寄存器的内容进行解析并给外设发出命令</p><h3 id="i-o-接口的类型" tabindex="-1"><a class="header-anchor" href="#i-o-接口的类型" aria-hidden="true">#</a> I/O 接口的类型</h3><p>从不同的角度看，I/O接口可以分为不同的类型：</p><ol><li><p>按数据传送方式可分为<strong>并行接口和串行接口</strong>，接口要完成数据格式的转换</p><p>注意：这里指的是<strong>外设和接口一侧的传送方式</strong>，而在<strong>主机和接口一侧，数据总是并行传送的</strong></p></li><li><p>按主机访问 I/O 设备的控制方式可分为<strong>程序查询接口、中断接口和 DMA 接口</strong>等</p></li><li><p>按功能选择的灵活性可分为<strong>可编程接口和不可编程接口</strong></p></li></ol><h3 id="i-o-端口及其编址" tabindex="-1"><a class="header-anchor" href="#i-o-端口及其编址" aria-hidden="true">#</a> I/O 端口及其编址</h3><p>I/O 端口是指<strong>接口电路中可被 CPU 直接访问的寄存器</strong>，主要有<strong>数据端口、状态端口和控制端口</strong>，若干<strong>端口加上相应的控制逻辑电路组成接口</strong></p><p>CPU 能<strong>对数据端口执行读写操作</strong>，但<strong>对状态端口<u>只能执行读操作</u></strong>，对<strong>控制端口<u>只能执行写操作</u></strong></p><p>I/O 端口要想能够被 CPU 访问，就必须要<strong>对各个端口进行编号，每个端口对应一个端口地址</strong>：</p><ul><li><p>统一编址，存储器映射方式：是指把 I/O 端口<strong>当作存储器的单元进行地址分配</strong>，用访存指令就可以访问 I/O 端口</p><p>其对应的 <strong>I/O 地址要求固定在地址的某个部分</strong>，可以前面、中间、后面，但是要固定</p><p>优点：<strong>不需要专门的 I/O 指令</strong>，可使 CPU 访问 I/O 的操作更灵活、更方便，还可<strong>使端口有较大的编址空间</strong></p><p>缺点：<strong>端口占用存储器地址</strong>，使内存容量变小而且利用存储器编址的 I/O 设备进行数据输入/输出操作，<strong>执行速度较慢</strong></p></li><li><p>独立编址，I/O 映射方式：I/O 端口的地址空间与主存地址空间是两个独立的地址空间</p><p>无法从地址码的形式上区分，<strong>需要设置专门的 I/O 指令来访问 I/O 端口</strong></p><p>优点：<strong>输入/输出指令与存储器指令有明显区别</strong>，程序编制清晰，便于理解</p><p>缺点：I/O 指令功能少，一般只能对端口进行传送操作；<u>需要 CPU 提供存储器读/写、I/O 设备读/写<strong>两组控制信号</strong></u>，增加了<strong>控制的复杂性</strong></p></li></ul><h2 id="i-o-方式" tabindex="-1"><a class="header-anchor" href="#i-o-方式" aria-hidden="true">#</a> I/O 方式</h2><h3 id="程序查询方式" tabindex="-1"><a class="header-anchor" href="#程序查询方式" aria-hidden="true">#</a> 程序查询方式</h3><p>信息交换的控制<strong>完全由主机执行程序实现</strong>，主机进行 I/O 操作时，根据<strong>读取设备的状态</strong>决定进行<strong>数据传送还是等待</strong></p><p>程序查询方式的工作流程如下：</p><ol><li>CPU 执行初始化程序，并<strong>预置传送参数</strong></li><li>向 I/O 接口发出命令字，<strong>启动 I/O 设备</strong></li><li>从外设接口<strong>读取其状态信息</strong></li><li>CPU <strong>不断查询 I/O 设备状态，直到外设准备就绪</strong></li><li><strong>传送一次数据</strong></li><li><strong>修改地址和计数器参数</strong></li><li><strong>判断传送是否结束</strong>，若未结束转第 3 步，直到计数器为 0</li></ol><figure><img src="'+g+'" alt="image-20211029145846405" tabindex="0" loading="lazy"><figcaption>image-20211029145846405</figcaption></figure><p>在这种控制方式下，CPU一旦启动 I/O，就<strong>必须停止现行程序的运行，并在现行程序中插入一段程序</strong></p><p>程序查询方式的主要特点是 CPU 有踏步等待现象，<strong>CPU 与 I/O 串行工作</strong></p><p>优点：接口设计简单、设备量少；缺点：CPU <strong>花费时间来查询和等待</strong>，<strong>一段时间内只能和一台外设交换信息</strong>，效率大大降低</p><h3 id="程序中断方式" tabindex="-1"><a class="header-anchor" href="#程序中断方式" aria-hidden="true">#</a> 程序中断方式</h3><p>现代计算机系统中都配有完善的异常和中断处理系统，CPU 的<strong>数据通路</strong>中有相应的<strong>异常和中断的检测和响应逻辑</strong></p><p><u>在外设接口中有相应的中断请求和控制逻辑，操作系统中有相应的中断服务程序</u></p><h4 id="异常和中断" tabindex="-1"><a class="header-anchor" href="#异常和中断" aria-hidden="true">#</a> 异常和中断</h4><h5 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h5><p>异常是指<strong>由 CPU 内部异常引起的意外事件</strong>，分为硬故障中断和程序性异常</p><ul><li>硬故障中断：<strong>由硬连线出现异常引起的</strong>；如电源掉电、存储器线路错等</li><li>程序性异常：也称软中断，是指在 CPU 内部因<strong>执行指令而引起的</strong>异常事件；如整除 0、溢出、断点、单步跟踪、非法指令、栈溢出、地址越界、缺页、分时系统中的时间片中断、用户态到核心态的切换等</li></ul><p>按发生异常的报告方式和返回方式不同，<strong>内部异常</strong>可分为故障（Fault）、自陷（Trap）和终止（Abort）三类：</p><h6 id="故障-fault" tabindex="-1"><a class="header-anchor" href="#故障-fault" aria-hidden="true">#</a> 故障 Fault</h6><p><strong>指在引起故障等指令启动后、执行结束前，被检测到的异常事件</strong>，分为可恢复异常和不可恢复异常</p><ul><li>对于缺段、缺页等异常：将所需的段或页面调入主存后，<strong>可回到发生故障的指令继续执行</strong>，断点为当前发生故障的指令</li><li>对于非法操作码、除数为 0 等异常：无法通过异常处理程序恢复故障，因此<strong>不能回到原断点执行，必须终止进程的执行</strong></li></ul><h6 id="自陷-trap" tabindex="-1"><a class="header-anchor" href="#自陷-trap" aria-hidden="true">#</a> 自陷 Trap</h6><p>自陷也称陷阱或陷入，它是<strong>预先安排的一种异常事件</strong>，就像预先设定的陷阱一样</p><p>自陷可以看作是<strong>为程序员提供的程序</strong>，并提供特定的指令去调用，执行完返回自陷指令的下一条指令执行</p><p>注意：当自陷指令是转移指令时，并不是返回到下一条指令执行，而是<u>返回到转移目标指令执行</u></p><p><u>程序调试的断点设置、系统调用指令、条件自陷指令</u>等都属于陷阱指令，执行到这些指令时，无条件或有条件地自动<strong>调出操作系统内核程序进行执行</strong></p><h6 id="终止-abort" tabindex="-1"><a class="header-anchor" href="#终止-abort" aria-hidden="true">#</a> 终止 Abort</h6><p>如果在执行指令的过程中发生了使<strong>计算机无法继续执行的硬件故障</strong>，如电源掉电、线路故障等</p><p>那么程序将无法继续执行，只能终止，此时，<strong>调出中断服务程序来重启系统</strong></p><p>这种异常与故障和自陷不同，<strong>不是由特定指令产生的</strong>，而是随机发生的</p><h5 id="外部中断" tabindex="-1"><a class="header-anchor" href="#外部中断" aria-hidden="true">#</a> 外部中断</h5><p>外中断是指<strong>来自 CPU 外部</strong>、与 CPU 执行<strong>指令无关的事件引起的中断</strong>，包括 <u>I/O 设备发出的 I/O 中断，外部信号中断，以及各种定时器引起的时钟中断</u>等；外中断在狭义上一般称为中断，<strong>若未说明，一般是指外中断</strong></p><p>外中断和内部异常在本质上是一样的，但它们之间有以下两个重要的不同点：</p><ol><li>缺页或溢出等<strong>异常事件是由特定指令在执行过程中产生的</strong>；<strong>外中断不和任何指令相关联，也不阻止任何指令的完成</strong></li><li><strong>异常的检测是由 CPU 自身完成</strong>的，不必通过外部的某个信号通知 CPU；对于中断，CPU 必须<strong>通过总线获取中断源的标识信息</strong>，才能获知哪个设备发生了何种中断</li></ol><p>有些教材也将异常和中断统称为中断，将由 <strong>CPU 内部产生的异常称为内中断</strong>，将<strong>通过中断请求线 <code>INTR</code> 和 <code>NMI</code> 从 CPU 外部发出的中断请求称为外中断</strong></p><h4 id="中断的基本概念" tabindex="-1"><a class="header-anchor" href="#中断的基本概念" aria-hidden="true">#</a> 中断的基本概念</h4><p>程序中断指：在执行程序工程中，出现急需处理的异常或特殊请求，就<strong>暂停程序处理请求，处理完后再返回断点执行原程序</strong></p><p>程序中断的作用如下：</p><ol><li>实现 <strong>CPU 与 I/O 设备的并行工作</strong></li><li><strong>处理硬件故障和软件错误</strong></li><li>实现人机交互，<strong>用户干预机器需要用到中断系统</strong></li><li>实现多道程序、分时操作，<strong>多道程序的切换需借助于中断系统</strong></li><li>实时处理需要借助中断系统来<strong>实现快速响应</strong></li><li>实现<strong>应用程序和操作系统（管态程序）的切换</strong>，称为软中断</li><li>多处理器系统中<strong>各处理器之间的信息交流和任务切换</strong></li></ol><p>程序中断方式的思想：</p><ol><li>CPU 在程序中安排好于某个时刻<strong>启动某台外设后<u>继续执行</u>原来的程序</strong>，不用一直等待外设准备就绪</li><li>一旦外设<strong>完成数据传送的准备工作</strong>，就主动向 CPU <strong>发出中断请求</strong>，请求 CPU 为自己服务</li><li>在可以响应中断的条件下，CPU <strong>暂时中止正在执行的程序</strong>，转去执行中断服务程序为外设服务</li><li>在中断服务程序中<strong>完成一次主机与外设之间的数据传送</strong>，传送完成后，CPU <strong>返回原来的程序</strong></li></ol><figure><img src="'+p+'" alt="image-20211029165250647" tabindex="0" loading="lazy"><figcaption>image-20211029165250647</figcaption></figure><p>思考：外设把数据准备好后，放到接口的数据寄存器中，然后发中断通知 CPU 取数据，可能为：</p><ul><li>自己继续准备数据，如果自己再次准备好数据后 CPU 还没有取走数据，那么会把接口的数据寄存器的原数据覆盖了</li><li>等 CPU 响应中断了，自己再继续准备数据，与 CPU 执行中断服务程序并行，这样不会覆盖原数据，但会比上面慢</li></ul><h4 id="程序中断方式工作流程" tabindex="-1"><a class="header-anchor" href="#程序中断方式工作流程" aria-hidden="true">#</a> 程序中断方式工作流程</h4><h5 id="中断请求" tabindex="-1"><a class="header-anchor" href="#中断请求" aria-hidden="true">#</a> 中断请求</h5><p><strong>中断源是请求 CPU 中断的设备或事件</strong>，一台计算机允许有多个中断源，每个中断源向 CPU 发出中断请求的时间是随机的</p><p>中断系统需对<strong>每个中断源设置中断请求标记触发器 <code>INTR</code></strong>，当其状态为 1 时，表示中断源有请求</p><p>这些触发器可<strong>组成中断请求标记寄存器</strong>，该寄存器可<strong>集中在 CPU 中</strong>，也可分散在各个中断源中</p><p>内中断皆为不可屏蔽中断，而外中段要根据发出的信号线而定：</p><ul><li>通过 <code>INTR</code> 信号线发出的外中断是<strong>可屏蔽中断</strong>，在关中断 <strong>(IF=1) 的情况下才会被响应</strong></li><li>通过 <code>NMI</code> 信号发出的外中断是<strong>不可屏蔽中断</strong>，即使在关中断 <strong>(IF=0) 的情况下也会被响应</strong></li></ul><p><strong>不可屏蔽中断的处理优先级最高</strong>，任何时候发生不可屏蔽中断，都要中止现行程序的执行，转到不可屏蔽中断处理程序执行</p><h5 id="中断分类" tabindex="-1"><a class="header-anchor" href="#中断分类" aria-hidden="true">#</a> 中断分类</h5><ol><li><p>重新启动中断：这是为<strong>操作人员重新启动一个程序</strong>用的，在一般情况下，处理机不能禁止这类中断</p></li><li><p>机器检验错中断：当<strong>发生硬件或软件故障时</strong>发生机器校验错中断</p><p>包括有电源故障、运算器误动作、主存储器校验错、输入输出通道硬件故障、处理机的其它各种故障等</p></li><li><p>程序性错误引起的中断：<strong>执行指令中出现错误</strong></p><p>主要包括指令或数据格式错误，在程序执行过程中出现非法操作码、主存保护错误、地址越界错误、各种运算溢出错误、除数为零错误、有效位为零错误、用户态下使用管态指令错误等</p></li><li><p>访问管理程序中断：当<strong>用户程序要调用管理程序</strong>时，执行访管指令引起的中断，处理机一般不能禁止这类中断</p></li><li><p>外部事件中断：<strong>与 CPU 执行指令无关的事件引起的中断</strong>，包括各种用于记时、记费、控制的定时器中断</p></li><li><p>输入输出中断：用于<strong>处理机管理各种外围设备</strong>，管理通道处理机等</p></li></ol><p>选择题：机器检验错中断 &gt; 访管指令中断 &gt; 程序性中断 &gt; 外部中断 &gt; 重新启动中断</p><h5 id="中断判优" tabindex="-1"><a class="header-anchor" href="#中断判优" aria-hidden="true">#</a> 中断判优</h5><p>中断系统在<strong>一瞬间只能响应一个中断源的请求</strong>，多个中断源同时提出请求时，通过<strong>中断判优逻辑确定响应哪个中断源的请求</strong></p><p>中断判优<strong>既可以用硬件实现，又可用软件实现</strong>：</p><ul><li>硬件实现是通过硬件排队器实现的，它既可以设置在 CPU 中，又可以分散在各个中断源中</li><li>软件实现是通过查询程序实现的</li></ul><p><strong>一般来说，优先级的划分为：</strong></p><ol><li>硬件故障中断属于最高级，其次是软件中断</li><li>不可屏蔽中断优于可屏蔽中断</li><li>DMA 请求优于 I/O 设备传送的中断请求</li><li>高速设备优于低速设备</li><li>输入设备优于输出设备</li><li>实时设备优于普通设备</li></ol><h5 id="cpu-响应中断的条件" tabindex="-1"><a class="header-anchor" href="#cpu-响应中断的条件" aria-hidden="true">#</a> CPU 响应中断的条件</h5><p>CPU 响应中断必须满足：</p><ol><li><p>中断源<strong>有中断请求</strong>，即有中断请求触发器处于 1 状态</p><p>外设发送了中断请求且被外设接口中断允许触发器允许（允许触发器置 1）</p></li><li><p><strong>CPU 允许中断</strong>即开中断，即 CPU 内的中断屏蔽触发器是开发的</p></li><li><p><strong>一条指令执行完毕</strong>，且没有更紧迫的任务</p></li></ol><p>注意：对于<strong>外中断</strong>，CPU 在每条<strong>指令执行阶段的结束时刻</strong>向接口发出中断查询信号，以获取 I/O 的中断请求</p><h5 id="中断响应" tabindex="-1"><a class="header-anchor" href="#中断响应" aria-hidden="true">#</a> 中断响应</h5><p>CPU 响应中断后，经过某些由<strong>硬件直接实现</strong>的操作，转去执行中断服务程序，称这些操作为<strong>中断隐指令</strong>，它<strong>无法被用户使用</strong></p><p>它所完成的操作如下：</p><ol><li>关中断：为了在保护程序的断点和现场信息的过程中，<strong>不能被其他中断打扰</strong>，导致信息没保存好，必须先关闭中断</li><li>保存断点：为保证在中断服务程序执行完毕后能<strong>正确地返回到原来的程序</strong>，必须将原来程序的断点保存起来</li><li>引出中断服务程序：实质是<strong>取出中断服务程序的入口地址并传送给程序计数器 PC</strong></li></ol><p>其中<strong>断点信息</strong>为：<strong>程序计算器 PC 和状态标志寄存器 <code>PSWR</code></strong> 的内容，因为指令无法访问它们</p><h5 id="中断向量" tabindex="-1"><a class="header-anchor" href="#中断向量" aria-hidden="true">#</a> 中断向量</h5><p>每个中断都有一个类型号，每个中断类型号都对应一个中断服务程序，每个中断服务程序都有一个入口地址</p><p>使用存储器某个空间<strong>存放系统的全部中断向量</strong>，这个空间叫做<strong>中断向量表</strong>，可以<strong>根据中断类型号在中断向量表找到中断向量</strong></p><p>中断向量法：CPU 响应中断后，<u>中断硬件会自动将中断向量地址传送给 CPU</u> 来实现程序的切换</p><p>向量中断：<strong>采用中断向量法的中断</strong>，要使用中断向量法得有中断向量表等一系列的东西</p><p>注意：<strong>中断向量</strong>是<strong>中断服务程序的入口地址</strong>；<strong>中断向量地址</strong>是指<strong>中断服务程序的入口地址的地址</strong></p><h5 id="中断处理过程" tabindex="-1"><a class="header-anchor" href="#中断处理过程" aria-hidden="true">#</a> 中断处理过程</h5><p>大部分计算机，中断处理流程如下：</p><ol><li><p>关中断：在<strong>保护断点和现场期间不能被新的中断所打断</strong>，必须关中断</p><p>否则若断点或现场保存不完整，就不能正确地恢复并继续执行现行程序</p></li><li><p>保存断点：断点可以<strong>压入堆栈</strong>，也可以<strong>存入主存的特定单元中</strong>，断点信息无法由软件访问，故<strong>由硬件实现</strong></p></li><li><p>引出中断服务程序：中断服务程序的入口地址的获得方式，硬件向量法和软件查询法</p><ul><li>硬件向量法：<strong>通过硬件产生中断向量地址，再由中断向量地址找到中断服务程序的入口地址</strong></li><li>软件查询法：用软件编程的办法寻找入口地址</li></ul><p>注意：硬件产生的实际上是<strong>中断类型号</strong>，而中断类型号<strong>指出了中断向量存放的地址</strong>，因此能产生中断向量地址</p></li><li><p>保存现场和屏蔽字：进入中断服务程序后首先要保存<strong>现场和中断屏蔽字</strong>，现场信息是指<strong>用户可见的工作寄存器的内容</strong></p><p>注意：现场和断点，这两类信息都<strong>不能被中断服务程序破坏</strong>，现场信息可以<strong>直接用指令保存到栈中</strong>，由软件实现</p></li><li><p>开中断：<strong>允许更高级中断请求得到响应</strong>，实现中断嵌套</p></li><li><p>执行中断服务程序：这是中断请求的目的</p></li><li><p>关中断：<strong>保证在恢复现场和屏蔽字时不被中断</strong></p></li><li><p>恢复现场和屏蔽字：<strong>将现场和屏蔽字恢复到原来的状态</strong></p></li><li><p><strong>开中断</strong>、中断返回：中断服务程序的最后一条指令通常是一条<strong>中断返回指令</strong>，返回到原程序的断点处，继续执行原程序</p></li></ol><p>1~3 在 CPU 进入中断周期后，由<strong>中断隐指令（硬件自动）完成</strong>；4~9 由中断服务程序完成</p><p>注意：对于单重中断系统，中断只会在最后才开回来，中间不会开的，因为不能嵌套中断</p><h4 id="多重中断和中断屏蔽技术" tabindex="-1"><a class="header-anchor" href="#多重中断和中断屏蔽技术" aria-hidden="true">#</a> 多重中断和中断屏蔽技术</h4><p>在 CPU 在执行中断服务程序的过程中，又出现了新的更高优先级的中断请求：</p><ul><li>单重中断：<strong>CPU 对新的中断请求不予响应</strong></li><li>多重中断，中断嵌套：<strong>CPU 暂停现行的中断服务程序，转去处理新的中断请求</strong></li></ul><figure><img src="'+h+'" alt="image-20211029201233691" tabindex="0" loading="lazy"><figcaption>image-20211029201233691</figcaption></figure><p><strong>中断屏蔽技术主要用于多重中断</strong>，CPU 要具备多重中断的功能，必须满足下列条件：</p><ol><li>在中断服务程序中提前<strong>设置开中断指令</strong></li><li><strong>优先级别高的中断源有权中断优先级别低的中断源</strong></li></ol><p><u>每个中断源都有一个屏蔽触发器</u>，<strong>1 表示屏蔽该中断源的请求，0 表示可以正常申请</strong>，所有屏蔽触发器组合在一起便构成一个屏蔽字寄存器，屏蔽字寄存器的内容称为屏蔽字；在中断程序中会设置屏蔽字；下面给个例题说明如何求屏蔽字</p><p>注意：优先次序是<strong>排队器</strong>实现的，是多个中断一起发送时<strong>谁先响应</strong>；处理次序是屏蔽字实现的，是多个中断<strong>谁先执行完</strong></p><hr><p>题目：设某机有 4 个中断源 A、B、C、D 其硬件排队优先次序为 A&gt;B&gt;C&gt;D 现要求将中断处理次序改为 D&gt;A&gt;C&gt;B</p><ol><li><p>写出每个中断源对应的屏蔽字</p></li><li><p>时间轴给出的 4 个中断源的请求时刻，画出 CPU 执行程序的轨迹。设每个中断源的中断服务程序时间均为 <code>20us</code></p><figure><img src="'+d+'" alt="image-20211029201911505" tabindex="0" loading="lazy"><figcaption>image-20211029201911505</figcaption></figure></li></ol><p>解答：</p><ol><li><p>在中断处理次序改为 D&gt;A&gt;C&gt;B 后，D 具有最高优先级，可以屏蔽其他所有中断，且不能中断自身，因此 D 对应的屏蔽字为 1111；A 具有次高优先级，只能被 D 中断，因此 A 对应的屏蔽字为 1110，以此类推，得到 4 个中断源的屏蔽字</p><figure><img src="'+c+'" alt="image-20211029202453160" tabindex="0" loading="lazy"><figcaption>image-20211029202453160</figcaption></figure></li><li><p>根据处理次序，在时刻 5，B 发中断请求，获得 CPU；在时刻 10，D 发中断请求，此时 B 虽还未执行完毕，但 D 的优先级高于 B，于是 D 中断 B 而获得 CPU；在时刻 30，D 执行完毕，B 继续获得 CPU；在时刻 35，A 发中断请求，此时 B 虽还未执行完毕，但 A 的优先级高于 B，于是 A 中断 B 而获得 CPU，如此继续下去</p><figure><img src="'+m+'" alt="image-20211029202647551" tabindex="0" loading="lazy"><figcaption>image-20211029202647551</figcaption></figure></li></ol><h3 id="dma-方式" tabindex="-1"><a class="header-anchor" href="#dma-方式" aria-hidden="true">#</a> DMA 方式</h3><p>DMA 方式是一种<strong>完全由硬件进行成组信息传送的控制方式</strong>，它<strong>具有程序中断方式的优点</strong></p><p>这种方式<u>适用于磁盘机、磁带机等高速设备大批量数据的传送</u>，它的硬件开销比较大</p><p>在 DMA 方式中，中断的作用仅限于<u>故障和正常传送结束时的处理</u></p><h4 id="dma-方式的特点" tabindex="-1"><a class="header-anchor" href="#dma-方式的特点" aria-hidden="true">#</a> DMA 方式的特点</h4><p>主存和 DMA 接口之间有一条<strong>直接数据通路</strong>（逻辑通路），<strong>传送数据不需要经过 CPU</strong>，不必中断现行程序</p><p><strong>I/O 与主机并行工作，程序和传送并行工作</strong>，DMA 方式具有下列特点：</p><ol><li>它使主存与 CPU 的固定联系脱钩，<strong>主存既可被 CPU 访问，又可被外设访问</strong></li><li>在数据块传送时，主存地址的确定、传送数据的计数等都由<strong>硬件电路直接实现</strong></li><li>主存中要<strong>开辟专用缓冲区</strong>，及时<strong>供给和接收外设的数据</strong></li><li>DMA 传送速度快，CPU 和外设并行工作，<strong>提高了系统效率</strong></li><li>DMA 在<strong>传送开始前要通过<u>程序进行预处理</u></strong>，<strong>结束后要通过<u>中断方式进行后处理</u></strong></li></ol><h4 id="dma-控制器的组成" tabindex="-1"><a class="header-anchor" href="#dma-控制器的组成" aria-hidden="true">#</a> DMA 控制器的组成</h4><p>在 DMA 方式中，对数据传送过程<strong>进行控制的硬件称为 DMA 控制器（DMA 接口）</strong></p><p>当 I/O 设备需要进行数据传送时，<strong>通过</strong> DMA 控制器向 CPU 提出 DMA 传送请求，CPU 响应之后将<strong>让出系统总线</strong>，由 <strong>DMA 控制器接管总线进行数据传送</strong></p><p>其主要功能如下：</p><ol><li>接受<strong>外设发出的 DMA 请求</strong>，并<strong>向 CPU 发出总线请求</strong></li><li>CPU 响应此总线请求，发出总线响应信号，<strong>代替 CPU 接管总线控制权，进入 DMA操作周期</strong></li><li>确定传送数据的主存单元地址及长度，并<strong>自动修改主存地址计数和传送长度计数</strong></li><li>规定数据在主存和外设间的<strong>传送方向</strong>，发出读写等控制信号，<strong>执行数据传送操作</strong></li><li><strong>向 CPU 报告 DMA 操作的结束</strong></li></ol><figure><img src="'+u+'" alt="image-20211029205148881" tabindex="0" loading="lazy"><figcaption>image-20211029205148881</figcaption></figure><ul><li>主存地址计数器：存放<strong>要交换数据的主存地址</strong></li><li>传送长度计数器：<strong>记录传送数据的长度</strong>，计数<strong>溢出时</strong>，数据即传送完毕，自动<strong>发中断请求信号</strong></li><li>数据缓冲寄存器：<strong>暂存每次传送的数据</strong></li><li>DMA 请求触发器：每当 I/O 设备<strong>准备好数据后</strong>，给出一个控制信号，<strong>使 DMA 请求触发器置位</strong></li><li>控制/状态逻辑：由控制和时序电路及状态标志组成，用于<strong>指定传送方向，修改传送参数</strong>，并<u>对 DMA 请求信号和 CPU 响应信号进行协调和同步</u></li><li>中断机构：当<strong>一个数据块传送完毕后触发中断机构</strong>，向 CPU 提出中断请求</li></ul><p>在 DMA 传送过程中，DMA 控制器将<u>接管 CPU 的地址总线、数据总线和控制总线</u>，<strong>CPU 的主存控制信号被禁止使用</strong></p><p>而当 DMA 传送结束后，将<strong>恢复 CPU 的一切权利并开始执行其操作</strong></p><h4 id="dma-的传送方式" tabindex="-1"><a class="header-anchor" href="#dma-的传送方式" aria-hidden="true">#</a> DMA 的传送方式</h4><p>主存和 I/O 设备之间交换信息时，不通过 CPU，但当 I/O 设备和 CPU <strong>同时访问主存</strong>时，可能<strong>发生冲突</strong></p><p>为了有效地使用主存，DMA 控制器与 CPU 采用以下方式使用主存：</p>',169),D=s("ul",null,[s("li",null,[s("p",null,[n("停止 CPU 访存：当 I/O 设备有 DMA 请求时，由 DMA 控制器向 CPU 发送一个停止信号，"),s("strong",null,"使 CPU 脱离总线，停止访问主存，直到 DMA 传送一块数据结束"),n("，数据传送结束后，DMA 控制器"),s("strong",null,"通知 CPU 可以使用主存"),n("，并"),s("strong",null,"把总线控制权交还给 CPU")])]),s("li",null,[s("p",null,"周期挪用，周期窃取：当 I/O 设备有 DMA 请求时，会遇到 3 种情况："),s("ol",null,[s("li",null,[n("此时 CPU 不在访存（如 CPU 正在执行乘法指令），因此 I/O 的访存请求与 CPU "),s("strong",null,"未发生冲突")]),s("li",null,[n("CPU 正在访存，此时必须待存"),s("strong",null,"取周期结束后，CPU 再将总线占有权让出")]),s("li",null,[n("I/O 和 CPU 同时请求访存，出现访存冲突，此时 "),s("strong",null,"CPU 要暂时放弃总线占有权")])]),s("p",null,[s("strong",null,"I/O 访存优先级高于 CPU 访存"),n("，因为 I/O 不立即访存就可能丢失数据")]),s("p",null,[n("由 I/O 设备挪用一个或几个存取周期，"),s("strong",null,"传送完一个数据后立即释放总线，是一种单字传送方式")])]),s("li",null,[s("p",null,[n("DMA 与 CPU 交替访存：这种方式适用于 "),s("strong",null,"CPU 周期比主存存取周期长的情况")]),s("p",null,[n("若 CPU 周期是 "),s("code",null,"1.2us"),n("，主存的存取周期小于 "),s("code",null,"0.6us"),n("，则可将一个 CPU 周期分为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"C_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"C_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 两个周期，其中 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"C_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 专供 DMA 访存，"),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"C_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 专供 CPU 访存")]),s("p",null,[n("这种方式"),s("strong",null,"不需要总线使用权的申请、建立和归还"),n("过程，总线使用权是通过 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"1")])]),s("annotation",{encoding:"application/x-tex"},"C_1")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"1")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 和 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"C"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"C_2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8333em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07153em"}},"C"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3011em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0715em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 分时控制的")])])],-1),M=t('<h4 id="dma-的传送过程" tabindex="-1"><a class="header-anchor" href="#dma-的传送过程" aria-hidden="true">#</a> DMA 的传送过程</h4><p>DMA 的数据传送过程分为预处理、数据传送、后处理：</p><ol><li><p>预处理：由 CPU 完成一些必要的准备工作</p><ol><li>CPU 执行几条 I/O 指令，用以<strong>测试 I/O 设备状态</strong></li><li><strong>向 DMA 控制器的有关寄存器置初值、设置传送方向、启动该设备</strong>等</li><li>CPU 继续执行原来的程序，直到 I/O 设备<strong>准备好发送的数据或接收的数据</strong></li><li><strong>I/O 设备向 DMA 控制器发送 DMA 请求</strong>，再由 <strong>DMA 控制器向 CPU 发送总线请求</strong>，用以传输数据</li></ol></li><li><p>数据传送：DMA 的数据传输可以以单字节（或字）为基本单位，也可以以数据块为基本单位</p><p>对于<strong>以数据块为单位的传送</strong>（如硬盘），DMA 占用总线后的<strong>数据输入和输出操作都是通过循环来实现的</strong></p><p>循环也是由 DMA 控制器实现的，即<strong>数据传送阶段完全由 DMA（硬件）控制</strong></p></li><li><p>后处理：<strong>DMA 控制器向 CPU 发送中断请求，CPU 执行中断服务程序做 DMA 结束处理</strong></p><p>包括校验送入主存的数据是否正确、测试传送过程中是否出错（错误则转入诊断程序）及决定是否继续使用 DMA 传送其他数据块等</p></li></ol><figure><img src="'+C+'" alt="image-20211029212623495" tabindex="0" loading="lazy"><figcaption>image-20211029212623495</figcaption></figure><h4 id="dma方式和中断方式的区别" tabindex="-1"><a class="header-anchor" href="#dma方式和中断方式的区别" aria-hidden="true">#</a> DMA方式和中断方式的区别</h4><p>DMA 方式和中断方式的<strong>重要</strong>区别如下：</p><ol><li><p>中断方式是程序的切换，<strong>需要保护和恢复现场</strong>；DMA方式除了<strong>预处理和后处理</strong>，其他时候不占用 CPU 的任何资源</p></li><li><p>对中断请求的响应<strong>只能发生在每条指令执行完毕时</strong>（即指令的执行周期后）</p><p>对 DMA请求的响应可以<strong>发生在每个机器周期结束时</strong>，只要 CPU 不占用总线就可被响应</p></li><li><p>中断传送过程<strong>需要 CPU 的干预</strong>；而 DMA 传送过程<strong>不需要 CPU 的干预</strong>，数据传输率非常高，适合高速外设成组数据传送</p></li><li><p><strong>DMA 请求的优先级高于中断请求</strong></p></li><li><p>中断方式<strong>具有对异常事件的处理能力</strong>；DMA 方式仅<strong>局限于传送数据块的 I/O 操作</strong></p></li><li><p>从数据传送来看，中断方式<strong>靠程序传送</strong>，DMA 方式<strong>靠硬件传送</strong></p></li></ol>',7),O=[P,U,f,x,b,D,M];function A(_,y){return r(),l("div",null,O)}const w=a(I,[["render",A],["__file","第七章 输入输出系统.html.vue"]]);export{w as default};
