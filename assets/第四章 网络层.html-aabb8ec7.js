import{_ as o,X as r,Y as a,a3 as t,a0 as s,a2 as n}from"./framework-cd5fce69.js";const i="/408doc/408noteImg/images/image-20211208214938510.png",l="/408doc/408noteImg/images/image-20211208215140345.png",p="/408doc/408noteImg/images/image-20211210135127303.png",g="/408doc/408noteImg/images/image-20211210142601351.png",e="/408doc/408noteImg/images/image-20211210135331709.png",c="/408doc/408noteImg/images/image-20211210135515811.png",d="/408doc/408noteImg/images/image-20211210135552518.png",h="/408doc/408noteImg/images/image-20211210140053130.png",P="/408doc/408noteImg/images/image-20211211152011561.png",u="/408doc/408noteImg/images/image-20211211151710543.png",m="/408doc/408noteImg/images/image-20211212110102062.png",I="/408doc/408noteImg/images/image-20211212183506854.png",f="/408doc/408noteImg/images/image-20211212181133892.png",k="/408doc/408noteImg/images/image-20211212181252769.png",b="/408doc/408noteImg/images/image-20211212181344972.png",v="/408doc/408noteImg/images/image-20211213152003204.png",C="/408doc/408noteImg/images/image-20211213152104133.png",x="/408doc/408noteImg/images/image-20211214132843925.png",_="/408doc/408noteImg/images/image-20211214132948199.png",A="/408doc/408noteImg/images/image-20211214133007708.png",D="/408doc/408noteImg/images/image-20211214133055858.png",R={},M=t('<h2 id="网络层的功能" tabindex="-1"><a class="header-anchor" href="#网络层的功能" aria-hidden="true">#</a> 网络层的功能</h2><p>互联网在网络层的设计思路是，向上只提供<strong>简单灵活的、无连接的</strong>、尽最大努力交付的数据报服务（<strong>不可靠</strong>）</p><p>如果主机中的进程之间的通信需要是可靠的，那么可以<strong>由更高层的传输层来负责</strong></p><p>采用这种设计思路的好处是：网络的<strong>造价大大降低</strong>，运行方式灵活，能够适应多种应用</p><p>互联网能够发展到今日的规模，充分证明了当初采用这种设计思想的正确性</p><h3 id="异构网络互联" tabindex="-1"><a class="header-anchor" href="#异构网络互联" aria-hidden="true">#</a> 异构网络互联</h3><p>要在全球范围内把数以百万计的网络互联起来，并且能够互相通信，是一项非常复杂的任务，要解决许多问题</p><p>用户的需求是多样的，没有一种单一的网络能适应所有用户的求；<strong>网络层需要将这些异构的网络实现互联</strong></p><p>网络互联：<u>将多个计算机网络，通过一定的方法，用通信处理设备（即中间设备）相互连接起来</u>，构成更大的网络系统</p><p>中间设备又称中间系统或中继系统，根据所在的层次，中继系统分为以下 4 种：</p><ol><li>物理层中继系统：<strong>中继器，集线器 Hub</strong></li><li>数据链路层中继系统：<strong>网桥或交换机</strong></li><li>网络层中继系统：<strong>路由器</strong></li><li>网络层以上的中继系统：<strong>网关</strong></li></ol><p>物理层或数据链路层的中继系统，<strong>把一个网络扩大了</strong>，但从网络层的角度看，它<strong>仍然是同一个网络</strong>，不称之为网络互联</p><p>网络互联指用<u>路由器进行网络互联和路由选择</u>，路由器是一台专用计算机，用于在互联网中进行路由选择</p><p>注意：由于历史原因，许多有关 TCP/IP 的文献也把网络层的路由器称为网关</p><p>TCP/IP 在网络互联上的做法是在<strong>网络层（IP 层）采用标准化协议</strong>，但<strong>相互连接的网络可以是异构的</strong></p><p>计算机网络通过一些路由器进行互联，且都<strong>使用相同的网际协议 IP</strong>，可以把互联后的计算机网络视为一个虚拟 IP 网络</p><figure><img src="'+i+'" alt="image-20211208214938510" tabindex="0" loading="lazy"><figcaption>image-20211208214938510</figcaption></figure><p>虚拟互联网络就是<strong>逻辑互联网络</strong>，即虽然物理网络的<strong>异构性是存在的</strong>，但是<strong>通过 IP 就可以在网络层上让它们看起来是一个网络</strong>，这种使用 IP 的虚拟互联网络可简称为 IP 网络</p><p>虚拟互联网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，看不见互联的具体的网络异构细节</p><p>选择题：要求路由器互联的多个局域网的<strong>物理层、数据链路层、物理层可以不同，但高层要相同</strong>，因为路由器不能处理高层</p><h3 id="路由与转发" tabindex="-1"><a class="header-anchor" href="#路由与转发" aria-hidden="true">#</a> 路由与转发</h3><p>路由器主要完成两个功能：路由选择：确定转发路径；分组转发：分组到达时所采取的动作</p><ol><li>路由选择：按照复杂的分布式算法，根据相邻路由器所得到的关于整个网络拓扑的变化情况，<strong>动态地改变所选择的路由</strong></li><li>分组转发：指路由器<strong>根据转发表</strong>将用户的 IP 数据报<strong>从合适的端口转发出去</strong></li></ol><p>路由表是根据路由选择算法得出的，而<strong>转发表是从路由表得出的</strong></p><p>转发表的结构使<strong>查找过程最优化</strong>，路由表则需要对<strong>网络拓扑变化的计算最优化</strong></p><p>在讨论路由选择的原理时，往往不去区分转发表和路由表，而是笼统地使用路由表一词</p><h3 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制" aria-hidden="true">#</a> 拥塞控制</h3><p>在通信子网中，因出现过量的分组而引起网络性能下降的现象称为<strong>拥塞</strong></p>',28),y=s("p",null,[n("当路由器速率 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msub",null,[s("mi",null,"r"),s("mi",null,"m")])]),s("annotation",{encoding:"application/x-tex"},"r_m")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.5806em","vertical-align":"-0.15em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1514em"}},[s("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight"},"m")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])])])])]),n(" 接近带宽 R 时，平均时延急剧增加，大量的分组被丢弃（路由缓冲有限），整个网络的吞吐量会骤降")],-1),B=t('<figure><img src="'+l+'" alt="image-20211208215140345" tabindex="0" loading="lazy"><figcaption>image-20211208215140345</figcaption></figure><p>判断网络是否进入拥塞状态的方法是，<strong>观察网络的吞吐量与网络负载的关系</strong>：</p><ul><li>随着网络负载的增加，网络的吞吐量也增加，但明显<strong>小于正常的吞吐量</strong>，那么网络就可能已进入<strong>轻度拥塞状态</strong></li><li>吞吐量随着网络负载的<strong>增大而下降</strong>，那么网络就可能已进入<strong>拥塞状态</strong></li><li>网络的负载继续增大，而网络的吞吐量<strong>下降到零</strong>，那么网络就可能已进入<strong>死锁状态</strong></li></ul><p>拥塞控制主要解决的问题是如何<strong>获取网络中发生拥塞的信息</strong>，从而利用这些信息进行控制</p><p>拥塞控制的作用是确保子网能够承载所达到的流量，这是一个<strong>全局性的过程</strong>，单一地增加资源并不能解决拥塞</p><p>流量控制和拥塞控制的区别：</p><ul><li>流量控制：在发送端和接收端之间的<strong>点对点通信量</strong>的控制，如抑制发送端发送数据的速率，以便使接收端来得及接收</li><li>拥塞控制：确保通信子网能够传送待传送的数据，是一个<strong>全局性的问题</strong></li></ul><p>拥塞控制的方法有两种：</p><ol><li><p>开环控制：<strong>事先将有关发生拥塞的因素考虑周到</strong>，力求网络在工作时不产生拥塞</p><p>一种<strong>静态的预防方法</strong>，一旦整个系统启动并运行，中途就不再需要修改，做决定时<strong>不考虑当前网络的状态</strong></p><p>开环控制手段包括确定何时可接收新流量、何时可丢弃分组及丢弃哪些分组，确定何种调度策略等</p></li><li><p>闭环控制：<strong>事先不考虑有关发生拥塞的各种因素</strong>，采用监测网络系统去监视，<strong>是一种动态的方法</strong></p><p>及时检测哪里发生了拥塞，然后将拥塞信息传到合适的地方，以便调整网络系统的运行，并解决出现的问题</p></li></ol><h2 id="路由算法" tabindex="-1"><a class="header-anchor" href="#路由算法" aria-hidden="true">#</a> 路由算法</h2><h3 id="静态路由与动态路由" tabindex="-1"><a class="header-anchor" href="#静态路由与动态路由" aria-hidden="true">#</a> 静态路由与动态路由</h3><p>路由器转发分组是通过路由表转发的，而路由表是通过各种算法得到的</p><p>从能否随网络的通信量或拓扑自适应地进行调整变化来划分，路由算法可以分为如下两大类：</p><ol><li><p>静态路由算法，非自适应路由算法：<strong>由网络管理员手工配置的路由信息</strong></p><p>当发生变化时，网络管理员需要手工去修改路由表中相关的静态路由信息，用于简单的小型网络</p><p>优点：简便和开销较小，在<strong>拓扑变化不大的小网络中运行效果很好</strong></p></li><li><p>动态路由算法，自适应路由算法：指路由器上的路由表项是<strong>按照一定的算法计算出来的</strong>，且会<strong>不断更新</strong></p><p>优点：改善网络的性能并有助于流量控制；缺点：算法复杂，<strong>增加网络的负担</strong></p></li></ol><p>常用的动态路由算法可分为两类：距离-向量路由算法和链路状态路由算法</p><h3 id="距离-向量路由算法" tabindex="-1"><a class="header-anchor" href="#距离-向量路由算法" aria-hidden="true">#</a> 距离-向量路由算法</h3><p>距离-向量路由算法中，所有结点都<strong>定期</strong>地将它们的<strong>整个路由选择表</strong>传送给所有与之<strong>直接相邻的结点</strong></p><p>这种路由选择表包含：每条路径的目的地；路径的代价，也称距离</p><p>这种算法中，<strong>所有结点都必须参与距离向量交换</strong>，以保证路由的有效性和一致性，在下列情况更新它们的路由选择表：</p><ol><li><strong>被通告一条新的路由</strong>，该路由在本结点的路由表中不存在，此时本地系统<strong>加入这条新的路由</strong></li><li>被通告一条已有路由，但通告的路由<strong>距离更短，则替换原有路由</strong></li></ol><p>距离-向量路由算法的实质：<strong>迭代计算一条路由中的站段数或延迟时间</strong>，从而得到到达一个目标的最短通路</p><ul><li>第一次交换得到 1 跳的路由信息，第 n 此交换得到 n 跳的路由信息</li></ul><p><strong>更新报文的大小与通信子网的结点个数成正比</strong>，大的通信子网将导致很大的更新报文，因此<strong>适合于小型网络</strong></p><p>最常见的距离-向量路由算法是 RIP 算法，它采用跳数作为距离的度量</p><h3 id="链路状态路由算法" tabindex="-1"><a class="header-anchor" href="#链路状态路由算法" aria-hidden="true">#</a> 链路状态路由算法</h3><p>链路状态路由算法：每个参与该算法的结点都<strong>具有完全的网络拓扑信息</strong>，它们执行下述两项任务：</p><ol><li><strong>主动测试所有邻接结点的状态</strong>，两个共享一条链接的结点是相邻结点</li><li><strong>定期地将链路状态传播给所有其他结点</strong>；典型的链路状态算法是 OSPF 算法</li></ol><p>每个结点都用这种方式从网上所有其他的结点接收包含直接链路状态的路由选择信息</p><ul><li>每个结点都群发连接的链路状态，因此<strong>每个结点都会接受到整个网络的拓扑消息</strong>，使用 Dijkstra 计算路由表</li></ul><p>一旦链路状态发生变化，结点就对更新的网络图<strong>利用 Dijkstra 最短路径算法重新计算路由</strong></p><p>链路状态路由算法主要有三个特征：</p><ol><li>向本自治系统中<strong>所有路由器</strong>发送信息，这里使用的方法是<strong>泛洪法</strong></li><li>发送的信息是<strong>与路由器相邻的所有路由器的链路状态</strong>，但这只是路由器所知道的部分信息</li><li>只有当<strong>链路状态发生变化时，路由器才向所有路由器发送此信息</strong></li></ol><p>链路状态路由算法的主要优点是：</p><ol><li>每个路由结点都使用同样的原始状态数据独立地计算路径，而<strong>不依赖中间结点的计算</strong></li><li>链路状态报文不加改变地传播，因此采用该算法易于查找故障</li><li>当一个结点从所有其他结点接收到报文时，它可以<strong>在本地立即计算正确的通路</strong>，保证一步汇聚</li><li>链路状态<strong>报文大小只与邻接结点数有关</strong>，因此链路状态算法比距离-向量算法有更好的规模可伸展性</li></ol><p>距离-向量路由算法与链路状态路由算法的比较：在距离-向量路由算法中，每个结点仅与它的<strong>直接邻居</strong>交谈；在链路状态路由算法中，每个结点通过广播的方式与<strong>所有其他结点</strong>交谈；相比之下，距离-向量路由算法有可能遇到<strong>路由环路</strong>等问题</p><h3 id="层次路由" tabindex="-1"><a class="header-anchor" href="#层次路由" aria-hidden="true">#</a> 层次路由</h3><p>因特网<strong>将整个互联网划分为许多较小的自治系统</strong>（包含多个局域网），每个自治系统<strong>决定本系统内使用的路由选择协议</strong></p><p>如果两个自治系统需要通信，那么就需要一种在两个自治系统之间的协议来屏蔽这些差异</p><p>因特网把路由选择协议划分为两大类：</p><ol><li><strong>自治系统内部使用</strong>的路由选择协议称为<strong>内部网关协议 <code>IGP</code></strong>，也称域内路由选择，具体的协议有 RIP 和 OSPF 等</li><li><strong>自治系统之间使用</strong>的路由选择协议称为<strong>外部网关协议 <code>EGP</code></strong>，也称域间路由选择，处理自治系统间的交换，具体的协议有 <code>BGP</code></li></ol><p>使用层次路由时，使用 OSPF <strong>把一个自治系统再划分为多个区域</strong>，每个路由器都<strong>仅知道在本区域内转发的细节</strong></p><p>划分区域会令交换信息种类增多，和 OSPF 更复杂，但使区域内部交换路由信息的通信量大大减小，因而使 OSPF 协议能够用于规模很大的自治系统中</p><h2 id="ipv4" tabindex="-1"><a class="header-anchor" href="#ipv4" aria-hidden="true">#</a> IPv4</h2><h3 id="ipv4-分组" tabindex="-1"><a class="header-anchor" href="#ipv4-分组" aria-hidden="true">#</a> IPv4 分组</h3><h4 id="ipv4-分组的格式" tabindex="-1"><a class="header-anchor" href="#ipv4-分组的格式" aria-hidden="true">#</a> IPv4 分组的格式</h4><p>一个 IP 分组由首部和数据部分组成，首部<strong>前一部分的长度固定，共 <code>20B</code></strong>，是所有 IP 分组必须具有的</p><p>在首部固定部分的后面是一些可选字段，其长度可变，用来提供错误检测及安全等机制</p><figure><img src="'+p+'" alt="image-20211210135127303" tabindex="0" loading="lazy"><figcaption>image-20211210135127303</figcaption></figure><p>IP 首部的部分重要字段含义如下：</p><ol><li><p>版本：指 IP 的版本，目前广泛使用的版本号为 4</p></li><li><p>首部长度：<strong>以 <code>32bit</code> 为单位</strong>，最大值为 <code>60B</code>，常用的首部长度是 <code>20B</code> 即 101</p></li><li><p>总长度：<strong>首部和数据之和的长度，单位为字节</strong>，数据报的最大长度为 <code>65535B</code></p></li><li><p>标识：一个计数器，每产生一个数据报就加 1，并赋值给标识字段（不是序号，分片用的）</p></li><li><p>标志：</p><p>标志字段的最低位为 <code>MF</code>，<strong><code>MF</code> = 1 表示后面还有分片，<code>MF</code> = 0 表示最后一个分片</strong></p><p>标志字段中间的一位是 <code>DF</code>，只有当 <strong><code>DF</code> = 0 时才允许分片</strong></p></li><li><p>片偏移：较长的分组在分片后，<strong>某片在原分组中数据部分的相对位置</strong>，片偏移<strong>以 8 个字节为偏移单位</strong></p></li><li><p>生存时间 TTL：数据报在网络中<strong>可通过的路由器数的最大值</strong>，确保分组<strong>不会永远在网络中循环</strong></p><p>路由器在<strong>转发分组前，先把 TTL 减 1</strong>，若 TTL 被减为 0，则该分组必须丢弃</p></li><li><p>协议：指出此分组携带的数据<strong>使用何种协议</strong></p><figure><img src="'+g+'" alt="image-20211210142601351" tabindex="0" loading="lazy"><figcaption>image-20211210142601351</figcaption></figure></li><li><p>首部校验和：IP 数据报的首部校验和<strong>只校验分组的首部</strong>，而不校验数据部分</p></li><li><p>源地址字段：标识发送方的 IP 地址</p></li><li><p>目的地址字段：标识接收方的 IP 地址</p></li></ol><h4 id="ip-数据报分片" tabindex="-1"><a class="header-anchor" href="#ip-数据报分片" aria-hidden="true">#</a> IP 数据报分片</h4><p>一个数据链路层数据报能承载的最大数据量称为最大传送单元 MTU</p><p>IP 的数据报最终会封装成帧，<strong>数据报大于 MTU 时就要分成多份</strong>，这就是给数据报<strong>分片</strong></p><p>为了让接收方可以把拆开的数据报可以合起来，让它们<strong>每个都带个 IP 头</strong>，形成的小 IP 数据报叫做<strong>片</strong></p><ul><li>创建一个 IP 数据报时，源主机为该数据报<strong>加上一个标识号</strong></li><li>当一个<strong>路由器或主机</strong>需要将一个数据报分片时，形成的每个数据报<strong>都具有原始数据报的标识号</strong></li><li><strong>目的主机</strong>收到来自同一发送主机的一批数据报时，<strong>检查数据报的标识号来确定属于同一个原始数据报的片</strong></li><li><strong>目的主机</strong>在对片进行重组时，<strong>使用片偏移字段来确定片应放在原始 IP 数据报的哪个位置</strong></li></ul><p>如一个长 <code>4000B</code> 的 IP 数据报，首部部分 <code>20B</code> 数据部分 <code>3980B</code> 到达一个路由器，需要转发到一条 MTU 为 <code>1500B</code> 的链路上，假定原始数据报的标识号为 777 那么分成的 3 片如下：</p><figure><img src="'+e+'" alt="image-20211210135331709" tabindex="0" loading="lazy"><figcaption>image-20211210135331709</figcaption></figure><p>额外：分片时会修改<strong>总长度、标志、片偏移字段</strong>；如上面第二个的总长度为 1500，标志为 011，片偏移为 185</p><h4 id="网络层转发分组的流程" tabindex="-1"><a class="header-anchor" href="#网络层转发分组的流程" aria-hidden="true">#</a> 网络层转发分组的流程</h4><p>网络层的路由器执行的分组转发算法如下：</p><ol><li><p>从数据报的首部提取目的主机的 IP 地址 D，得出目的网络地址 N</p></li><li><p>若网络 N 与此路由器<strong>直接相连</strong>，则直接交付给目的主机 D，这称为路由器的直接交付；否则是间接交付，执行步骤 3</p><p>思考：<strong>直接交付</strong>指目的网络在与路由器直接连接的网络中，<strong>不需要转发</strong>；<strong>间接交付</strong>指<strong>需要给其他路由器转发</strong></p></li><li><p>若路由表中有目的地址为 D 的<strong>特定主机路由</strong>，则交付给路由表中所指明的下一跳路由器；否则，执行步骤 4</p></li><li><p>若路由表中有<strong>到达网络 N 的路由</strong>，则交付给路由表指明的下一跳路由器；否则，执行步骤 5</p></li><li><p>若路由表中有一个<strong>默认路由</strong>，则交付给路由表中所指明的默认路由器；否则，执行步骤 6</p></li><li><p>报告转发分组出错</p></li></ol><p>注意：这里拿到的下一条地址<strong>用来转换成 MAC 地址进行通信</strong>，而且如果使用的是 PPP 协议的话，直接通过对应的端口转发</p><h4 id="ipv4-地址与-nat" tabindex="-1"><a class="header-anchor" href="#ipv4-地址与-nat" aria-hidden="true">#</a> IPv4 地址与 NAT</h4><h5 id="ipv4-地址" tabindex="-1"><a class="header-anchor" href="#ipv4-地址" aria-hidden="true">#</a> IPv4 地址</h5><p>IP 地址：连接到因特网上的<strong>每台主机或路由器的一个 32 比特的唯一标识符</strong>，IP 地址又分为 A、B、C、D、E 五类</p>',65),F=s("p",{"&lt;网络号,":"","&lt;主机号":""},[n("无论哪类 IP 地址，都由"),s("strong",null,"网络号和主机号"),n("两部分组成，即 IP 地址 =")],-1),G=t('<p><strong>网络号标志主机或路由器所连接到的网络</strong>，它在整个因特网范围内必须是唯一的</p><p><strong>主机号标志该主机或路由器</strong>，它在所在的网络内是唯一的</p><figure><img src="'+c+'" alt="image-20211210135515811" tabindex="0" loading="lazy"><figcaption>image-20211210135515811</figcaption></figure><p>在各类 IP 地址中，有些 IP 地址具有特殊用途，不用做主机的 IP 地址：</p><ul><li><p>主机号全为 0 表示<strong>本网络本身</strong>，都不能做</p></li><li><p>主机号全为 1 表示<strong>本网络的广播地址</strong>，又称直接广播地址，只能做目的地址</p></li><li><p>网络号全为 0 表示<strong>本网络内某个特定主机</strong>，只能做源地址</p></li><li><p>127.0.0.0 保留为环回自检地址，此地址<strong>表示任意主机本身</strong>，都可以做</p><p>目的地址为环回地址的 IP 数据报永远不会出现在任何网络上</p></li><li><p>32 位全为 0 表示本<strong>网络上的本主机</strong>，只能做源地址</p></li><li><p>32 位全为 1 表示<strong>整个 TCP/IP 网络的广播地址</strong>，又称受限广播地址，只能做目的地址</p><p>实际使用时，由于路由器对广播域的隔离，255.255.255.255 等效为本网络的广播地址</p></li></ul><p>常用的三种类别 IP 地址的使用范围如下：</p><figure><img src="'+d+'" alt="image-20211210135552518" tabindex="0" loading="lazy"><figcaption>image-20211210135552518</figcaption></figure><p>每类地址的<strong>网络号不可委派而减 1</strong>，用于表示本网络内某个特定的主机；A 类网络因为 <strong>127 被占用所以减 2</strong></p><p>IP 地址有以下重要特点：</p><ol><li><p>每个 IP 地址都由网络号和主机号两部分组成，是一种<strong>分等级的地址结构</strong>，分等级的好处是：</p><ol><li><strong>IP 地址管理机构只分配网络号</strong>，而主机号由<strong>该网络的单位自行分配</strong>，方便了 IP 地址的管理</li><li>路由器<strong>仅根据网络号来转发分组</strong>，从而减小了路由表所占的存储空间</li></ol></li><li><p>IP 地址是<strong>标志一台主机或路由器和一条链路的接口</strong></p><p>一台主机同时连接到两个网络时，该主机就必须<strong>同时具有两个不同网络号的 IP 地址</strong>，路由器也是一样</p></li><li><p>用转发器或桥接器连接的若干 LAN 仍然是同一个网络，IP 地址的网络号必须相同，但主机号必须不同</p></li><li><p>在 IP 地址中，<strong>所有分配到网络号的网络都是平等的</strong></p></li><li><p><strong>同一个局域网</strong>上的主机或路由器的 IP 地址中的<strong>网络号必须一样</strong>；路由器的<strong>每个端口都有一个不同网络号的 IP 地址</strong></p></li></ol><h5 id="网络地址转换" tabindex="-1"><a class="header-anchor" href="#网络地址转换" aria-hidden="true">#</a> 网络地址转换</h5><p>网络地址转换 NAT 是指<strong>通过将专用网络地址转换为公用地址从而对外隐藏内部管理的 IP 地址</strong></p><p>它使得整个专用网只需要一个全球 IP 地址就可以与因特网连通，它隐藏了内部网络结构，降低内部网络受到攻击的风险</p><p>划出了部分 IP 地址为私有 IP 地址，<strong>私有 IP 地址只用于 LAN</strong>，并且<strong>允许私有 IP 地址被重用</strong>，有效解决 IP 地址不足的问题</p><p>私有IP地址网段如下：</p><ul><li>A类：1 个 A 类网段，即 <strong>10</strong>.0.0.0 ~ <strong>10</strong>.255.255.255</li><li>B类：16 个 B 类网段，即 <strong>172.16</strong>.0.0 ~ <strong>172.31</strong>.255.255</li><li>C 类：256 个 C 类网段，即 <strong>192.168.0</strong>.0 ~ <strong>192.168.255</strong>.255</li></ul><p>在因特网中的所有路由器，<strong>对目的地址是私有地址的数据报一律不进行转发</strong></p><p>这种采用私有 IP 地址的互联网络称为<strong>专用互联网或本地互联网</strong>，私有 IP 地址也称<strong>可重用地址</strong></p><p>使用 NAT 时需要在专用网连接到因特网的路由器上<strong>安装 NAT 软件</strong>，NAT 路由器<strong>至少有一个有效的外部全球地址</strong></p><p>使用本地地址的主机和外界通信时，NAT 路由器使用 NAT 转换表<strong>将本地地址转换成全球地址</strong>，或<strong>将全球地址转换成本地地址</strong></p><p>NAT 转换表中存放着 {本地 IP 地址: 端口} 到 {全球 IP 地址: 端口} 的映射，让<strong>多个私有 IP 地址映射到同一个全球 IP 地址</strong></p><p>注意：普通路由器在转发 IP 数据报时，<strong>不改变源 IP 和目的 IP</strong>；NAT 路由器在转发 IP 数据报时，<strong>一定更换 IP 地址</strong></p><ul><li>如上图，发送时源 IP 从 <code>192.168.0.x</code> 变成 <code>138.76.29.7</code>；接受时目的 IP 从 <code>138.76.29.7</code> 变成 <code>192.168.0.x</code></li></ul><p>选择题：NAT 表项需要管理员添加，若主机发送的分组在 NAT 表项中找不到，则不转发丢弃</p><h3 id="子网划分与子网掩码、cidr" tabindex="-1"><a class="header-anchor" href="#子网划分与子网掩码、cidr" aria-hidden="true">#</a> 子网划分与子网掩码、CIDR</h3><h4 id="子网划分" tabindex="-1"><a class="header-anchor" href="#子网划分" aria-hidden="true">#</a> 子网划分</h4><p>在 IP 地址中又增加了一个子网号字段，使两级 IP 地址变成了三级 IP 地址，这种做法称为<strong>子网划分</strong></p><p>子网划分的基本思路如下：</p><ul><li><p>子网划分纯属一个单位内部的事情，单位对外仍然表现为没有划分子网的网络</p></li><li><p><strong>从主机号借用若干比特作为子网号</strong>，三级 IP 地址的结构如下：IP 地址 = {<strong>&lt;网络号&gt;, &lt;子网号&gt;, &lt;主机号&gt;</strong>}</p></li><li><p>其他网络根据 IP 数据报的目的网络号，先发送给连接到本单位网络上的路由器</p><p>该路由器收到 IP 数据报后，按目的网络号和子网号找到目的子网，把 IP 数据报直接交付给目的主机</p></li></ul><p>注意：</p><ol><li><p>划分子网不改变 IP 地址原来的网络号，因此从一个 IP 地址本身或 IP 数据报的首部，其网络看不出是否进行了子网划分</p></li><li><p>RFC 950 规定，对分类的 IPv4 地址进行子网划分时，子网号不能为全 1 或全 0</p><p>这是因为无法分清 192.168.1.255 是子网的广播还是本网络的广播，所以去掉子网号全 1 全 0 的情况</p><p>无类别域间路由 CIDR 消除了 A/B/C 类型网络，就可以使用全 1 和全 0 了，但要注意路由器是否支持 CIDR</p></li><li><p>不论是分类的 IPv4 地址还是 CIDR，其子网中的主机号为全 0 或全 1 的地址都不能被指派</p><p>子网中<strong>主机号全 0 的地址为子网的网络号，主机号全 1 的地址为子网的广播地址</strong></p></li></ol><p>选择题：使用变长子网划分，得到的最小子网的可分配 IP 地址数最少</p><ul><li>变长子网划分：指 0、10、110、111 这样的划分方式</li></ul><h4 id="子网掩码" tabindex="-1"><a class="header-anchor" href="#子网掩码" aria-hidden="true">#</a> 子网掩码</h4><p>使用子网掩码来表达对原网络中主机号的借位，子网掩码长 <code>32bit</code> 的二进制串，它由一串 1 和跟随的一串 0 组成</p><p>其中 1 对应于 IP 地址中的网络号及子网号，而 0 对应于主机号，<strong>将 IP 地址和子网掩码逐位与，可得出子网的网络地址</strong></p><p>因特网标准规定：<strong>所有的网络都必须使用子网掩码</strong>，如果一个网络未划分子网，那么就采用默认子网掩码，<u>A、B、C 类地址的默认子网掩码分别为 255.0.0.0、255.255,0.0、255.255.255.0</u></p><p>路由器在相互之间<strong>交换路由信息时子网掩码也要告诉对方</strong></p><p>在使用子网掩码的情况下：</p><ol><li>一台主机在设置 IP 地址信息的同时，必须设置子网掩码</li><li>同属于一个子网的<strong>所有主机及路由器的相应端口</strong>，必须设置相同的子网掩码</li><li>路由器的路由表中，所包含信息的主要内容必须有目的<strong>网络地址、子网掩码、下一跳地址</strong></li></ol><p>使用子网掩码时路由器的分组转发算法如下：</p><ol><li>从收到的分组的首部提取目的 IP 地址，记为 D</li><li><strong>用各相邻的网络的子网掩码和 D 逐位相与</strong>，若<strong>与其网络地址匹配</strong>，则将分组直接交付，否则间接交付，执行 3</li><li>若路由表中有目的地址为 D 的<strong>特定主机路由</strong>，则转发给路由表中所指明的下一跳路由器，否则，执行 4</li><li>对路由表中的<strong>每一行的子网掩码和 D 逐位相与</strong>，若结果<strong>与该行的网络地址匹配</strong>，则转发给下一跳路由器；否则，执行 5</li><li>若路由表中有一个默认路由，则转发给<strong>默认路由器</strong>；否则，执行 6</li><li>报告转发分组出错</li></ol><h4 id="无分类域间路由选择-cidr" tabindex="-1"><a class="header-anchor" href="#无分类域间路由选择-cidr" aria-hidden="true">#</a> 无分类域间路由选择 CIDR</h4><p>无分类域间路由选择是一种<strong>消除传统 A、B、C 类网络划分</strong>，可以在软件的支持下<strong>实现超网构造</strong>的一种地址的划分方法</p><p>它可以大幅度提高 IP 地址空间的利用率，减小路由器的路由表大小，提高路由转发能力</p><p>CIDR 的主要特点如下：</p>',46),T=s("ol",null,[s("li",null,[s("p",null,"消除了传统 A、B、C 类地址及划分子网的概念，因而可以更有效地分配 IPv4 的地址空间"),s("p",{"&lt;网络前缀,":"","&lt;主机号":""},[n("CIDR "),s("strong",null,"使用网络前缀的概念代替子网络"),n("的概念，IP 地址的无分类两级编址为：IP =")]),s("p",null,[n("CIDR 还使用斜线记法，即 "),s("strong",null,"IP 地址/网络前缀所占比特数"),n("，网络前缀所占比特数是"),s("strong",null,"子网掩码中连续 1 的个数")]),s("p",null,"对于 128.14.32.5/20 这个地址，通过逐位相与的方法得到该地址的网络前缀："),s("p",{class:"katex-block"},[s("span",{class:"katex-display"},[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mrow",null,[s("mtext",null,"逐位与"),s("mrow",null,[s("mo",{fence:"true"},"{"),s("mtable",{rowspacing:"0.16em",columnalign:"center",columnspacing:"1em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mi",null,"I"),s("mi",null,"P"),s("mo",null,"="),s("mn",null,"10000000.00001110.00100000.0000011")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"false"},[s("mrow",null,[s("mtext",null,"掩码"),s("mo",null,"="),s("mn",null,"11111111.11111111.11110000.00000000")])])])])])]),s("mspace",{linebreak:"newline"}),s("mtext",null,"网络前缀"),s("mo",null,"="),s("mn",null,"10000000.00001110.00100000.00000000"),s("mtext",null,"（"),s("mn",null,"128.14.32.0"),s("mtext",null,"）")]),s("annotation",{encoding:"application/x-tex"}," 逐位与\\left\\{\\begin{matrix}IP=10000000.00001110.00100000.0000011\\\\掩码=11111111.11111111.11110000.00000000\\end{matrix}\\right. \\\\网络前缀=10000000.00001110.00100000.00000000（128.14.32.0） ")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"2.4em","vertical-align":"-0.95em"}}),s("span",{class:"mord cjk_fallback"},"逐位与"),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},[s("span",{class:"delimsizing size3"},"{")]),s("span",{class:"mord"},[s("span",{class:"mtable"},[s("span",{class:"col-align-c"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.45em"}},[s("span",{style:{top:"-3.61em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal",style:{"margin-right":"0.07847em"}},"I"),s("span",{class:"mord mathnormal",style:{"margin-right":"0.13889em"}},"P"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"10000000.00001110.00100000.0000011")])]),s("span",{style:{top:"-2.41em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord"},[s("span",{class:"mord cjk_fallback"},"掩码"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mord"},"11111111.11111111.11110000.00000000")])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.95em"}},[s("span")])])])])])]),s("span",{class:"mclose nulldelimiter"})])]),s("span",{class:"mspace newline"}),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord cjk_fallback"},"网络前缀"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6833em"}}),s("span",{class:"mord"},"10000000.00001110.00100000.00000000"),s("span",{class:"mord cjk_fallback"},"（"),s("span",{class:"mord"},"128.14.32.0"),s("span",{class:"mord cjk_fallback"},"）")])])])])]),s("p",null,[s("strong",null,"分配到一个 CIDR 地址块的组织，仍可以在本组织内根据需要再划分出一些子网")]),s("p",null,"如某组织分配到地址块/20，再继续划分为 8 个子网后，每个子网的网络前缀是 23 位，全 0 和全 1 的主机地址不使用")]),s("li",null,[s("p",null,[s("strong",null,"将网络前缀都相同的连续 IP 地址组成 CIDR 地址块"),n("，这种地址的聚合称为"),s("strong",null,"路由聚合"),n("或"),s("strong",null,"构成超网")]),s("p",null,[n("路由聚合让"),s("strong",null,"路由表的一个项目表示多个传统分类地址的路由"),n("，减少路由器之间的路由选择信息的交换，提高网络性能")])])],-1),N=s("p",null,[n("如下图："),s("code",null,"R1"),n(" 有到网络 1、2 的两个路由表项，"),s("strong",null,[n("下一跳都是 "),s("code",null,"R2")]),n("，所以使用路由聚合合并位一个路由表项 "),s("code",null,"206.1.0.0/16")],-1),H=s("figure",null,[s("img",{src:h,alt:"image-20211210140053130",tabindex:"0",loading:"lazy"}),s("figcaption",null,"image-20211210140053130")],-1),S=s("p",null,[n("CIDR 地址块中的地址数一定是 "),s("strong",null,"2 的整数次幂"),n("，实际可指派的地址数通常为 "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"2"),s("mi",null,"N")]),s("mo",null,"−"),s("mn",null,"2")]),s("annotation",{encoding:"application/x-tex"},"2^N-2")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.9247em","vertical-align":"-0.0833em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"2"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8413em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.10903em"}},"N")])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"−"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2")])])]),n("，N 表示主机号的位数")],-1),O=t('<p>优点：网络前缀长度的灵活性；上层网络的路由表的项目较少；内部又可采用延长网络前缀的方法来灵活地划分子网</p><p>最长前缀匹配，最佳匹配：使用 CIDR 时，路由表中的每个项目由网络前缀和下一跳地址组成：</p><ul><li>若<strong>在查找路由表时得到不止一个匹配结果，就选择网络前缀最长的那一个</strong>（地址块越小，路由越具体）</li></ul><p>CIDR 查找路由表的方法：为了更加有效地查找最长前缀匹配，将无分类编址的路由表存放在一种<strong>层次式数据结构</strong>中，然后自上而下地按层次进行查找，常用的是二叉线索</p><h3 id="arp、dhcp-与-icmp" tabindex="-1"><a class="header-anchor" href="#arp、dhcp-与-icmp" aria-hidden="true">#</a> ARP、DHCP 与 ICMP</h3><h4 id="ip-地址与硬件地址" tabindex="-1"><a class="header-anchor" href="#ip-地址与硬件地址" aria-hidden="true">#</a> IP 地址与硬件地址</h4><p>IP 地址是网络层使用的地址，它是<strong>分层次等级的</strong>；硬件地址是数据链路层使用的地址，它是<strong>平面式的</strong></p><p>通过数据封装，把 IP 数据报分组封装为 MAC 帧后，数据链路层看不见数据报分组中的 IP 地址</p><p><strong>在网络层使用 IP 地址来完成寻址</strong>，而<strong>在目标 LAN 中通过数据链路层的 MAC 地址以广播方式寻址</strong>，以提高路由选择的效率</p><ol><li>在 IP 层抽象的互联网上只能看到 IP 数据报</li><li>路由器只<strong>根据目的 IP 地址的网络号进行路由选择</strong></li><li>在局域网的数据链路层，只能看见 MAC 帧，因此 IP 数据报在被路由器转发时，<strong>帧的 MAC 地址是不断改变</strong>的</li><li>尽管互联在一起的网络的硬件地址体系各不相同，但 <strong>IP 层抽象的互联网却屏蔽了下层这些复杂的细节</strong></li></ol><p>注意：路由器由于互联多个网络，因此它不仅<strong>有多个 IP 地址，也有多个硬件地址</strong></p><h4 id="地址解析协议-arp" tabindex="-1"><a class="header-anchor" href="#地址解析协议-arp" aria-hidden="true">#</a> 地址解析协议 ARP</h4><p>在实际网络的链路上传送数据帧时，<strong>必须使用硬件地址</strong>，因此使用<strong>地址解析协议 ARP 来完成 IP 地址到 MAC 地址的映射</strong></p><p>每台主机都设有 <strong>ARP 高速缓存</strong>，用来存放<strong>本局域网上</strong>各主机和路由器的 <strong>IP 地址到 MAC 地址的映射表</strong>，称 ARP 表</p><p>ARP 工作在网络层，主机 A 向本局域网的主机 B 发送 IP 数据报的过程：</p><ol><li>先<strong>在 ARP 高速缓存中查看有无主机 B 的 IP 地址</strong>，有就将此硬件地址写入MAC 帧，并把 MAC 帧发往此硬件地址</li><li>若没有，就把帧的<strong>目的 MAC 地址设为 FF-FF-FF-FF-FF-FF</strong> 并<strong>广播 ARP 请求分组</strong>，里面包含 B 的 IP</li><li>B 收到该 ARP 请求后，对比 IP 发现是自己，<strong>向 A 发出响应 ARP 分组</strong>，包含 B 的 IP 与 MAC 地址的映射关系</li><li>主机 A 在<strong>收到后将此映射写入 ARP 缓存</strong>，回到 1</li></ol><p>额外：ARP 表每过一段时间会进行刷新，这是为了防止其他主机的 MAC 地址更换</p><p>注意：ARP 由于看到了 IP 地址，所以它工作在<strong>网络层</strong>；NAT 路由器由于看到了端口，所以它工作在<strong>传输层</strong></p><p>ARP 的 4 种典型情况总结如下：</p><ol><li>主机发送 IP 数据报给本网络的主机：用 ARP <strong>找到目的主机的硬件地址</strong></li><li>主机发送 IP 数据报给另一个网络的主机：用 ARP 获取<strong>网关路由器的硬件地址</strong>，剩下的工作由该路由器来完成</li><li>路由器发送 IP 数据报给本网络的主机：用 ARP <strong>找到目的主机的硬件地址</strong></li><li>路由器发送 IP 数据报给另一个网络的主机：用 ARP 获取<strong>下一跳路由器的硬件地址</strong>，剩下的工作由该路由器完成</li></ol><p>从 IP 地址到硬件地址的解析是自动进行的，主机的用户并不知道这种地址解析过程</p><p>思考：谁发送数据帧源 MAC 地址就是谁；要把数据帧发送给谁，目的 MAC 地址就是谁；PPP 协议除外</p><p>思考：<u>通过子网掩码发现不是同一网络时，用网关 IP 拿到 MAC 地址，然后把数据报转发给网关</u></p><h4 id="动态主机配置协议-dhcp" tabindex="-1"><a class="header-anchor" href="#动态主机配置协议-dhcp" aria-hidden="true">#</a> 动态主机配置协议 DHCP</h4><p>动态主机配置协议：<strong>给主机动态地分配 IP 地址</strong>，它提供了即插即用的联网机制，DHCP 是<strong>基于 UDP 的应用层协议</strong></p><p>DHCP 的工作原理如下：</p><ol><li>C/S 方式，需要 IP 地址的主机<strong>在启动时就向 DHCP 服务器广播发送发现报文</strong></li><li>广播域内主机都能收到此广播报文，但<strong>只有 DHCP 服务器才回答此广播报文</strong></li><li>DHCP 服务器先<strong>在其数据库中查找该计算机的配置信息</strong>，若找到，则返回找到的信息</li><li>若找不到，则<strong>从服务器的 IP 地址池中取一个地址分配给该计算机</strong>，DHCP 服务器的回答报文称为<strong>提供报文</strong></li></ol><p>DHCP 服务器聚合 DHCP 客户端的交换过程如下：</p><ol><li><p>DHCP 客户机<strong>广播 DHCP 发现消息</strong>，试图找到网络中的 DHCP 服务器来获得一个 IP 地址</p></li><li><p>DHCP 服务器收到 DHCP 发现消息后，向网络中<strong>广播 DHCP 提供消息</strong>，包括提供客户机的 IP 地址和相关配置信息</p></li><li><p>DHCP 客户机收到 DHCP 提供消息后，如果<strong>接受 DHCP 服务器所提供的相关参数</strong></p><p>那么<strong>广播 DHCP 请求消息</strong>向 DHCP 服务器请求提供 IP 地址（让其他 DHCP 知道选择了谁）</p></li><li><p>DHCP 服务器<strong>广播 DHCP 确认消息</strong>，将 IP 地址分配给 DHCP 客户机</p></li></ol><p>网络上有多台 DHCP 服务器时，DHCP 客户机发出的 DHCP 请求可能<strong>收到多个应答消息</strong>，DHCP 客户机<strong>挑选最先到达的</strong></p><p>DHCP 服务器<strong>分配给 DHCP 客户的 IP 地址是临时的</strong>，因此 DHCP 客户只能在一段有限的时间内使用这个分配到的 IP 地址</p><p>DHCP 称这段时间为<strong>租用期</strong>，租用期的数值应由 DHCP 服务器自己决定，DHCP 客户也可提出对租用期的要求</p><p>DHCP 执行初期，<strong>客户端不知道服务器端的 IP 地址</strong>，执行中间，<strong>客户端并未被分配 IP 地址</strong>，所以采用广播的方式</p><p>连对方的 IP 地址都不知道，更不可能使用 TCP 连接，所以使用 UDP 协议（TCP 不能发广播，UDP 可以）</p><p>额外：只有应用层才有的两种工作方式：C/S 方式和 P2P 方式</p><h4 id="网际控制报文协议-icmp" tabindex="-1"><a class="header-anchor" href="#网际控制报文协议-icmp" aria-hidden="true">#</a> 网际控制报文协议 ICMP</h4><p>为了提高 IP 数据报交付成功的机会，在网络层使用了网际控制报文协议来<strong>让主机或路由器报告差错和异常情况</strong></p><p><strong>ICMP 报文作为 IP 层数据报的数据</strong>，加上数据报的首部，组成 IP 数据报发送出去，<strong>ICMP 是 IP 层协议</strong></p><p>ICMP 报文的种类有两种：ICMP 差错报告报文和 ICMP 询问报文</p><h5 id="icmp-差错报告报文" tabindex="-1"><a class="header-anchor" href="#icmp-差错报告报文" aria-hidden="true">#</a> ICMP 差错报告报文</h5><p><strong>ICMP 差错报告报文用于</strong>目标主机或到目标主机路径上的路由器<strong>向源主机报告差错和异常情况</strong>，共有以下 5 种类型：</p><ol><li><p>终点不可达：当路由器或主机<strong>不能交付数据报</strong>时，就向源点发送<strong>终点不可达报文</strong></p></li><li><p>源点抑制：当路由器或主机<strong>由于拥塞而丢弃数据报</strong>时，就向源点发送<strong>源点抑制报文</strong>，使源点把发送速率放慢</p></li><li><p>时间超过：向源点发送<strong>时间超过报文</strong></p><p>当路由器<strong>收到生存时间为零的数据报</strong>时，丢弃该数据报外</p><p>当终点<strong>在预先规定的时间内不能收到一个数据报的全部数据报片</strong>时，丢弃已收到的数据报片</p></li><li><p>参数问题：路由器或目的主机<strong>收到的数据报的首部中有的字段的值不正确</strong>时，丢弃该数据报，向源点发送<strong>参数问题报文</strong></p></li><li><p>改变路由：路由器把<strong>改变路由报文</strong>发送给主机，让主机知道下次应<strong>将数据报发送给另外的（更好的）路由器</strong></p></li></ol><p>不应发送 ICMP 差错报告报文的几种情况如下：</p><ol><li>对 <strong>ICMP 差错报告报文</strong>不再发送 ICMP 差错报告报文</li><li>对<strong>第一个分片的数据报片的所有后续</strong>数据报片都不发送 ICMP 差错报告报文</li><li>对<strong>具有组播地址</strong>的数据报都不发送 ICMP差错报告报文</li><li>对<strong>具有特殊地址</strong>（如 127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文</li></ol><h5 id="icmp-询问报文" tabindex="-1"><a class="header-anchor" href="#icmp-询问报文" aria-hidden="true">#</a> ICMP 询问报文</h5><p>ICMP 询问报文有：<strong>回送请求和回答报文、时间戳请求和回答报文</strong>、掩码地址请求和回答报文、路由器询问和通告报文</p><ol><li>回送请求和回答报文：收到此报文的主机必须给源主机发送回送回答报文，<strong>测试目的站是否可达以及了解其相关状态</strong></li><li>时间戳请求和回答报文：请某个主机或路由器回答当前的日期和时间，<strong>进行时钟同步和测量时间</strong></li></ol><p>ICMP 的两个常见应用是分组网间探测 PING 和 Traceroute：</p><ul><li>PING：用来测试两台主机之间的连迪性，使用 ICMP <strong>回送请求和回答报文</strong></li><li>Traceroute：用来跟踪分组经过的路由，使用了 ICMP <strong>时间超过报文</strong>，通过发不同的 TTL 的数据报来跟踪</li></ul><p>注意：PING 工作在应用层，它直接使用网络层的 ICMP，Traceroute/Tracert 工作在网络层</p><h5 id="icmp-报文的格式" tabindex="-1"><a class="header-anchor" href="#icmp-报文的格式" aria-hidden="true">#</a> *ICMP 报文的格式</h5><p>ICMP 报文的格式：</p><figure><img src="'+P+'" alt="image-20211211152011561" tabindex="0" loading="lazy"><figcaption>image-20211211152011561</figcaption></figure><p>ICMP 差错报告报文格式：</p><figure><img src="'+u+'" alt="image-20211211151710543" tabindex="0" loading="lazy"><figcaption>image-20211211151710543</figcaption></figure><h2 id="ipv6" tabindex="-1"><a class="header-anchor" href="#ipv6" aria-hidden="true">#</a> IPv6</h2><h3 id="ipv6-的主要特点" tabindex="-1"><a class="header-anchor" href="#ipv6-的主要特点" aria-hidden="true">#</a> IPv6 的主要特点</h3><p>解决 IP 地址耗尽问题的措施有以下三种：</p><ol><li>采用无类别编址 CIDR，使 IP 地址的分配更加合理</li><li>采用网络地址转换 NAT 方法以节省全球 IP 地址</li><li>采用具有更大地址空间的新版本的 IPv6，<strong>从根本上解决了 IP 地址的耗尽问题</strong></li></ol><p>IPv6 的主要特点如下：</p><ol><li>更大的地址空间：IPv6 将地址从 IPv4 的 32 位<strong>增大到了 128 位</strong></li><li>扩展的地址层次结构</li><li>灵活的首部格式，<strong>减少了首部条目，头部固定</strong>，扩展头部在数据部分</li><li>改进的选项</li><li>允许协议继续扩充</li><li>支持即插即用（即自动配置，不需要 DHCP）</li><li>支持资源的预分配</li><li><strong>IPv6 只在包的源结点才能分片</strong>，是端到端的，所以从一般意义上说，<strong>IPv6 不允许分片</strong>，若路由器接不能转发就丢弃</li><li><strong>IPv6 首部长度必须是 <code>8B</code> 的整数倍</strong>，而 IPv4 首部是 <code>4B</code> 的整数倍</li><li>增大了安全性，身份验证和保密功能是 IPv6 的关键特征（<strong>支持质量服务 <code>QoS</code></strong>）</li></ol><p>虽然 IPv6 与 IPv4 不兼容，但总体而言它与所有其他的因特网协议兼容，只是在少数地方做了必要的修改</p><p>IPv6 相当好地满足了预定的目标，主要体现在：</p><ol><li>IPv6 的地址用 16 个字节表示，从长远来看，<strong>这些地址是绝对够用的</strong></li><li>简化了 IP 分组头，它包含 8 个域，这一改变使得路由器能够更快地处理分组，从而可以改善吞吐率</li><li><strong>更好地支持选项</strong>，一些从前必要的段现在变成了可选段。此外，表示选项的方式的改变还能加快分组的处理速度</li><li>IPv6 <strong>将 IPv4 的校验和字段彻底移除</strong>，以减少每跳的处理时间</li></ol><h3 id="ipv6-地址" tabindex="-1"><a class="header-anchor" href="#ipv6-地址" aria-hidden="true">#</a> IPv6 地址</h3><p>IPv6 数据报的目的地址可以是以下三种基本类型地址之一：</p><ol><li>单播：单播就是传统的点对点通信</li><li>多播：多播是一点对多点的通信，分组被交付到一组计算机的每台计算机</li><li>任播：任播的<strong>目的站是一组计算机，但只交付给其中的一台计算机</strong>，通常是距离最近的一台计算机</li></ol><p>在 IPv6 地址表示：<strong>每 4 位用一个十六进制数表示，并用冒号分隔 16 位</strong>，如 <code>4BF5:AA12:0216:FEBC:BA5F:039A:BE9A:2170</code></p><p>当 16 位域的开头有一些 0 时，可以采用一种缩写表示法，但在<strong>域中必须至少有一个数字</strong></p><ul><li>如把地址 <code>4BF5:0000:0000:0000:BA5F:039A:000A:2176</code> 缩写为 <code>4BF5:0:0:0:BA5F:39A:A:2176</code></li></ul><p>有相继的 0 值域时，这些域可以用双冒号缩写，但在<strong>一个地址中仅能出现一次</strong>，上面地址可以写成 <code>4BF5::BA5F:39A:A:2176</code></p><p>IPv6 使用以下 3 个等级：</p><ul><li>第一级：指明全球都知道的公共拓扑，顶级</li><li>第二级：指明单个场点，场点级</li><li>第三级：指明单个网络接口</li></ul><p>IPv6 地址采用多级体系主要是为了使路由器能够更快地查找路由</p><p>IPv4 向 IPv6 过渡只能采用<strong>逐步演进</strong>的办法，同时还必须使新安装的 IPv6 系统能够<u>向后兼容</u></p><p>IPv4 向 IPv6 过渡可以采用双协议栈和隧道技术两种策略：</p><ul><li>双协议栈技术：在一台设备上<strong>同时装有 IPv4 和 IPv6 协议栈</strong>，有两个协议的地址，可以实现两个协议的通信</li><li>隧道技术：<strong>将整个 IPv6 数据报封装到 IPv4 数据报的数据部分</strong>，使得 IPv6 数据报可以在 IPv4 网络的隧道中传输</li></ul><h3 id="ipv6-数据报格式" tabindex="-1"><a class="header-anchor" href="#ipv6-数据报格式" aria-hidden="true">#</a> *IPv6 数据报格式</h3><figure><img src="'+m+'" alt="image-20211212110102062" tabindex="0" loading="lazy"><figcaption>image-20211212110102062</figcaption></figure><p>头部大小 <code>40B</code>，红色部分，扩展头部在数据部分</p><ol><li>版本：IP 版本</li><li>流标签：分片用的标识符</li><li>有效载荷长度：有效载荷（扩展首部 + 数据）的长度</li><li>下一个首部：下个首部的位置，首部与扩展首部用单链表连起来</li></ol><h2 id="路由协议" tabindex="-1"><a class="header-anchor" href="#路由协议" aria-hidden="true">#</a> 路由协议</h2><h3 id="自治系统" tabindex="-1"><a class="header-anchor" href="#自治系统" aria-hidden="true">#</a> 自治系统</h3><p>自治系统 Autonomous System，AS：一个有权自主地决定在本系统中应采用各种路由协议的小型单位</p><p>有共同的协议与度量，一个自治系统的所有路由器<strong>在本自治系统内都必须是连通的</strong></p><h3 id="域内路由与域间路由" tabindex="-1"><a class="header-anchor" href="#域内路由与域间路由" aria-hidden="true">#</a> 域内路由与域间路由</h3><p>自治系统内部的路由选择称为<strong>域内路由选择</strong>，自治系统之间的路由选择称为<strong>域间路由选择</strong></p><p>因特网有两大类路由选择协议：</p><ol><li>内部网关协议 Interior Gateway Protocol，<code>IGP</code>：<strong>在一个自治系统内部使用的路由选择协议</strong>，如 RIP 和 OSPF</li><li>外部网关协议 External Gateway Protocol，<code>EGP</code>：<strong>在多个自治系统间使用的路由选择协议</strong>，如 BGP-4</li></ol><p>下面是两个自治系统互联的示意图：</p><figure><img src="'+I+'" alt="image-20211212183506854" tabindex="0" loading="lazy"><figcaption>image-20211212183506854</figcaption></figure><h3 id="路由信息协议-rip" tabindex="-1"><a class="header-anchor" href="#路由信息协议-rip" aria-hidden="true">#</a> 路由信息协议 RIP</h3><p>路由信息协议 Routing Information Protocol，RIP 是内部网关协议中最先得到广泛应用的协议</p><p>RIP 是一种分布式的<strong>基于距离向量</strong>的路由选择协议，其最大优点就是简单</p><h4 id="rip-规定" tabindex="-1"><a class="header-anchor" href="#rip-规定" aria-hidden="true">#</a> RIP 规定</h4><ol><li><p>网络中的每个路由器都要维护<strong>从它自身到其他每个目的网络的距离记录</strong>，这组距离称为距离向量</p></li><li><p>距离也称跳数，规定从一个路由器到<strong>直接连接网络的距离为 1</strong>，而<strong>每经过一个路由器距离加 1</strong></p></li><li><p>RIP 认为好的路由就是它通过的路由器的数目少，即<strong>优先选择跳数少的路径</strong></p></li><li><p>RIP 允许一条路径最多只能包含 15 个路由器，因此<strong>距离等于 16 时，它表示网络不可达</strong></p><p>规定路径上的最高跳数<strong>防止数据报不断循环在环路上</strong>，减少网络拥塞的可能性</p></li><li><p>RIP 默认<strong>每 30 秒广播一次 RIP 路由更新信息</strong>，以便<strong>自动建立并维护路由表</strong></p></li><li><p>RIP 中不支持子网掩码的 RIP 广播；<code>RIP2</code> 中，支持变长子网掩码和 CIDR</p></li></ol><h4 id="rip-的特点" tabindex="-1"><a class="header-anchor" href="#rip-的特点" aria-hidden="true">#</a> RIP 的特点</h4><ol><li>仅和<strong>相邻路由器</strong>交换信息</li><li>路由器交换它<strong>所知道的全部信息</strong>，即自己的路由表</li><li>按固定的时间间隔交换路由信息，如每隔 30 秒</li></ol><p>RIP 通过距离向量算法来完成路由表的更新：</p><ol><li>最初，每个路由器只知道与自己直接相连的网络</li><li>经过 1 次 RIP 广播后，每个路由器知道距离自己跳数为 1 的网络</li><li>经过若干 RIP 广播后，<strong>所有路由器都知道整个 IP 网络的路由表</strong>，称 RIP 最终是<strong>收敛的</strong></li><li>通过 RIP 收敛后，每个路由器到每个目标网络的路由都是<strong>距离最短的（跳数最短，不是时间最短）</strong></li></ol><h4 id="距离向量算法" tabindex="-1"><a class="header-anchor" href="#距离向量算法" aria-hidden="true">#</a> 距离向量算法</h4><p>每个路由表项目都有三个关键数据：<strong>&lt;目的网络 N，距离 d，下一跳路由器地址 X&gt;</strong></p><p>对于每个相邻路由器 X 发送过来的 RIP 报文，执行如下步骤：</p><ol><li><p>修改此报文中的所有项目：把<strong>下一跳字段中的地址都改为 X</strong>，并把所有<strong>距离字段的值加 1</strong></p></li><li><p>对修改后的 RIP 报文中的每个项目，执行如下步骤：</p><ol><li><p>当原来的路由表中<strong>没有目的网络 N</strong> 时，把该项目<strong>添加到路由表中</strong></p></li><li><p>当原来的路由表中<strong>有目的网络 N，且下一跳路由器的地址是 X</strong> 时，就<strong>替换原路由表中的项目</strong></p></li><li><p>当原来的路由表中<strong>有目的网络 N，且下一跳路由器的地址不是 X</strong> 时</p><p>如果收到的项目中的<strong>距离 d 小于路由表中的距离</strong>，那么就<strong>替换原路由表中的项目</strong>；否则什么也不做</p></li></ol></li><li><p>如果 180 秒（默认超时时间）还没有收到更新路由表，就<strong>把此相邻路由器的距离设置为 16</strong>（不可达）</p></li><li><p>返回</p></li></ol><p>优点：实现简单、开销小、收敛过程较快；缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15，<strong>只适用于小型互联网</strong></p></li><li><p>路由器之间交换的是路由器中的完整路由表，因此网络规模越大，开销也越大</p></li><li><p>网络出现故障时，会出现慢收敛现象，俗称<strong>坏消息传得慢</strong>，使更新过程的收敛时间长</p><p>A 的直接网络出错了，距离改为 16，但交换信息时会误以为可以从临近路由到达（每次交换距离加 1，直到加到 16）</p></li></ol><p>RIP 是<strong>应用层协议</strong>，它使用 <strong>UDP</strong> 传送数据，端口 520</p><h3 id="开放最短路径优先-ospf-协议" tabindex="-1"><a class="header-anchor" href="#开放最短路径优先-ospf-协议" aria-hidden="true">#</a> 开放最短路径优先 OSPF 协议</h3><h4 id="ospf-协议的基本特点" tabindex="-1"><a class="header-anchor" href="#ospf-协议的基本特点" aria-hidden="true">#</a> OSPF 协议的基本特点</h4><p>开放最短路径优先协议是使用分布式<strong>链路状态路由算法</strong>的典型代表，也是<strong>内部网关协议</strong>的一种</p><p>OSPF 与 RIP 相比有以下 4 点主要区别：</p><ol><li><p>OSPF 向本自治系统中的<strong>所有路由器</strong>发送信息，这里使用的方法是<strong>洪泛法</strong>；RIP 仅向自己<strong>相邻的路由器</strong>发送信息</p><p>泛洪：将从某个接口收到的数据流向除该接口之外的所有接口发送出去</p></li><li><p>OSPF 发送的信息是<strong>相邻的所有路由器的链路状态</strong>；RIP 发送的信息是<strong>整个路由表</strong></p><p>链路状态：该链路连接的路由器是谁，该链路的度量（代价）是多少</p></li><li><p>OSPF 中<strong>链路状态发生变化时</strong>才发送信息，且<strong>更新过程收敛得快</strong>；RIP 中会<strong>定期交换路由表的信息</strong></p></li><li><p>OSPF 是<strong>网络层协议，用 IP 数据报传送</strong>，协议字段为 89；RIP 是<strong>应用层协议，用 UDP 协议传送</strong></p></li></ol><p>OSPF 还有以下特点：</p><ol><li>OSPF 对于不同类型的业务可计算出不同的路由，十分灵活</li><li>可以将通信量分配给多条路径实现多路径间的<strong>负载平衡</strong></li><li>所有在 OSPF 路由器之间交换的分组都具有鉴别功能，因而保证了仅在可信赖的路由器之间交换链路状态信息</li><li>支持可变长度的子网划分和<strong>无分类编址 CIDR</strong></li><li>每个链路状态都带上一个 32 位的序号，序号越大，状态就越新</li></ol><h4 id="ospf-的基本工作原理" tabindex="-1"><a class="header-anchor" href="#ospf-的基本工作原理" aria-hidden="true">#</a> OSPF 的基本工作原理</h4><ol><li><p>各路由器之间频繁地交换链路状态信息，所有路由器最终都能建立一个链路状态数据库</p><p>这个数据库实际上就是<strong>全网的拓扑结构图</strong>，它在全网范围内是一致的（称为链路状态数据库的同步）</p></li><li><p>每个路由器根据这个全网拓扑结构图，<strong>使用 Dijkstra 算法计算到各目的网络的最优路径</strong>，以此构造自己的路由表</p></li><li><p>此后，当<strong>链路状态发生变化时</strong>，每个路由器重新计算到各目的网络的最优路径，<strong>构造新的路由表</strong></p></li></ol><p>注意：虽然使用 Dijkstra 算法能计算出完整的最优路径，但路由表中<u>只存储下一跳</u></p><p>为使 OSPF 能够用于规模很大的网络，OSPF <strong>将一个自治系统再划分为若干更小的范围</strong>，称为<strong>区域</strong></p><p>划分区域的好处：将利用洪泛法的范围<strong>局限于每个区域</strong>，减少了整个网络上的通信量</p><p>一个区域内部的路由器<strong>只知道本区域的完整网络拓扑</strong>，而不知道其他区域的网络拓扑情况</p><p>这些区域也有层次之分：处在上层的域称为<strong>主干区域</strong>，负责<strong>连通其他下层的区域和其他自治域</strong></p><h4 id="ospf-的五种分组类型" tabindex="-1"><a class="header-anchor" href="#ospf-的五种分组类型" aria-hidden="true">#</a> OSPF 的五种分组类型</h4><p>OSPF 共有以下五种分组类型：</p><ol><li>问候分组：用来<strong>发现和维持邻站的可达性</strong></li><li>数据库描述分组：向邻站给出自己的链路状态数据库中的所有链路状态项目的<strong>摘要信息</strong></li><li>链路状态请求分组：向对方请求发送某些链路状态项目的详细信息</li><li>链路状态更新分组：用洪泛法对全网更新链路状态</li><li>链路状态确认分组：对链路更新分组的确认</li></ol><p>通常每隔 10 秒，每两个相邻路由器要交换一次问候分组，以便知道哪些站可达</p><p>在路由器刚开始工作时，工作过程如下：</p><ol><li>使用问候分组建立邻居关系</li><li>让每个路由器使用数据库描述分组和相邻路由器<strong>交换本数据库中已有的链路状态摘要信息</strong>（泛洪发送？）</li><li>路由器使用链路状态请求分组，向对方<strong>请求发送自己所缺少的某些链路状态项目的详细信息</strong></li><li>经过一系列的这种分组交换，就建立了全网同步的链路数据库</li><li>当链路状态发生变化时，该路由器就要<strong>使用链路状态更新分组，用洪泛法向全网更新链路状态</strong></li><li>其他路由器在更新后，<strong>发送链路状态确认分组对更新分组进行确认</strong></li></ol><p>思考：刚开始交换信息拿到全网的拓扑，使用 Dijkstra 得到最佳路径，生成路由表，以后收到链路变化信息时，修改拓扑再生成路由表；路由器内记录了拓扑图和路由表，路由表是为了方便查询</p><figure><img src="'+f+'" alt="image-20211212181133892" tabindex="0" loading="lazy"><figcaption>image-20211212181133892</figcaption></figure><p>为了确保链路状态数据库与全网的状态保持一致，OSPF 还规定<u>每隔一段时间（如 30 分钟）刷新一次数据库中的链路状态</u></p><p>由于一个路由器的链路状态只涉及与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系</p><p><strong>当互联网规模很大时，OSPF 要比 RIP 好得多</strong>，而且 OSPF 协议没有坏消息传播得慢的问题</p><h3 id="边界网关协议-bgp" tabindex="-1"><a class="header-anchor" href="#边界网关协议-bgp" aria-hidden="true">#</a> 边界网关协议 BGP</h3><p>边界网关协议 Border Gateway Protocol，BGP：<strong>不同自治系统的路由器之间交换路由信息</strong>的协议，是一种<strong>外部网关协议</strong></p><p>边界网关协议用于互联网的网关之间，路由表包含<strong>已知路由器列表、路由器能够达到的地址、到达路由器的路径的跳数</strong></p><p>边界网关协议只能力求寻找一条<strong>能够到达目的网络且比较好的路由</strong>（无圈非最佳路由），主要原因如下：</p><ol><li>因特网的规模太大，使得自治系统之间路由选择非常困难</li><li>对于自治系统之间的路由选择，要寻找最佳路由是很不现实的（自治区权重不一样）</li><li>自治系统之间的路由选择必须考虑有关策略</li></ol><p>BGP 采用的是<strong>路径向量路由选择</strong>协议，BGP 是<strong>应用层协议，它是基于 TCP 的</strong></p><h4 id="bgp-的工作原理" tabindex="-1"><a class="header-anchor" href="#bgp-的工作原理" aria-hidden="true">#</a> BGP 的工作原理</h4><ol><li>每个自治系统的管理员要<strong>选择至少一个路由器作为该自治系统的 BGP 发言人</strong></li><li>一个 BGP 发言人与其他自治系统中的 BGP 发言人要交换路由信息，就要<strong>先建立 TCP 连接</strong></li><li>在此连接上交换 BGP 报文以<strong>建立 BGP 会话</strong>，再利用 BGP 会话<strong>交换路由信息</strong></li><li>当所有 BGP 发言人都相互交换网络可达性的信息后，各 BGP 发言人就可找出到达各个自治系统的较好路由</li></ol><p>每个 BGP 发言人除必须运行 BGP 外，<strong>还必须运行该 AS 所用的内部网关协议</strong></p><p>BGP 所交换的网络可达性信息就是<strong>要到达某个网络所要经过的一系列 AS</strong></p><figure><img src="'+k+'" alt="image-20211212181252769" tabindex="0" loading="lazy"><figcaption>image-20211212181252769</figcaption></figure><h4 id="bgp-的特点" tabindex="-1"><a class="header-anchor" href="#bgp-的特点" aria-hidden="true">#</a> BGP 的特点</h4><ol><li>BGP 交换路由信息的结点数量级是自治系统的数量级，要比这些自治系统中的网络数少很多</li><li>每个<strong>自治系统中 BGP 发言人的数目是很少的</strong>，这样就使得自治系统之间的路由选择不致过分复杂</li><li>BGP <strong>支持 CIDR</strong>，因此 BGP 的路由表当包括<strong>目的网络前缀、下一跳路由器、要经过的各个自治系统序列</strong></li><li>在 BGP 刚运行时，BGP 的邻站<strong>交换整个 BGP 路由表</strong>，但以后只需在发生变化时<strong>更新有变化的部分</strong></li></ol><p>BGP-4 共使用 4 种报文：</p><ol><li>打开 Open 报文：用来与相邻的另一个 BGP 发言人建立关系</li><li>更新 Update 报文：用来发送某一路由的信息，以及列出要撤销的多条路由</li><li>保活 Keep alive 报文：用来确认打开报文并周期性地证实邻站关系</li><li>通知 Notification 报文：用来发送检测到的差错</li></ol><h3 id="三种协议的比较" tabindex="-1"><a class="header-anchor" href="#三种协议的比较" aria-hidden="true">#</a> 三种协议的比较</h3><figure><img src="'+b+'" alt="image-20211212181344972" tabindex="0" loading="lazy"><figcaption>image-20211212181344972</figcaption></figure><h2 id="ip-组播" tabindex="-1"><a class="header-anchor" href="#ip-组播" aria-hidden="true">#</a> IP 组播</h2><h3 id="组播的概念" tabindex="-1"><a class="header-anchor" href="#组播的概念" aria-hidden="true">#</a> 组播的概念</h3><p>组播机制是让源计算机<strong>一次发送</strong>的单个分组可以抵达用<strong>一个组地址标识的若干目标主机</strong>，并被它们正确接收</p><p>组播一定<strong>仅应用于 UDP</strong>，它可以把一个报文同时发送给多个接收者</p><p>源主机把单个分组发送给一个<strong>组播地址</strong>，该组播地址<strong>标识一组地址</strong>，网络把这个分组的副本投递给该组中的每台主机</p><p>因特网中的 IP 组播也使用组播组的概念，每个组都有一个特别分配的地址，使用这个地址作为分组的<strong>目标地址</strong></p><p>主机<strong>使用 IGMP 的协议加入组播组</strong>，使用该协议通知本地网络上的路由器，要<strong>接收某个组播组的分组的愿望</strong></p><p>主机组播时仅发送一份数据，只有数据在传送路径出现<strong>分岔时</strong>才将分组复制后继续转发</p><figure><img src="'+v+'" alt="image-20211213152003204" tabindex="0" loading="lazy"><figcaption>image-20211213152003204</figcaption></figure><h3 id="ip-组播地址" tabindex="-1"><a class="header-anchor" href="#ip-组播地址" aria-hidden="true">#</a> IP 组播地址</h3><p>IP 组播使用 <strong>D 类地址格式</strong>，范围是 224.0.0.0～239.255.255.255，<strong>每个 D 类 IP 地址标志一个组播组</strong></p><p>组播的 IP 数据报是使用 <strong>D 类 IP 地址作为目的地址</strong>，并且首部中的<strong>协议字段值是 2</strong>，表明使用 IGMP</p><p>需要注意的是：</p><ol><li>组播数据报也是“尽最大努力交付”，<strong>不提供可靠交付</strong></li><li>组播地址<strong>只能用于目的地址</strong>，而不能用于源地址</li><li>对组播数据报<strong>不产生 ICMP 差错报文</strong></li><li>并非所有的 D 类地址都可作为组播地址</li></ol><p>IP 组播可以分为两种：<strong>只在本局域网</strong>上进行硬件组播；在<strong>因特网的范围</strong>内进行组播</p><p>在因特网上进行组播的最后阶段，还是要把组播数据报在局域网上用硬件组播交付给组播组的所有成员</p><h3 id="硬件组播" tabindex="-1"><a class="header-anchor" href="#硬件组播" aria-hidden="true">#</a> 硬件组播</h3><p><code>IANA</code> 的<strong>以太网组播地址范围</strong>：<code>01-00-5E-00-00-00</code> 到 <code>01-00-5E-7F-FF-FF</code></p><p>可见只有 <strong>23 位可用作组播</strong>，和 D 类 IP 地址中的 23 位有一一对应关系</p><p>D 类 IP 地址可供分配的有 28 位，可见在这 28 位中，<strong>前 5 位不能用来构成以太网的硬件地址</strong></p><figure><img src="'+C+`" alt="image-20211213152104133" tabindex="0" loading="lazy"><figcaption>image-20211213152104133</figcaption></figure><p>但 224.128.64.32 和 224.0.64.32 转换成以太网的硬件组播地址都是 <code>01-00-5E-00-40-20</code>，因此<strong>收到组播数据报的主机，还要在 IP 层利用软件进行过滤</strong>，把不是本主机要接收的数据报丢弃</p><h3 id="igmp-与组播路由算法" tabindex="-1"><a class="header-anchor" href="#igmp-与组播路由算法" aria-hidden="true">#</a> IGMP 与组播路由算法</h3><p>因特网组管理协议 Internet Group Management Protocol，IGMP：使<strong>路由器知道组播组成员的信息</strong></p><ul><li>IGMP 让连接到<strong>本地局域网</strong>上的组播路由器知道本局域网上<strong>是否有主机参加或退出了某个组播组</strong></li></ul><p>组播路由选择协议：使连接到<strong>局域网上的组播路由器和因特网上的其他组播路由器协同工作</strong></p><p>IGMP 应视为 TCP/IP 的一部分，其工作可分为两个阶段：</p><ul><li><p>第一阶段：</p><p>当某台主机<strong>加入新的组播组</strong>时，该主机应<strong>向组播组的组播地址发送一个 IGMP 报文</strong>，声明自己要成为该组的成员</p><p>本地的组播路由器收到 IGMP 报文后，<strong>将组成员关系转发给因特网上的其他组播路由器</strong></p></li><li><p>第二阶段：</p><p>本地组播路由器要<strong>周期性地探询本地局域网上的主机</strong>，以便知道这些主机是否仍继续是组的成员</p><p>只要对某个组<strong>有一台主机响应</strong>，那么组播路由器就认为这个<strong>组是活跃的</strong></p><p>但一个组在经过几次的探询后仍然<strong>没有一台主机响应</strong>时，则不再将该组的成员关系转发给其他的组播路由器</p></li></ul><p>组播路由选择选择：<strong>找出以源主机为根结点的组播转发树</strong>，其中每个分组在每条链路上只传送一次</p><ul><li><u>不同的多播组对应于不同的多播转发树</u>；同一个多播组，对<u>不同的源点也会有不同的多播转发树</u></li></ul><p>在许多由路由器互联的网络上<u>实现因特网组播</u>，主要有三种路由算法：</p><ol><li>基于链路状态的路由选择</li><li>基于距离-向量的路由选择</li><li><strong>协议无关的组播 <code>PIM</code></strong>：可以建立在任何路由器协议之上</li></ol><p>思考：IGMP 处理局域网相关的组播，组播路由选择协议处理局域网间的组播信息</p><h3 id="思考-组播的过程" tabindex="-1"><a class="header-anchor" href="#思考-组播的过程" aria-hidden="true">#</a> 思考：组播的过程</h3><p>以下全是思考得到的，没有依据：</p><ol><li>发送者向组播 IP 发送信息，局域网广播发送</li><li>到达路由器后，查看 IP 发现是组播 IP 根据组播路由选择协议组发给其他组播内的路由器</li><li>到达最后的路由器后，转换成 MAC 组播地址在局域网内广播</li><li>接受者发现自己是组播的一员，就处理消息</li></ol><p>接受者先根据 MAC 地址检测这是不是自己的组播，再根据 IP 地址检测，若是才处理</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">## 这是发送端</span>
mcast_group_ip <span class="token operator">=</span> <span class="token string">&#39;239.255.255.252&#39;</span>  <span class="token comment">## 组播 IP</span>
mcast_group_port <span class="token operator">=</span> <span class="token number">23456</span>  <span class="token comment">## 组播给哪个端口</span>

send_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>IPPROTO_UDP<span class="token punctuation">)</span>  <span class="token comment">## 使用 UDP 协议</span>
message <span class="token operator">=</span> <span class="token string">&quot;this message send via mcast !&quot;</span>
send_sock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>mcast_group_ip<span class="token punctuation">,</span> mcast_group_port<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 发送组播</span>

<span class="token comment">## 这是接受端</span>
sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>IPPROTO_UDP<span class="token punctuation">)</span>  <span class="token comment">## 使用 UDP 协议</span>
sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostbyname<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>gethostname<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mcast_group_port<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">## 绑定接受端口</span>

mreq <span class="token operator">=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">&quot;=4sl&quot;</span><span class="token punctuation">,</span> socket<span class="token punctuation">.</span>inet_aton<span class="token punctuation">(</span><span class="token string">&quot;239.255.255.252&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> socket<span class="token punctuation">.</span>INADDR_ANY<span class="token punctuation">)</span>
sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>IPPROTO_IP<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>IP_ADD_MEMBERSHIP<span class="token punctuation">,</span> mreq<span class="token punctuation">)</span>  <span class="token comment">## 加入广播</span>

message<span class="token punctuation">,</span> addr <span class="token operator">=</span> sock<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>  <span class="token comment">## 接受消息</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="移动-ip" tabindex="-1"><a class="header-anchor" href="#移动-ip" aria-hidden="true">#</a> 移动 IP</h2><h3 id="移动-ip-的概念" tabindex="-1"><a class="header-anchor" href="#移动-ip-的概念" aria-hidden="true">#</a> 移动 IP 的概念</h3><p>支持移动性的因特网体系结构与协议共称为移动 IP，它是为了满足<strong>移动结点在移动中保持其连接性而设计的</strong></p><p>移动 IP 的目标是<strong>把分组自动地投递给移动结点</strong>，移动结点是<u>从一个网络或子网改变到另一个网络或子网的主机</u></p><p>思考：其实就是实现去了其它的局域网，但可以继续使用原局域网的功能</p><p>基于 IPv4 的移动 IP 定义三种功能实体：移动结点、归属代理、外部代理；归属代理和外部代理统称为<strong>移动代理</strong></p><ol><li>移动结点：<strong>具有永久 IP 地址的移动结点</strong></li><li>归属网络：在一个网络环境中，<strong>一个移动结点的永久居所</strong></li><li>本地代理，归属代理：在归属网络中<strong>代表移动结点执行移动管理功能的实体</strong></li><li>转交地址，辅地址：移动站点<strong>在外部网络使用的临时地址</strong></li><li>外部代理：在外部网络中<strong>帮助移动结点完成移动管理功能的实体</strong></li></ol><h3 id="移动-ip-通信过程" tabindex="-1"><a class="header-anchor" href="#移动-ip-通信过程" aria-hidden="true">#</a> 移动 IP 通信过程</h3><p>在移动 IP 中，<strong>移动结点都有唯一的本地地址，移动时本地地址不变</strong>，在本地网络上还有一个<strong>本地代理来为它维护位置信息</strong></p><p>移动结点连接到外地网络上时，<strong>转交地址就用来标识移动结点现在所处的位置</strong>，以便进行路由选择</p><p>移动结点得到转交地址时，<strong>向本地代理注册转交地址</strong>，以便让本地代理即时了解移动结点的当前位置</p><p>移动 IP 技术的基本通信流程如下：</p><ol><li><p>移动结点<strong>在本地网时，按传统的 TCP/IP 方式进行通信</strong></p></li><li><p>移动结点漫游到一个外地网络时，仍然使用固定的 IP 地址进行通信</p><p>移动结点需要<strong>向本地代理注册当前的位置地址</strong>，即转交地址，<strong>以收到通信对端发给它的 IP 分组</strong></p></li><li><p>本地代理接收注册后，构建一条通向转交地址的隧道，<strong>将截获的发给移动结点的分组通过隧道送到转交地址处</strong></p></li><li><p>转交地址处<strong>解除隧道封装，恢复原始的 IP 分组，送到移动结点</strong>，这样就收到发到归属网络的移动结点的信息了</p></li><li><p>移动结点在外网<strong>通过外网的路由器或外部代理向通信对端发送 IP 数据包</strong>（会在转交地址处进行隧道封装）</p></li><li><p>移动结点来到另一个外网时，向本地代理<strong>更新注册的转交地址</strong>，就可继续通信</p></li><li><p>移动结点回到本地网时，向本地代理<strong>注销转交地址</strong>，按传统的 TCP/IP 方式进行通信</p></li></ol><p>思考：移动结点的主地址永不改变，去到其他网络时要申请辅地址，并在本地代理注册后，才能在通信（代理技术）</p><h2 id="网络层设备" tabindex="-1"><a class="header-anchor" href="#网络层设备" aria-hidden="true">#</a> 网络层设备</h2><h3 id="路由器的组成和功能" tabindex="-1"><a class="header-anchor" href="#路由器的组成和功能" aria-hidden="true">#</a> 路由器的组成和功能</h3><p>路由器是<strong>具有多个输入/输出端口的专用计算机</strong>，其任务是<strong>连接不同的网络并完成路由转发</strong></p><p>当源主机要向目标主机发送数据报时：</p><ul><li><p>如果源主机和目标主机在同一个网络上，那么<strong>直接交付</strong>而<strong>无须通过路由器</strong></p></li><li><p>如果不在同一个网络上，那么<strong>按照转发表将数据报转发给下一个路由器</strong>，这称为<strong>间接交付</strong></p></li></ul><p>路由器可以连接不同的 LAN、VLAN、WAN，或者把 LAN 和 WAN 互联起来，路由器<strong>隔离了广播域</strong></p><p>从结构上看，路由器由<strong>路由选择和分组转发</strong>两部分构成；从模型上看，路由器是网络层设备，它<strong>实现了网络模型的下三层</strong></p><figure><img src="`+x+'" alt="image-20211214132843925" tabindex="0" loading="lazy"><figcaption>image-20211214132843925</figcaption></figure><p>路由选择部分也称控制部分，包括：<strong>路由选择处理机、路由选择协议、路由表</strong></p><ul><li>路由选择处理机【核心构件】：根据所选定的路由选择协议<strong>构造出路由表</strong>，通过交换路由信息不断<strong>更新和维护路由表</strong></li></ul><p>分组转发部分由三部分组成：</p><ol><li><p>一组输入端口：从物理层接收到的比特流中提取出数据链路层帧，进而从帧中<strong>提取出网络层数据报</strong></p></li><li><p>一组输出端口：执行与输入端口恰好相反的操作</p></li><li><p>交换结构【关键部件】：<strong>根据转发表对分组进行处理</strong>，将某个输入端口进入的<strong>分组从一个合适的输出端口转发出去</strong></p><p>常用的交换方法：通过<strong>存储器进行交换</strong>、通过<strong>总线进行交换</strong>、通过<strong>互联网络进行交换</strong></p></li></ol><p>注意：如果一个<strong>存储转发设备</strong>实现了某个层次的功能，那么它就可以<strong>互联两个在该层次上使用不同协议的网段</strong></p><p>路由器主要完成两个功能：</p><ol><li>分组转发：<strong>处理通过路由器的数据流</strong>，关键操作是转发表查询、转发及相关的队列管理和任务调度等</li><li>路由计算：通过和其他路由器进行基于路由协议的交互，<strong>完成路由表的计算</strong></li></ol><p>现今的路由器一般都提供多种协议的支持，包括 <code>OSI、TCP/IP、IPX</code> 等</p><h3 id="路由表与路由转发" tabindex="-1"><a class="header-anchor" href="#路由表与路由转发" aria-hidden="true">#</a> 路由表与路由转发</h3><p>路由表是<strong>根据路由选择算法得出</strong>的，主要用途是路由选择，其结构应<strong>对网络拓扑变化的计算最优化</strong></p><p>标准的路由表有 4 个项目：<strong>目的网络 IP 地址、子网掩码、下一跳 IP 地址、接口</strong></p><figure><img src="'+_+'" alt="image-20211214132948199" tabindex="0" loading="lazy"><figcaption>image-20211214132948199</figcaption></figure><p><code>R1</code> 的路由表见表：</p><figure><img src="'+A+'" alt="image-20211214133007708" tabindex="0" loading="lazy"><figcaption>image-20211214133007708</figcaption></figure><p>转发表是<strong>从路由表得出</strong>的，其表项和路由表项有直接的对应关系；它和路由表的<strong>格式不同</strong>，其结构应<strong>使查找过程最优化</strong></p><p>转发表中含有一个分组将<strong>要发往的目的地址，以及分组的下一跳</strong>（即下一步接收者的目的地址，实际为 MAC 地址）</p><p>使用一个默认路由代替所有相同下一跳的项目，并将默认路由设置得<strong>比其他项目的优先级低</strong>，以<strong>减少转发表的重复项目</strong></p><figure><img src="'+D+'" alt="image-20211214133055858" tabindex="0" loading="lazy"><figcaption>image-20211214133055858</figcaption></figure><p>路由表总是用<strong>软件</strong>来实现的；转发表可以用<strong>软件</strong>来实现，甚至也可以用<strong>特殊的硬件</strong>来实现</p>',228),z=[M,y,B,F,G,T,N,H,S,O];function w(E,U){return r(),a("div",null,z)}const j=o(R,[["render",w],["__file","第四章 网络层.html.vue"]]);export{j as default};
