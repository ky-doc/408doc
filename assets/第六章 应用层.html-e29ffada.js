import{_ as r,X as l,Y as o,Z as s,a1 as n,$ as i,a2 as t,E as e}from"./framework-0cdb5b8e.js";const p="/408doc/408noteImg/images/image-20211220202944500.png",g="/408doc/408noteImg/images/image-20211220203019030.png",m="/408doc/408noteImg/images/image-20211221131051147.png",c="/408doc/408noteImg/images/image-20211221131203055.png",d="/408doc/408noteImg/images/image-20211221131319745.png",h="/408doc/408noteImg/images/image-20211221131435930.png",u="/408doc/408noteImg/images/image-20211221192942605.png",P="/408doc/408noteImg/images/image-20211222160814393.png",_="/408doc/408noteImg/images/image-20211222160940649.png",T="/408doc/408noteImg/images/image-20211222161205419.png",y="/408doc/408noteImg/images/image-20211222214649474.png",f="/408doc/408noteImg/images/image-20211222214849978.png",v="/408doc/408noteImg/images/image-20211222214922153.png",b="/408doc/408noteImg/images/image-20211222215021476.png",S="/408doc/408noteImg/images/image-20211222215137245.png",x="/408doc/408noteImg/images/image-20211222215216323.png",I="/408doc/408noteImg/images/image-20211223182951324.png",M={},w=t('<h2 id="网络应用模型" tabindex="-1"><a class="header-anchor" href="#网络应用模型" aria-hidden="true">#</a> 网络应用模型</h2><h3 id="客户-服务器模型" tabindex="-1"><a class="header-anchor" href="#客户-服务器模型" aria-hidden="true">#</a> 客户/服务器模型</h3><p>在客户/服务器 C/S 模型中，有一个<strong>总是打开的主机称为服务器</strong>，它服务于许多来自其他称为客户机的主机请求</p><p>其工作流程如下：</p><ol><li>服务器处于接收请求的状态</li><li>客户机发出服务请求，并等待接收结果</li><li>服务器收到请求后，分析请求，进行必要的处理，得到结果并发送给客户机</li></ol><p>客户/服务器模型最主要的特征是：<strong>客户是服务请求方，服务器是服务提供方</strong></p><ul><li>客户程序<strong>必须知道服务器程序的地址</strong>，客户机上一般不需要特殊的硬件和复杂的操作系统</li><li>服务器上<strong>运行提供某种服务的程序</strong>，可同时处理多个远程或本地客户的要求，服务器程序<strong>不需要知道客户程序的地址</strong></li></ul><p>常见的 C/S 模型的应用包括 Web、文件传输协议、远程登录和电子邮件等</p><p>客户/服务器模型的主要特点还有：</p><ol><li><p><strong>网络中各计算机的地位不平等</strong>，服务器管理用户权限，使客户机不能随意存储/删除数据，或进行其他受限的网络活动</p><p>整个网络的管理工作由少数服务器担当，因此网络的管理非常集中和方便</p></li><li><p><strong>客户机相互之间不直接通信</strong></p></li><li><p>可扩展性不佳，受服务器硬件和网络带宽的限制，<strong>服务器支持的客户机数有限</strong></p></li></ol><figure><img src="'+p+'" alt="image-20211220202944500" tabindex="0" loading="lazy"><figcaption>image-20211220202944500</figcaption></figure><h3 id="p2p-模型" tabindex="-1"><a class="header-anchor" href="#p2p-模型" aria-hidden="true">#</a> P2P 模型</h3><p>P2P 模型的思想是整个网络中的传输内容不再被保存在中心服务器上，<strong>每个结点的权利和义务都是大体对等的</strong></p><figure><img src="'+g+'" alt="image-20211220203019030" tabindex="0" loading="lazy"><figcaption>image-20211220203019030</figcaption></figure><p>在 P2P 模型中，各计算机没有固定的客户和服务器划分，<strong>任意一对计算机——称为对等方，直接相互通信</strong></p><p>P2P 模型从本质上来看仍然使用 C/S 方式，每个结点既作为客户访问资源，又作为服务器提供资源</p><p>常见的 P2P 模型的应用包括 <code>PPlive</code>、<code>Bittorrent</code> 和电驴等</p><p>与 C/S 模型相比，P2P 模型的优点主要体现如下：</p><ol><li><strong>消除了对某个服务器的完全依赖</strong>，将任务分配到各个结点上，因此大大提高了系统效率和资源利用率</li><li><strong>多个客户机之间可以直接共享文档</strong></li><li>可扩展性好，不限制客户机数量</li><li>网络健壮性强，单个结点的失效不会影响其他部分的结点</li></ol><p>P2P 模型也有缺点：</p><ul><li>在获取服务的同时，还要给其他结点提供服务，因此会<strong>占用较多的内存影响整机速度</strong></li><li>经常进行 P2P 下载还会<strong>对硬盘造成较大的损伤</strong></li><li>据统计 P2P 程序已占互联网 50%～90% 的流量，<strong>使网络变得非常拥塞</strong>，因此各大 <code>ISP</code> 通常都对P2P应用持反对态度</li></ul><h2 id="域名系统" tabindex="-1"><a class="header-anchor" href="#域名系统" aria-hidden="true">#</a> 域名系统</h2><p>域名系统 Domain Name System，DNS 是因特网使用的命名系统，用来<strong>把域名转换为 IP 地址</strong></p><p>注意：DNS 系统<strong>采用客户/服务器模型，其协议运行在 UDP 之上，使用 53 号端口</strong></p><p>从概念上可将 DNS 分为 3 部分：层次域名空间、域名服务器、解析器</p><h3 id="层次域名空间" tabindex="-1"><a class="header-anchor" href="#层次域名空间" aria-hidden="true">#</a> 层次域名空间</h3><p>因特网采用层次树状结构的命名方法：任何一个连接到因特网的主机或路由器，都可以有一个唯一的层次结构名称，即域名</p><p>域是名字空间中一个可被管理的划分，<strong>域可以划分为子域，子域也可以划分</strong>，这样就形成了顶级域、二级域、三级域等</p><p>如下图域名，由三个标号组成，其中标号 com 是顶级域名，标号 <code>cskaoyan</code> 是二级域名，标号 <code>www</code> 是三级域名</p><figure><img src="'+m+'" alt="image-20211221131051147" tabindex="0" loading="lazy"><figcaption>image-20211221131051147</figcaption></figure><p>关于域名中的标号有以下几点需要注意：</p><ol><li>标号中的<strong>英文不区分大小写</strong></li><li>标号中<strong>除连字符 - 外不能使用其他的标点符号</strong></li><li>每个<strong>标号不超过 63 个字符</strong>，多标号组成的<strong>完整域名最长不超过 255 个字符</strong></li><li><strong>级别最低的域名写在最左边，级别最高的顶级域名写在最右边</strong></li></ol><p>顶级域名 Top Level Domain，<code>TLD</code> 分为如下三大类：</p><ol><li>国家顶级域名：国家和某些地区的域名，如 <code>.cn</code> 表示中国 <code>.us</code> 表示美国 <code>.uk</code> 表示英国</li><li>通用顶级域名：常见的有公司 .com、网络服务机构 .net、非营利性组织 <code>.org</code>、国家或政府部门 .gov 等</li><li>基础结构域名：这种顶级域名只有一个，即 <code>arpa</code>，用于反向域名解析，因此又称反向域名</li></ol><p>国家顶级域名下注册的二级域名均由该国家自行确定；下图展示了域名空间的树状结构：</p><figure><img src="'+c+'" alt="image-20211221131203055" tabindex="0" loading="lazy"><figcaption>image-20211221131203055</figcaption></figure><p>域名系统中，<strong>每个域由不同的组织进行管理</strong>，每个组织将域再分成一定数目的子域并委托给其他组织去管理</p><p>如管理 <code>CN</code> 域的中国将 <code>EDU.CN</code> 子域授权给中国教育和科研计算机网来管理</p><h3 id="域名服务器" tabindex="-1"><a class="header-anchor" href="#域名服务器" aria-hidden="true">#</a> 域名服务器</h3><p>因特网的域名系统被设计成一个联机分布式的数据库系统，并采用客户/服务器模型</p><ul><li>域名到 IP 地址的解析是由运行在域名服务器上的程序完成的，<strong>一个服务器所负责管辖的范围称为区</strong></li><li><strong>每个区设置相应的权限域名服务器</strong>，用来保存该区中的所有主机的域名到 IP 地址的映射</li></ul><p>注意：IP 到域名不是一一对应的关系，一个 IP 可以有多个域名</p><p>每个域名服务器不但能够进行一些域名到 IP 地址的解析，而且还<strong>必须具有连向其他域名服务器的信息</strong></p><p>当自己不能进行域名到 IP 地址的转换时，能够知道到什么地方去找其他域名服务器</p><p>DNS 使用了大量的域名服务器，它们以层次方式组织，<strong>因特网上所有主机的映射分布在所有的 DNS 上</strong></p><p>主要有 4 种类型的域名服务器：</p><figure><img src="'+d+'" alt="image-20211221131319745" tabindex="0" loading="lazy"><figcaption>image-20211221131319745</figcaption></figure><h4 id="根域名服务器" tabindex="-1"><a class="header-anchor" href="#根域名服务器" aria-hidden="true">#</a> 根域名服务器</h4><p>根域名服务器是最高层次的域名服务器，所有的根域名服务器都<strong>知道所有的顶级域名服务器的 IP 地址</strong></p><p>本地域名服务器<strong>对因特网上的域名无法解析时，就首先要求助于根域名服务器</strong>，它是最重要的域名服务器</p><p>因特网上有 13 个根域名服务器，每个服务器都是冗余服务器的集群，以提供安全性和可靠性</p><p>注意：根域名服务器用来管辖顶级域（如 .com），通常它只<strong>返回相应的顶级域名服务器的 IP</strong>，而不返回代查询域名的 IP</p><h4 id="顶级域名服务器" tabindex="-1"><a class="header-anchor" href="#顶级域名服务器" aria-hidden="true">#</a> 顶级域名服务器</h4><p>这些域名服务器负责<strong>管理在该顶级域名服务器注册的所有二级域名</strong></p><p>收到 DNS 查询请求时，就给出相应的回答，可能是代查询域名的 IP，也可能是相应的授权域名服务器的 IP</p><h4 id="授权域名服务器" tabindex="-1"><a class="header-anchor" href="#授权域名服务器" aria-hidden="true">#</a> 授权域名服务器</h4><p>每台有域名的主机<strong>都要在授权域名服务器处登记</strong>，为了更加可靠地工作，一台主机最好至少有两个授权域名服务器</p><p>实际上，许多域名服务器都同时充当本地域名服务器和授权域名服务器（权限域名服务器）</p><p>授权域名服务器<strong>总能将其管辖的主机名转换为该主机的 IP 地址</strong></p><h4 id="本地域名服务器" tabindex="-1"><a class="header-anchor" href="#本地域名服务器" aria-hidden="true">#</a> 本地域名服务器</h4><p>本地 DNS 对域名系统非常重要，每个因特网服务提供者，或一所大学甚至里面的一个系，都可以有一个本地 DNS</p><p>当一台<strong>主机发出 DNS 查询请求时</strong>，这个查询请求报文就<strong>发送给该主机的本地域名服务器</strong></p><p>我们在 Windows 系统中配置本地连接时，就需要填写 DNS 地址，这个地址就是本地 DNS 的地址</p><h3 id="域名解析过程" tabindex="-1"><a class="header-anchor" href="#域名解析过程" aria-hidden="true">#</a> 域名解析过程</h3><p>域名解析：<strong>把域名映射成为 IP 地址或把 IP 地址映射成域名的过程</strong>，前者称为正向解析，后者称为反向解析</p><p>客户端需要域名解析时，用本机的 DNS 客户端构造一个 DNS 请求报文，以 UDP 数据报方式发往本地域名服务器</p><p>域名解析有两种方式：递归查询、递归与迭代相结合的查询</p><figure><img src="'+h+'" alt="image-20211221131435930" tabindex="0" loading="lazy"><figcaption>image-20211221131435930</figcaption></figure><p>递归查询：本地域名服务器<strong>只需向根域名服务器查询一次</strong>，后面要做的事交给根 DNS，根 DNS 又交给其它 DNS，由于<strong>该方法给根域名服务造成的负载过大</strong>，所以在实际中几乎不使用</p><p>递归与迭代相结合的查询方式：该方式分为两个部分：</p>',70),C=s("li",null,[s("p",null,"主机向本地域名服务器的查询采用的是递归查询"),s("p",null,[n("主机向本地 DNS 发送请求后，"),s("strong",null,"所有的事都交由本地 DNS 处理"),n("，由它向根 DNS 发送请求，而不是由自己发送")])],-1),H=s("p",null,"本地域名服务器向根域名服务器的查询采用迭代查询",-1),k=s("p",null,[n("假定某客户机想获知域名为 "),s("code",null,"y.abc.com"),n(" 主机的 IP 地址，域名解析的过程如下：")],-1),F=s("li",null,[n("客户机"),s("strong",null,"向其本地域名服务器发出 DNS 请求报文")],-1),R=s("li",null,[n("本地域名服务器收到请求后，"),s("strong",null,"查询本地缓存"),n("，若没有该记录，则"),s("strong",null,"向根域名服务器发出解析请求报文")],-1),D={href:"http://xn--6kq30g6xb01gq0gp7p286d.com",target:"_blank",rel:"noopener noreferrer"},A=s("strong",null,[n("返回对应的顶级域名服务器 "),s("code",null,"dns.com"),n(" 的 IP 地址")],-1),N=t("<li>本地域名服务器<strong>向顶级域名服务器 <code>dns.com</code> 发出解析请求报文</strong></li><li>顶级域名服务器收到请求后，判断该域名属于 <code>abc.com</code> 域，<strong>返回对应的授权域名服务器 <code>dns.abc.com</code> 的 IP 地址</strong></li><li>本地域名服务器<strong>向授权域名服务器 <code>dns.abc.com</code> 发起解析请求报文</strong></li><li>授权域名服务器 <code>dns.abc.com</code> 收到请求后，<strong>将查询结果返回给本地域名服务器</strong></li><li>本地域名服务器<strong>将查询结果保存到本地缓存，同时返回给客户机</strong></li>",5),z=s("p",null,[n("注意：如果是 "),s("code",null,"z.y.abc.com"),n(" 的话授权域名服务器 "),s("code",null,"dns.abc.com"),n(" 会返回授权域名服务器 "),s("code",null,"dns.y.abc.com"),n(" 的 IP，要多迭代一次")],-1),L=t('<p>为了提高 DNS 的查询效率，并减少因特网上的 DNS 查询报文数量，在域名服务器中广泛地使用了高速缓存（主机也有）</p><p>因为主机名和 IP 地址之间的映射不是永久的，所以 DNS 服务器将<strong>在一段时间后丢弃高速缓存中的信息</strong></p><h2 id="文件传输协议" tabindex="-1"><a class="header-anchor" href="#文件传输协议" aria-hidden="true">#</a> 文件传输协议</h2><h3 id="ftp-的工作原理" tabindex="-1"><a class="header-anchor" href="#ftp-的工作原理" aria-hidden="true">#</a> FTP 的工作原理</h3><p>文件传输协议 File Transfer Protocol，FTP 是因特网上使用得最广泛的文件传输协议</p><p>FTP 提供交互式的访问，<strong>允许客户指明文件的类型与格式</strong>，并<strong>允许文件具有存取权限</strong></p><p>它<strong>屏蔽了各计算机系统的细节</strong>，因而适合于在异构网络中的<strong>任意计算机之间传送文件</strong></p><p>FTP 提供以下功能：</p><ol><li>提供<strong>不同种类主机系统之间的文件传输能力</strong></li><li>以用户权限管理的方式提供<strong>用户对远程 FTP 服务器上的文件管理能力</strong></li><li>以匿名 FTP 的方式<strong>提供公用文件共享的能力</strong></li></ol><p>FTP 采用 C/S 的工作方式，它<strong>使用 TCP</strong> 可靠的传输服务，一个 FTP 服务器进程<strong>可同时为多个客户进程提供服务</strong></p><p>FTP 的服务器进程由两大部分组成：一个<strong>主进程，负责接收新的请求</strong>；另外有若干<strong>从进程，负责处理单个请求</strong></p><p>其工作步骤如下:</p><ol><li><strong>打开控制端口 21</strong>，使客户进程能够连接上</li><li><strong>等待客户进程发连接请求</strong></li><li><strong>启动从属进程来处理客户进程发来的请求</strong>（处理完客户请求后终止）</li><li><strong>回到等待状态</strong>，继续接收其他客户进程的请求</li></ol><p>FTP 服务器必须<strong>在整个会话期间保留用户的状态信息</strong>，服务器必须追踪用户在远程目录树上的当前位置</p><h3 id="控制连接与数据连接" tabindex="-1"><a class="header-anchor" href="#控制连接与数据连接" aria-hidden="true">#</a> 控制连接与数据连接</h3><p>FTP 在工作时使用两个并行的 TCP 连接：一个是<strong>控制连接端口号 21</strong>，一个是<strong>数据连接端口号 20</strong></p><p>使用两个不同的端口号可<strong>使协议更加简单和更容易实现</strong></p><figure><img src="'+u+'" alt="image-20211221192942605" tabindex="0" loading="lazy"><figcaption>image-20211221192942605</figcaption></figure><h4 id="控制连接" tabindex="-1"><a class="header-anchor" href="#控制连接" aria-hidden="true">#</a> 控制连接</h4><p>服务器监听 21 号端口，等待客户连接，建立在这个端口上的连接称为控制连接</p><p>控制连接用来传输控制信息（如连接请求、传送请求等)，并且<strong>控制信息都以 7 位 ASCII 格式传送</strong></p><p>FTP 客户发出的传送请求，通过控制连接发送给服务器端的控制进程，但<strong>控制连接并不用来传送文件</strong></p><p>在传输文件时还可以使用控制连接（如中止传输的命令），因此<strong>控制连接在整个会话期间一直保持打开状</strong></p><h4 id="数据连接" tabindex="-1"><a class="header-anchor" href="#数据连接" aria-hidden="true">#</a> 数据连接</h4><p>服务器端的控制进程在接收到 FTP 客户发来的文件传输请求后，就创建数据传送进程和数据连接</p><p>数据连接用来<strong>连接客户端和服务器端的数据传送进程</strong>，数据传送进程完成文件的传送后关闭数据传送连接并结束运行</p><p>数据连接有两种传输模式：主动模式 PORT 和被动模式 PASV</p><ul><li><p>PORT 模式的工作原理：</p><p>客户端要读取数据时，客户端<strong>随机开放一个端口，并发送命令告知服务器</strong></p><p>服务器收到 PORT 命令和端口号后，<strong>通过 20 端口和客户端开放的端口连接</strong>，发送数据</p></li><li><p>PASV 模式的工作原理：客户端要读取数据时，<strong>发送 PASV 命令到服务器</strong>，服务器在本地<strong>随机开放一个端口，并告知客户端</strong>，客户端<strong>连接到服务器开放的端口</strong>进行数据传输</p></li><li><p>可见，用 PORT 模式还是 PASV 模式，<strong>选择权在客户端</strong></p></li></ul><p>主动模式传送数据是<strong>服务器连接到客户端的端口</strong>；被动模式传送数据是<strong>客户端连接到服务器的端口</strong></p><hr><p>因为 FTP 使用了一个分离的控制连接（两个连接），所以也称 <strong>FTP 的控制信息是带外传送 Out-of-band 的</strong></p><p>使用 FTP 时，若要修改服务器上的文件，则需要先将文件传送到本地，修改完再发回去，来回传送耗费很多时间</p><p>而网络文件系统 NFS 则在该<strong>文件的某个特定位置</strong>开始读写数据，仅<strong>发送用户当前使用的小块数据</strong></p><h2 id="电子邮件" tabindex="-1"><a class="header-anchor" href="#电子邮件" aria-hidden="true">#</a> 电子邮件</h2><h3 id="电子邮件系统的组成结构" tabindex="-1"><a class="header-anchor" href="#电子邮件系统的组成结构" aria-hidden="true">#</a> 电子邮件系统的组成结构</h3><p>电子邮件是一种异步通信方式，通信时<strong>不需要双方同时在场</strong></p><p>电子邮件<u>把邮件发送到收件人使用的邮件服务器</u>，并放到收件人邮箱中，<u>收件人可以随时到邮件服务器进行读取</u></p><p>一个电子邮件系统应具有三个最主要的组成构件：<strong>用户代理 User Agent、邮件服务器、电子邮件使用的协议</strong></p><ol><li><p>用户代理：<strong>用户与电子邮件系统的接口</strong></p><p>向用户<strong>提供很友好的接口</strong>来发送和接收邮件，至少应当具有撰写、显示和邮件处理的功能</p><p>通常情况下，用户代理就是一个<strong>运行在 PC 上的程序</strong>，常见的有 Outlook 和 <code>Foxmail</code> 等</p></li><li><p>邮件服务器：它的功能是<strong>发送和接收邮件</strong>，还要<strong>向发信人报告邮件传送的情况</strong>，如已交付、被拒绝、丢失等</p><p>邮件服务器采用 C/S 方式工作，但它必须<strong>能够同时充当客户和服务器</strong></p><p>负责<strong>发送邮件的 SMTP 进程就是 SMTP 客户</strong>，而负责<strong>接收邮件的 SMTP 进程就是 SMTP 服务器</strong></p></li><li><p>电子邮件使用的协议：由邮件发送协议和读取协议组成</p><p>邮件发送协议：用于<strong>用户代理向邮件服务器发送邮件</strong>或在<strong>邮件服务器之间发送邮件</strong>，如 SMTP</p><p>邮件读取协议：用于<strong>用户代理从邮件服务器读取邮件</strong>，如 POP3</p><p>注意：<strong>SMTP 用的是推的通信方式</strong>，SMTP 客户将邮件推送到 SMTP 服务器；<strong>POP3 用的是拉的通信方式</strong>，用户代理从邮件服务器拉取用户邮箱中的邮件</p></li></ol><figure><img src="'+P+'" alt="image-20211222160814393" tabindex="0" loading="lazy"><figcaption>image-20211222160814393</figcaption></figure><p>电子邮件的发送、接收过程可简化为如图所示：</p><figure><img src="'+_+'" alt="image-20211222160940649" tabindex="0" loading="lazy"><figcaption>image-20211222160940649</figcaption></figure><p>电子邮件的收发过程：</p><ol><li>发信人<strong>用用户代理来撰写和编辑邮件</strong>，用户代理<strong>用 SMTP 把邮件传送给发送端邮件服务器</strong></li><li>发送端邮件服务器将邮件<strong>放入邮件缓存队列中</strong>，等待发送</li><li>发送端邮件服务器的 SMTP 客户进程，发现邮件缓存中有待发送的邮件，<strong>向接收端 SMTP 服务器发起建立 TCP 连接</strong></li><li>连接建立后，<strong>向接收端 SMTP 服务器发送邮件</strong>，发完后关闭 TCP 连接</li><li>接收端 SMTP 服务器收到邮件后，<strong>将邮件放入收信人的用户邮箱</strong>，等待收信人在方便时进行读取</li><li>收信人打算收信时，<strong>调用用户代理</strong>，使用邮件读取协议，<strong>将邮件从接收端邮件服务器的用户邮箱中取回</strong></li></ol><h3 id="电子邮件格式与-mime" tabindex="-1"><a class="header-anchor" href="#电子邮件格式与-mime" aria-hidden="true">#</a> 电子邮件格式与 MIME</h3><h4 id="电子邮件格式" tabindex="-1"><a class="header-anchor" href="#电子邮件格式" aria-hidden="true">#</a> 电子邮件格式</h4><p>一个电子邮件分为<strong>信封和内容</strong>两大部分，邮件内容又分为<strong>首部和主体</strong>两部分</p><p>RFC 822 规定了邮件的首部格式，而邮件的主体部分则让用户自由撰写</p><p>用户写好首部后，<u>邮件系统自动地将信封所需的信息提取出来并写在信封上</u>，用户不需要亲自填写信封上的信息</p><p>邮件内容的<strong>首部包含一些首部行</strong>，首部行由<strong>关键字: 值</strong>组成，有些关键字是必需的，有些则是可选的：</p><ol><li><p>To 是必需的关键字，后面填入<strong>一个或多个收件人的电子邮件地址</strong></p><p>电子邮件地址的格式：<strong>收件人邮箱名@邮箱所在主机的域名</strong>，其中<strong>收信人邮箱名在邮件服务器上必须是唯一的</strong></p></li><li><p>Subject 是可选关键字，是<strong>邮件的主题</strong>，反映了邮件的主要内容</p></li><li><p>From 是必填的关键字 ，发送者的邮箱地址，<strong>由邮件系统自动填入</strong></p></li></ol><p>首部与主体之间用一个空行进行分割，典型的邮件内容如下：</p>',52),O={class:"katex-block"},W={class:"katex-display"},B={class:"katex"},E=s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[s("semantics",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mrow",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mi",null,"F"),s("mi",null,"r"),s("mi",null,"o"),s("mi",null,"m"),s("mo",null,":"),s("mi",null,"h"),s("mi",null,"o"),s("mi",null,"o"),s("mi",null,"p"),s("mi",null,"d"),s("mi",null,"o"),s("mi",null,"g"),s("mi",{mathvariant:"normal"},"@"),s("mi",null,"h"),s("mi",null,"u"),s("mi",null,"s"),s("mi",null,"t"),s("mi",{mathvariant:"normal"},"."),s("mi",null,"e"),s("mi",null,"d"),s("mi",null,"u"),s("mi",{mathvariant:"normal"},"."),s("mi",null,"c"),s("mi",null,"n")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mi",null,"T"),s("mi",null,"o"),s("mo",null,":"),s("mi",null,"a"),s("mi",null,"b"),s("mi",null,"c"),s("mi",{mathvariant:"normal"},"@"),s("mi",null,"c"),s("mi",null,"s"),s("mi",null,"k"),s("mi",null,"a"),s("mi",null,"o"),s("mi",null,"y"),s("mi",null,"a"),s("mi",null,"n"),s("mi",{mathvariant:"normal"},"."),s("mi",null,"c"),s("mi",null,"o"),s("mi",null,"m")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mi",null,"S"),s("mi",null,"u"),s("mi",null,"b"),s("mi",null,"j"),s("mi",null,"e"),s("mi",null,"c"),s("mi",null,"t"),s("mo",null,":"),s("mi",null,"S"),s("mi",null,"a"),s("mi",null,"y"),s("mtext",null," "),s("mi",null,"h"),s("mi",null,"e"),s("mi",null,"l"),s("mi",null,"l"),s("mi",null,"o"),s("mtext",null," "),s("mi",null,"t"),s("mi",null,"o"),s("mtext",null," "),s("mi",null,"I"),s("mi",null,"n"),s("mi",null,"t"),s("mi",null,"e"),s("mi",null,"r"),s("mi",null,"n"),s("mi",null,"e"),s("mi",null,"t")])])])])]),s("mo",{fence:"true"},"}")]),s("mtext",null,"首部")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mrow",null,[s("mtable",{rowspacing:"0.25em",columnalign:"right left",columnspacing:"0em"},[s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mi",null,"b"),s("mi",null,"l"),s("mi",null,"a"),s("mi",null,"h"),s("mi",null,"b"),s("mi",null,"l"),s("mi",null,"a"),s("mi",null,"h"),s("mo",null,"⋯")])])])]),s("mtr",null,[s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow")])]),s("mtd",null,[s("mstyle",{scriptlevel:"0",displaystyle:"true"},[s("mrow",null,[s("mrow"),s("mo",null,"⋯")])])])])]),s("mo",{fence:"true"},"}")]),s("mtext",null,"主体")])])])])]),s("annotation",{encoding:"application/x-tex"}," \\begin{aligned}&\\left.\\begin{aligned}&From:hoopdog@hust.edu.cn\\\\&To:abc@cskaoyan.com\\\\&Subject:Say\\ hello\\ to\\ Internet\\end{aligned}\\right\\}首部\\\\\\\\&\\left.\\begin{aligned}&blahblah\\cdots\\\\&\\cdots\\end{aligned}\\right\\}主体\\end{aligned} ")])])],-1),U={class:"katex-html","aria-hidden":"true"},V={class:"base"},j=s("span",{class:"strut",style:{height:"9.6em","vertical-align":"-4.55em"}},null,-1),G={class:"mord"},Y={class:"mtable"},q=t('<span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.05em;"><span style="top:-7.05em;"><span class="pstrut" style="height:4.5em;"></span><span class="mord"></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:4.5em;"></span><span class="mord"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:4.5em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.55em;"><span></span></span></span></span></span>',1),K={class:"col-align-l"},Q={class:"vlist-t vlist-t2"},J={class:"vlist-r"},X={class:"vlist",style:{height:"5.05em"}},Z={style:{top:"-7.05em"}},$=s("span",{class:"pstrut",style:{height:"4.5em"}},null,-1),ss={class:"mord"},ns=s("span",{class:"mord"},null,-1),ts=s("span",{class:"mspace",style:{"margin-right":"0.1667em"}},null,-1),as={class:"minner"},ls=t('<span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-3em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-1.5em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">ro</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">h</span><span class="mord mathnormal">oo</span><span class="mord mathnormal">p</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord">@</span><span class="mord mathnormal">h</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mord mathnormal">e</span><span class="mord mathnormal">d</span><span class="mord mathnormal">u</span><span class="mord">.</span><span class="mord mathnormal">c</span><span class="mord mathnormal">n</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord mathnormal">o</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">ab</span><span class="mord mathnormal">c</span><span class="mord">@</span><span class="mord mathnormal">cs</span><span class="mord mathnormal">ka</span><span class="mord mathnormal" style="margin-right:0.03588em;">oy</span><span class="mord mathnormal">an</span><span class="mord">.</span><span class="mord mathnormal">co</span><span class="mord mathnormal">m</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">u</span><span class="mord mathnormal" style="margin-right:0.05724em;">bj</span><span class="mord mathnormal">ec</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.01968em;">ll</span><span class="mord mathnormal">o</span><span class="mspace"> </span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">er</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord mathnormal">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span>',2),os={class:"mclose"},is={class:"delimsizing mult"},rs={class:"vlist-t vlist-t2"},es={class:"vlist-r"},ps={class:"vlist",style:{height:"2.35em"}},gs=s("span",{style:{top:"-2.2em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎭")])],-1),ms={style:{top:"-2.192em"}},cs=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),ds={style:{height:"0.316em",width:"0.8889em"}},hs={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},us=s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),Ps=[us],_s=s("span",{style:{top:"-3.15em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎬")])],-1),Ts={style:{top:"-4.292em"}},ys=s("span",{class:"pstrut",style:{height:"3.15em"}},null,-1),fs={style:{height:"0.316em",width:"0.8889em"}},vs={xmlns:"http://www.w3.org/2000/svg",width:"0.8889em",height:"0.316em",style:{width:"0.8889em"},viewBox:"0 0 888.89 316",preserveAspectRatio:"xMinYMin"},bs=s("path",{d:"M384 0 H504 V316 H384z M384 0 H504 V316 H384z"},null,-1),Ss=[bs],xs=s("span",{style:{top:"-4.6em"}},[s("span",{class:"pstrut",style:{height:"3.15em"}}),s("span",{class:"delimsizinginner delim-size4"},[s("span",null,"⎫")])],-1),Is=s("span",{class:"vlist-s"},"​",-1),Ms=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"1.85em"}},[s("span")])],-1),ws=s("span",{class:"mspace",style:{"margin-right":"0.1667em"}},null,-1),Cs=s("span",{class:"mord cjk_fallback"},"首部",-1),Hs=t('<span style="top:-1.5em;"><span class="pstrut" style="height:4.5em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen nulldelimiter"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.75em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:2.84em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mord mathnormal">b</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ahb</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">ah</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">}</span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">主体</span></span></span>',1),ks=s("span",{class:"vlist-s"},"​",-1),Fs=s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"4.55em"}},[s("span")])],-1),Rs=t('<h4 id="多用途网际邮件扩充-mime" tabindex="-1"><a class="header-anchor" href="#多用途网际邮件扩充-mime" aria-hidden="true">#</a> 多用途网际邮件扩充 MIME</h4><p>由于 <strong>SMTP 只能传送一定长度的 ASCII 码</strong>，为了传输非 ASCII 码的数据，提出了多用途网络邮件扩充 MIME</p><p>MIME 的意图是<strong>继续使用目前的格式</strong>，但增加了邮件主体的结构，并<strong>定义了传送非 ASCII 码的编码规则</strong></p><p>MIME 并未改动 SMTP 或取代它，MIME 邮件可在现有的电子邮件程序和协议下传送：</p><figure><img src="'+T+`" alt="image-20211222161205419" tabindex="0" loading="lazy"><figcaption>image-20211222161205419</figcaption></figure><p>MIME 主要包括以下三部分内容：</p><ol><li><strong>5 个新的邮件首部字段</strong>：MIME 版本、内容描述、内容标识、传送编码、内容类型</li><li><strong>定义了许多邮件内容的格式</strong>，对多媒体电子邮件的表示方法进行了标准化</li><li><strong>定义了传送编码</strong>，可对任何内容格式进行转换，而内容不会被邮件系统改变</li></ol><h3 id="smtp-和-pop" tabindex="-1"><a class="header-anchor" href="#smtp-和-pop" aria-hidden="true">#</a> SMTP 和 POP</h3><h4 id="smtp" tabindex="-1"><a class="header-anchor" href="#smtp" aria-hidden="true">#</a> SMTP</h4><p>简单邮件传输协议 SMTP 是提供<strong>可靠且有效</strong>的电子邮件传输的协议，它<strong>控制两个相互通信的 SMTP 进程交换信息</strong></p><p><strong>SMTP 用的是 TCP 连接，端口号为 25</strong>，SMTP 通信有以下三个阶段：</p><h5 id="连接建立" tabindex="-1"><a class="header-anchor" href="#连接建立" aria-hidden="true">#</a> 连接建立</h5><p>发件人的邮件发送到发送方邮件服务器的邮件缓存中</p><ol><li>SMTP 客户就<strong>每隔一定时间对邮件缓存扫描一次</strong></li><li>若发现有邮件，就使用 SMTP 的熟知端口号 25 <strong>与接收方邮件服务器的 SMTP 服务器建立 TCP 连接</strong></li><li>连接建立后，接收方 SMTP 服务器<strong>发出 220 Service ready</strong></li><li>然后 SMTP 客户向 SMTP 服务器<strong>发送 <code>HELO</code> 命令，附上发送方的主机名</strong></li></ol><p>SMTP <strong>不使用中间的邮件服务器</strong>，接收方邮件服务器出故障不能建立连接时，发送方的邮件服务器<strong>等待一段时间后再次连接</strong></p><h5 id="邮件传送" tabindex="-1"><a class="header-anchor" href="#邮件传送" aria-hidden="true">#</a> 邮件传送</h5><p>连接建立后，就可开始传送邮件：</p><ol><li><p>邮件的传送从 MAIL 命令开始，格式为 <strong>MAIL 发件人的地址</strong></p></li><li><p>若 SMTP 服务器已准备好接收邮件，则<strong>回答 250 mail accepted</strong></p></li><li><p>SMTP 客户端发送<strong>一个或多个</strong> RCPT 命令，格式为 <strong>RCPT TO:&lt;收件人地址&gt;</strong></p></li><li><p>每发送一个 RCPT 命令，都应有相应的信息从 SMTP 服务器返回，<strong>如 250 recipient accepted 或 550 no such user here</strong></p><p>RCPT 命令的作用是，防止发送了很长的邮件后才知道地址错误，进而避免浪费通信资源</p></li><li><p>获得 OK 的回答后，客户端就<strong>使用 DATA 命令，表示要开始传输邮件的内容</strong></p></li><li><p>正常情况下 SMTP 服务器回复的信息是 <strong>354 Start mail input; end with &lt;CRLF&gt;.&lt;CRLF&gt;</strong>，&lt;CRLF&gt;表示回车换行</p></li><li><p>此时 SMTP 客户端就可<strong>开始传送邮件内容</strong></p></li><li><p>传输完成后<strong>用 &lt;CRLF&gt;.&lt;CRLF&gt; 表示邮件内容的结束</strong></p></li></ol><h5 id="连接释放" tabindex="-1"><a class="header-anchor" href="#连接释放" aria-hidden="true">#</a> 连接释放</h5><p>邮件发送完毕后，SMTP 客户<strong>发送 QUIT 命令</strong></p><p>SMTP 服务器<strong>返回的信息是 221</strong>，表示 SMTP 同意释放 TCP 连接，<strong>邮件传送的全部过程就此结束</strong></p><h5 id="具体过程" tabindex="-1"><a class="header-anchor" href="#具体过程" aria-hidden="true">#</a> 具体过程</h5><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A: 220 beta.gov simple mail transfer service ready
B: HELO alpha.edu
A: 250 beta.gov
B: MAIL FROM:&lt;smith@alpha.edu&gt;
A: 250 mail accepted
B: RCPT TO:&lt;jones@beta.gov&gt;
A: 250 recipient accepted
B: RCPT TO:&lt;green@beta.gov&gt;
A: 550 no such user here
B: RCPT TO:brown@beta.gov
A: 250 recipient accepted
B: DATA
A: 354 start mail input; end with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;
B: Date:Fri 27 May 2011 14:16:21 BJ
B: From:smith@alpha.edu
B: …
B: \\r\\n.\\r\\n
A: 250 OK
B: QUIT
A: 221 beta.gov service closing transmission channel.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pop3-和-imap" tabindex="-1"><a class="header-anchor" href="#pop3-和-imap" aria-hidden="true">#</a> POP3 和 IMAP</h4><p>邮局协议 Post Office Protocol，POP 是一个非常简单但功能有限的邮件读取协议，现在使用的是它的第 3 个版本 POP3：</p><ul><li>POP3 采用的是拉的通信方式，当用户读取邮件时，用户代理向邮件服务器发出请求，<strong>拉取用户邮箱中的邮件</strong></li><li>POP 也使用 C/S 的工作方式，在<strong>传输层使用 TCP，端口号为 110</strong></li><li>接收方的<strong>用户代理上必须运行 POP 客户程序</strong>，而接收方的<strong>邮件服务器上则运行 POP 服务器程序</strong></li><li>选择题：POP3 协议在传输层使用明文来传输密码，并不对密码进行加密</li></ul><p>POP 有两种工作方式：下载并保留和下载并删除：</p><ul><li>下载并保留：<strong>读取邮件后，邮件依然会保存在邮件服务器上</strong>，用户可再次从服务器上读取该邮件</li><li>下载并删除：<strong>邮件一旦被读取，就被从邮件服务器上删除</strong>，用户不能再次从服务器上读取</li></ul><p>另一个邮件读取协议是因特网报文存取协议 IMAP，它比 POP 复杂得多：</p><ul><li><p>IMAP 为用户提供了创建文件夹、在文件夹间移动邮件、在文件夹中查询邮件等联机命令，它<strong>维护了会话用户的状态信息</strong></p></li><li><p>IMAP <strong>允许用户代理只获取报文的某些部分</strong>，如可以只读取一个报文的首部，或多部分 MIME 报文的一部分</p><p>这非常适用于低带宽的情况，用户可能并不想取回邮箱中的所有邮件，尤其是包含很多音频或视频的大邮件</p></li></ul><p>随着万维网的流行，目前出现了很多基于万维网的电子邮件，如 <code>Hotmail</code>、<code>Gmail</code> 等：</p><ul><li><strong>用户浏览器与 <code>Hotmail</code> 或 <code>Gmail</code> 的邮件服务器之间</strong>的邮件<strong>发送或接收使用的是 HTTP</strong></li><li>仅在<strong>不同邮件服务器之间传送邮件时才使用 SMTP</strong></li></ul><h2 id="万维网-www" tabindex="-1"><a class="header-anchor" href="#万维网-www" aria-hidden="true">#</a> 万维网 WWW</h2><h3 id="www-的概念与组成结构" tabindex="-1"><a class="header-anchor" href="#www-的概念与组成结构" aria-hidden="true">#</a> WWW 的概念与组成结构</h3><p>万维网 World Wide Web，WWW 是一个分布式、联机式的信息存储空间，在这个空间中：<strong>一个有用的事物称为一个资源</strong></p><p>这些资源由<strong>全域统一资源定位符 URL</strong> 标识，并通过<strong>超文本传输协议 HTTP</strong> 发给使用者，使用者通过单击链接来获取资源</p><p>万维网使用链接可以方便地<strong>从因特网上的一个站点访问另一个站点</strong>，从而主动地按需获取丰富的信息</p><p>超文本标记语言 HTML 使得万维页面可以使用超链接方便地<strong>链接其他万维页面</strong>，并在计算机屏幕上显示这些页面</p><p>万维网的内核部分是由三个标准构成的：</p><ol><li><p>统一资源定位符 URL：负责<strong>标识万维网上的各种文档</strong>，每个文档<strong>具有唯一的标识符 URL</strong></p><p>对因特网上可得到的<strong>资源的位置和访问方法的一种简洁表示</strong>，相当于一个文件在网络上的名字</p></li><li><p>超文本传输协议 HTTP：<strong>使用 TCP 的应用层协议</strong>，是万维网客户程序和服务器程序之间<strong>交互所必须遵守的协议</strong></p></li><li><p>超文本标记语言 HTML：一种<strong>文档结构的标记语言</strong>，它使用一些约定的标记对页面上的各种信息、格式进行描述</p></li></ol><p>URL 的一般形式是：<strong>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</strong></p><ol><li>&lt;协议&gt;：用什么协议来获取万维网文档，常见的协议有 HTTP、FTP 等</li><li>&lt;主机&gt;：存放资源的主机在因特网中的<strong>域名或 IP 地址</strong></li><li>&lt;端口&gt; 和 &lt;路径&gt; 有时可省略</li><li>注意：<strong>URL 中不区分大小写</strong></li></ol><p>万维网<strong>以 C/S 方式工作</strong>，浏览器是万维网<strong>客户程序</strong>，万维网文档所驻留的主机（万维网服务器）则运行服务器程序</p><p>客户程序向服务器程序发出请求，服务器程序返回客户所要的万维网文档，工作流程如下：</p><ol><li>Web 用户<strong>使用浏览器与 Web 服务器建立连接</strong>，并<strong>发送浏览请求</strong></li><li>Web 服务器<strong>把 URL 转换为文件路径</strong>，并<strong>返回信息给 Web 浏览器</strong></li><li>通信完成，关闭连接</li></ol><p>万维网是<strong>无数个网络站点和网页的集合</strong>，它们在一起<strong>构成了因特网最主要的部分</strong>（因特网还包括电子邮件等）</p><h3 id="超文本传输协议-http" tabindex="-1"><a class="header-anchor" href="#超文本传输协议-http" aria-hidden="true">#</a> 超文本传输协议 HTTP</h3><p>HTTP 定义了浏览器怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器</p><p>从层次的角度看，HTTP 是<strong>面向事务的应用层协议</strong>，它规定了在<strong>浏览器和服务器之间的请求和响应的格式与规则</strong></p><p>这是万维网上能够可靠地交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础</p><h4 id="http-的操作过程" tabindex="-1"><a class="header-anchor" href="#http-的操作过程" aria-hidden="true">#</a> HTTP 的操作过程</h4><p>从协议执行过程来说，浏览器要访问 WWW 服务器时，<strong>首先要完成对 WWW 服务器的域名解析</strong></p><p>一旦获得了服务器的 IP 地址，浏览器就<strong>通过 TCP 向服务器发送连接建立请求</strong></p><p>万维网的大致工作过程如下：</p><ol><li>每个万维网站点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong></li><li>当监听到连接请求后便与浏览器建立 TCP 连接</li><li>浏览器就<strong>向服务器发出 HTTP 请求</strong></li><li>服务器收到请求后，将<strong>构建所请求 Web 页的必需信息</strong>，并通过 HTTP 响应返回给浏览器</li><li>浏览器对信息进行解释，然后将 Web 页显示给用户</li><li>最后，TCP 连接释放</li></ol><figure><img src="`+y+'" alt="image-20211222214649474" tabindex="0" loading="lazy"><figcaption>image-20211222214649474</figcaption></figure><p>HTTP 有两类报文：<strong>请求报文（浏览器 → 服务器）和响应报文（服务器 → 浏览器）</strong></p>',57),Ds={href:"http://www.tsinghua.edu.cn/chn/index.htm",target:"_blank",rel:"noopener noreferrer"},As=s("li",null,[n("浏览器"),s("strong",null,"分析链接指向的页面的 URL")],-1),Ns={href:"http://www.tsinghua.edu.cn",target:"_blank",rel:"noopener noreferrer"},zs=t("<li>域名系统 DNS <strong>解析出 IP 地址并发送给浏览器</strong></li><li>浏览器<strong>与服务器建立 TCP 连接</strong>（默认 80 端口）</li><li>浏览器<strong>发出 HTTP 请求</strong>：<code>GET /chn/index.htm</code></li><li>服务器通过 HTTP 响应<strong>把文件 <code>index.htm</code> 发送给浏览器</strong></li><li><strong>释放 TCP 连接</strong></li><li>浏览器解释文件 <code>index.htm</code>，并<strong>将 Web 页显示给用户</strong></li>",6),Ls=t('<h4 id="http-的特点" tabindex="-1"><a class="header-anchor" href="#http-的特点" aria-hidden="true">#</a> HTTP 的特点</h4><p>HTTP 使用 TCP 作为运输层协议，以便不必考虑数据在传输过程中被丢弃后要怎样被重传</p><p><strong>HTTP 本身是无连接的</strong>，即通信的双方在交换 HTTP 报文之前<strong>不需要先建立 HTTP 连接</strong></p><p><strong>HTTP 是无状态的</strong>，即一个客户两次访问一个服务器得到的响应相同，因为服务器不会去记忆访问的客户</p><p>HTTP 的无状态特性<strong>简化了服务器的设计</strong>，使服务器<strong>更容易支持大量并发的 HTTP 请求</strong></p><p>在实际应用中，通常<strong>使用 Cookie 加数据库的方式来跟踪用户的活动</strong>，Cookie 的工作原理：</p><ol><li><p>用户浏览使用 Cookie 的网站时，该网站服务器就<strong>为用户产生一个唯一的识别码</strong>，如 123456</p><p>接着<strong>在响应报文中添加一个首部行 Set-cookie: 123456</strong></p></li><li><p>用户收到响应后，就在它管理的<strong>特定 Cookie 文件</strong>中添加这个<strong>服务器的主机名和 Cookie 识别码</strong></p></li><li><p>当用户再浏览这个网站时，会<strong>取出这个网站的识别码</strong>，并放入请求报文的 Cookie 首部行 Cookie: 123456</p></li><li><p>服务器<strong>根据请求报文中的 Cookie 识别码从数据库中查询到该用户的活动记录</strong>，进而执行一些个性化的工作</p></li><li><p>注意：Cookie 内放的唯一识别码叫 <code>SessionID</code>，Cookie 不是唯一的，且可以放很多东西</p></li></ol><p>HTTP 既可以使用非持久连接，也可以使用持久连接（HTTP/1.1 支持）：</p><ul><li><p>非持久连接：每个网页元素的传输都需要<strong>单独建立一个 TCP 连接</strong>，第三次握手中<strong>捎带了客户对万维网文档的请求</strong></p><p>请求一个万维网文档所需的时间是该<strong>文档的传输时间</strong>加上<strong>两倍往返时间 RTT</strong>（建立连接 + 请求和接收文档）</p><p><strong>每个对象都导致 2 × RTT 的开销</strong>，且每<strong>建立新的 TCP 连接都要分配缓存和变量</strong>，使万维网服务器的负担很重</p><figure><img src="'+f+'" alt="image-20211222214849978" tabindex="0" loading="lazy"><figcaption>image-20211222214849978</figcaption></figure></li><li><p>持久连接：万维网服务器在发送响应后<strong>仍然保持这条连接</strong>，以便可以继续在这条连接上<strong>传送后续的 HTTP 请求和响应报文</strong></p><figure><img src="'+v+'" alt="image-20211222214922153" tabindex="0" loading="lazy"><figcaption>image-20211222214922153</figcaption></figure></li></ul><p>持久连接又分为非流水线和流水线两种方式：</p><ol><li><p>非流水线方式：客户在<strong>收到前一个响应后才能发出下一个请求</strong>，上图就是非流水线方式</p><p>服务器发送完一个对象后，其 TCP 连接就处于空闲状态，浪费了服务器资源</p></li><li><p>流水线方式：客户<strong>每遇到一个对象引用就立即发出一个请求</strong>不需要等待响应，HTTP/1.1 的默认方式</p></li></ol><p>如果所有的请求和响应都是连续发送的：</p><ol><li>流水线方式：所有引用的对象<strong>共计经历 1 个 RTT 延迟</strong></li><li>非流水线方式：<strong>每个引用都必须有 1 个 RTT 延迟</strong></li></ol><h4 id="http-的报文结构" tabindex="-1"><a class="header-anchor" href="#http-的报文结构" aria-hidden="true">#</a> HTTP 的报文结构</h4><p>HTTP 是面向文本的，因此<strong>报文中的每个字段都是一些 ASCII 码串</strong>，并且每个字段的长度都是不确定的</p><p>有两类 HTTP 报文：</p><ul><li>请求报文：从客户向服务器发送的请求报文</li><li>响应报文：从服务器到客户的回答</li></ul><figure><img src="'+b+'" alt="image-20211222215021476" tabindex="0" loading="lazy"><figcaption>image-20211222215021476</figcaption></figure><p>HTTP 请求报文和响应报文都由<strong>开始行、首部行、实体主体</strong>组成，这两种报文格式的区别就是开始行不同</p><ol><li><p>开始行：用于<strong>区分是请求报文还是响应报文</strong></p><ul><li>在请求报文中的开始行称为<strong>请求行</strong>，请求行有三个内容：<strong>请求方法、请求资源的 URL、HTTP 的版本</strong></li><li>在响应报文中的开始行称为<strong>状态行</strong>，状态行有三个内容：<strong>HTTP 版本、结果状态码，状态码相应的短语</strong></li></ul><p>开始行的三个字段之间<strong>用空格分隔</strong>，最后的 CR 和 <code>LF</code> 分别代表回车和换行</p><p>请求方法是<strong>对所请求对象进行的操作</strong>，这些方法实际上也就是一些命令：</p><figure><img src="'+S+'" alt="image-20211222215137245" tabindex="0" loading="lazy"><figcaption>image-20211222215137245</figcaption></figure></li><li><p>首部行：用来<strong>说明浏览器、服务器或报文主体的一些信息</strong>，首部可以有几行，但也可以不使用</p><p>在每个首部行中都有<strong>首部字段名和它的值</strong>，每一行在结束的地方都要有<strong>回车和换行</strong></p><p>整个首部行结束时，还有<strong>一空行将首部行和后面的实体主体分开</strong></p></li><li><p>实体主体：在请求报文中<strong>一般不用这个字段</strong>，而在响应报文中也<strong>可能没有这个字段</strong></p></li></ol><p>下图为使用 <code>Wireshark</code> 捕获的 HTTP 请求报文，结合前面的内容对请求报文进行分析</p><figure><img src="'+x+'" alt="image-20211222215216323" tabindex="0" loading="lazy"><figcaption>image-20211222215216323</figcaption></figure><ol><li><p>数据链路层：</p><p>1 ~ 6 字节为目的 MAC 地址，如果是主机发的话它是默认网关地址，即 <code>00-0f-e2-3f-27-3f</code></p><p>7 ~ 12 个字节为本机 MAC 地址，即 <code>00-27-13-67-73-8d</code></p><p>13 ~ 14 个字节 08 00 为类型字段，表示上层使用的是 IP 数据报协议</p></li><li><p>网络层：15 ~ 34 个字节为 IP 数据报的首部（<code>20B</code>）</p><p>27 ~ 30 个字节为源 IP 地址，即 <code>db-df-d2-70</code>（219.223.210.112）</p><p>31 ~ 34 个字节为目的 IP 地址，即 <code>71-69-4e-0a</code>（113.105.78.10）</p></li><li><p>传输层：35～54 个字节为 TCP 报文段的首部（<code>20B</code>）</p></li><li><p>应用层：55 个字节开始是 TCP 数据部分，即从应用层传递下来的数据</p><p>GET 对应请求行的方法，<code>/face/20.gif</code> 对应请求行的 URL，HTTP/1.1 对应请求行的版本</p><p>还有首部行，如 <code>Host: bbs.szhome.com\\r\\n</code> 表示服务器的主机，一般会带有这个首部行</p></li></ol><h3 id="应用层协议小结" tabindex="-1"><a class="header-anchor" href="#应用层协议小结" aria-hidden="true">#</a> 应用层协议小结</h3><figure><img src="'+I+'" alt="image-20211223182951324" tabindex="0" loading="lazy"><figcaption>image-20211223182951324</figcaption></figure>',25);function Os(Ws,Bs){const a=e("ExternalLinkIcon");return l(),o("div",null,[w,s("ol",null,[C,s("li",null,[H,k,s("ol",null,[F,R,s("li",null,[n("根域名服务器收到请求后，"),s("a",D,[n("判断该域名属于.com"),i(a)]),n(" 域，"),A]),N]),z])]),L,s("p",O,[s("span",W,[s("span",B,[E,s("span",U,[s("span",V,[j,s("span",G,[s("span",Y,[q,s("span",K,[s("span",Q,[s("span",J,[s("span",X,[s("span",Z,[$,s("span",ss,[ns,ts,s("span",as,[ls,s("span",os,[s("span",is,[s("span",rs,[s("span",es,[s("span",ps,[gs,s("span",ms,[cs,s("span",ds,[(l(),o("svg",hs,Ps))])]),_s,s("span",Ts,[ys,s("span",fs,[(l(),o("svg",vs,Ss))])]),xs]),Is]),Ms])])])]),ws,Cs])]),Hs]),ks]),Fs])])])])])])])])]),Rs,s("p",null,[n("用户在浏览器输入 "),s("a",Ds,[n("http://www.tsinghua.edu.cn/chn/index.htm"),i(a)]),n(" 并回车后发生的事件如下：")]),s("ol",null,[As,s("li",null,[n("浏览器向 DNS 请求"),s("strong",null,[n("解析 "),s("a",Ns,[n("www.tsinghua.edu.cn"),i(a)]),n(" 的 IP 地址")])]),zs]),Ls])}const Us=r(M,[["render",Os],["__file","第六章 应用层.html.vue"]]);export{Us as default};
